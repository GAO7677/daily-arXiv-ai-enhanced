{"id": "2507.02068", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02068", "abs": "https://arxiv.org/abs/2507.02068", "authors": ["Brian Bell", "Teresa Thomas", "Sang Won Lee", "Chris Brown"], "title": "How do Software Engineering Candidates Prepare for Technical Interviews?", "comment": null, "summary": "To obtain employment, aspiring software engineers must complete technical\ninterviews -- a hiring process which involves candidates writing code while\ncommunicating to an audience. However, the complexities of tech interviews are\ndifficult to prepare for and seldom faced in computing curricula. To this end,\nwe seek to understand how candidates prepare for technical interviews,\ninvestigating the effects of preparation methods and the role of education. We\ndistributed a survey to candidates (n = 131) actively preparing for technical\ninterviews. Our results suggest candidates rarely train in authentic settings\nand courses fail to support preparation efforts -- leading to stress and\nunpreparedness. Based on our findings, we provide implications for stakeholders\nto enhance tech interview preparation for candidates pursuing software\nengineering roles."}
{"id": "2507.02107", "categories": ["cs.SE", "cs.PL"], "pdf": "https://arxiv.org/pdf/2507.02107", "abs": "https://arxiv.org/abs/2507.02107", "authors": ["Ben Limpanukorn", "Yanjun Wang", "Zach Patterson", "Pranav Garg", "Murali Krishna Ramanathan", "Xiaofei Ma", "Anoop Deoras", "Miryung Kim"], "title": "Structural Code Search using Natural Language Queries", "comment": null, "summary": "Searching code is a common task that developers perform to understand APIs,\nlearn common code patterns, and navigate code. Currently, developers most\ncommonly search using keywords and regular expressions that are easy to use and\nwidely available. Beyond keywords and regular expressions, structural code\nsearch tools allow developers to search for code based on its syntactic\nstructure. This has numerous applications ranging from bug finding to\nsystematically refactoring code. However, these structural code search tools\noperate on queries expressed in domain-specific languages (DSL) that can be\ndifficult to learn and write. We propose to allow developers to use natural\nlanguage to search for code structurally. Expressing queries in natural\nlanguage provides an intuitive way to search for code and lowers the barrier to\nentry.\n  In this work, we develop a novel general approach that combines the reasoning\ncapabilities of an LLM to interpret natural language search queries with the\npower of structural search tools to efficiently and accurately retrieve\nrelevant code. We then instantiate this approach for two structural code search\nDSLs: Semgrep and GQL. In our evaluation, we construct a new benchmark for\nstructural code search consisting of 400 queries over 10 Java projects. We show\nthat our approach for structural code search based on translating NL queries to\nDSL queries using an LLM is effective and robust, achieving a high precision\nand recall ranging from 55% - 70%. Further, our approach significantly\noutperforms baselines based on semantic code search and LLM retrievals by up to\n57% and 14% on F1 scores."}
{"id": "2507.02110", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02110", "abs": "https://arxiv.org/abs/2507.02110", "authors": ["Md Nahidul Islam Opu", "Fatima Islam Mouri", "Rick Kazman", "Yuanfang Cai", "Shaiful Chowdhury"], "title": "Can Internal Software Metrics Predict App Popularity at Launch? Yeas! and Nays!", "comment": null, "summary": "Predicting mobile app popularity before release can provide developers with a\nstrategic advantage in a competitive marketplace, yet it remains a challenging\nproblem. This study explores whether internal software metrics, measurable from\nsource code before deployment, can predict an app's popularity, defined by user\nratings (calculated from user reviews) and DownloadsPerYear (yearly downloads).\nUsing a dataset of 446 open-source Android apps from F-Droid, we extract a wide\narray of features, including system-, class-, and method-level code metrics,\ncode smells, and app metadata. Additional information, such as user reviews,\ndownload counts, and uses-permission, was collected from the Google Play Store.\nWe evaluate regression and classification models across three feature sets: a\nminimal Size-only baseline, a domain-informed Handpicked set, and a Voting set\nderived via feature selection algorithms. Regression models perform poorly due\nto skewed data, with low $R^2$ scores. However, when reframed as binary\nclassification (Popular vs. Unpopular), results improve significantly. The best\nmodel, a Multilayer Perceptron using the Voting set, achieves F1-scores of\n0.72. These results suggest that internal code metrics, although limited in\ntheir explanatory power, can serve as useful indicators of app popularity. This\nchallenges earlier findings that dismissed internal metrics as predictors of\nsoftware quality."}
{"id": "2507.02226", "categories": ["cs.PL", "cs.AR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.02226", "abs": "https://arxiv.org/abs/2507.02226", "authors": ["Mohammad Akyash", "Kimia Azar", "Hadi Kamali"], "title": "DecoRTL: A Run-time Decoding Framework for RTL Code Generation with LLMs", "comment": "Accepted to the International Conference on Computer-Aided Design\n  (ICCAD 2025)", "summary": "As one of their many applications, large language models (LLMs) have recently\nshown promise in automating register transfer level (RTL) code generation.\nHowever, conventional LLM decoding strategies, originally designed for natural\nlanguage, often fail to meet the structural and semantic demands of RTL,\nleading to hallucinated, repetitive, or invalid code outputs. In this paper, we\nfirst investigate the root causes of these decoding failures through an\nempirical analysis of token-level entropy during RTL generation. Our findings\nreveal that LLMs exhibit low confidence in regions of structural ambiguity or\nsemantic complexity, showing that standard decoding strategies fail to\ndifferentiate between regions requiring determinism (syntax-critical regions)\nand those that benefit from creative exploratory variability (design-critical\nregions). Then, to overcome this, we introduce DecoRTL, a novel run-time\ndecoding strategy, that is both syntax-aware and contrastive for RTL code\ngeneration. DecoRTL integrates two complementary components: (i)\nself-consistency sampling, which generates multiple candidates and re-ranks\nthem based on token-level agreement to promote correctness while maintaining\ndiversity; and (ii) syntax-aware temperature adaptation, which classifies\ntokens by their syntactical and functional roles and adjusts the sampling\ntemperature accordingly, enforcing low temperature for syntax-critical tokens\nand higher temperature for exploratory ones. Our approach operates entirely at\ninference time without requiring any additional model fine-tuning. Through\nevaluations on multiple open-source LLMs using the VerilogEval benchmark, we\ndemonstrate significant improvements in syntactic validity, functional\ncorrectness, and output diversity, while the execution overhead (performance\noverhead) is imperceptible."}
{"id": "2507.02118", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02118", "abs": "https://arxiv.org/abs/2507.02118", "authors": ["Cristina Martinez Montes", "Daniela Grassi", "Nicole Novielli", "Birgit Penzenstadle"], "title": "A Multimodal Approach Combining Biometrics and Self-Report Instruments for Monitoring Stress in Programming: Methodological Insights", "comment": null, "summary": "The study of well-being, stress and other human factors has traditionally\nrelied on self-report instruments to assess key variables. However, concerns\nabout potential biases in these instruments, even when thoroughly validated and\nstandardised, have driven growing interest in alternatives in combining these\nmeasures with more objective methods, such as physiological measures.\n  We aimed to (i) compare psychometric stress measures and biometric indicators\nand (ii) identify stress-related patterns in biometric data during software\nengineering tasks.\n  We conducted an experiment where participants completed a pre-survey, then\nprogrammed two tasks wearing biometric sensors, answered brief post-surveys for\neach, and finally went through a short exit interview.\n  Our results showed diverse outcomes; we found no stress in the psychometric\ninstruments. Participants in the interviews reported a mix of feeling no stress\nand experiencing time pressure. Finally, the biometrics showed a significant\ndifference only in EDA phasic peaks.\n  We conclude that our chosen way of inducing stress by imposing a stricter\ntime limit was insufficient. We offer methodological insights for future\nstudies working with stress, biometrics, and psychometric instruments."}
{"id": "2507.02107", "categories": ["cs.SE", "cs.PL"], "pdf": "https://arxiv.org/pdf/2507.02107", "abs": "https://arxiv.org/abs/2507.02107", "authors": ["Ben Limpanukorn", "Yanjun Wang", "Zach Patterson", "Pranav Garg", "Murali Krishna Ramanathan", "Xiaofei Ma", "Anoop Deoras", "Miryung Kim"], "title": "Structural Code Search using Natural Language Queries", "comment": null, "summary": "Searching code is a common task that developers perform to understand APIs,\nlearn common code patterns, and navigate code. Currently, developers most\ncommonly search using keywords and regular expressions that are easy to use and\nwidely available. Beyond keywords and regular expressions, structural code\nsearch tools allow developers to search for code based on its syntactic\nstructure. This has numerous applications ranging from bug finding to\nsystematically refactoring code. However, these structural code search tools\noperate on queries expressed in domain-specific languages (DSL) that can be\ndifficult to learn and write. We propose to allow developers to use natural\nlanguage to search for code structurally. Expressing queries in natural\nlanguage provides an intuitive way to search for code and lowers the barrier to\nentry.\n  In this work, we develop a novel general approach that combines the reasoning\ncapabilities of an LLM to interpret natural language search queries with the\npower of structural search tools to efficiently and accurately retrieve\nrelevant code. We then instantiate this approach for two structural code search\nDSLs: Semgrep and GQL. In our evaluation, we construct a new benchmark for\nstructural code search consisting of 400 queries over 10 Java projects. We show\nthat our approach for structural code search based on translating NL queries to\nDSL queries using an LLM is effective and robust, achieving a high precision\nand recall ranging from 55% - 70%. Further, our approach significantly\noutperforms baselines based on semantic code search and LLM retrievals by up to\n57% and 14% on F1 scores."}
{"id": "2507.02137", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02137", "abs": "https://arxiv.org/abs/2507.02137", "authors": ["Martin Obaidi", "Marc Herrmann", "Jil Klünder", "Kurt Schneider"], "title": "Towards Trustworthy Sentiment Analysis in Software Engineering: Dataset Characteristics and Tool Selection", "comment": "This paper has been accepted at the RETRAI workshop of the 33rd IEEE\n  International Requirements Engineering Conference (REW 2025)", "summary": "Software development relies heavily on text-based communication, making\nsentiment analysis a valuable tool for understanding team dynamics and\nsupporting trustworthy AI-driven analytics in requirements engineering.\nHowever, existing sentiment analysis tools often perform inconsistently across\ndatasets from different platforms, due to variations in communication style and\ncontent.\n  In this study, we analyze linguistic and statistical features of 10 developer\ncommunication datasets from five platforms and evaluate the performance of 14\nsentiment analysis tools. Based on these results, we propose a mapping approach\nand questionnaire that recommends suitable sentiment analysis tools for new\ndatasets, using their characteristic features as input.\n  Our results show that dataset characteristics can be leveraged to improve\ntool selection, as platforms differ substantially in both linguistic and\nstatistical properties. While transformer-based models such as SetFit and\nRoBERTa consistently achieve strong results, tool effectiveness remains\ncontext-dependent. Our approach supports researchers and practitioners in\nselecting trustworthy tools for sentiment analysis in software engineering,\nwhile highlighting the need for ongoing evaluation as communication contexts\nevolve."}
{"id": "2507.02182", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02182", "abs": "https://arxiv.org/abs/2507.02182", "authors": ["Fangjian Lei", "Jiawen Liu", "Shayan Noei", "Ying Zou", "Derek Truong", "William Alexander"], "title": "Enhancing COBOL Code Explanations: A Multi-Agents Approach Using Large Language Models", "comment": null, "summary": "Common Business Oriented Language (COBOL) is a programming language used to\ndevelop business applications that are widely adopted by financial, business,\nand government agencies. Due to its age, complexity, and declining number of\nCOBOL developers, maintaining COBOL codebases is becoming increasingly\nchallenging. In particular, the lack of documentation makes it difficult for\nnew developers to effectively understand and maintain COBOL systems. Existing\nresearch utilizes large language models (LLMs) to explain the functionality of\ncode snippets. However, COBOL presents unique challenges due to its\narchitectural and syntactical differences, which often cause its code to exceed\nthe token window size of LLMs. In this work, we propose a multi-agent approach\nthat leverages two LLM-based agents working collaboratively to generate\nexplanations for functions, files, and the overall project. These agents\nincorporate together by utilizing contextual information from the codebase into\nthe code explanation prompts. We evaluate the effectiveness of our approach\nusing 14 open-source, real-world COBOL projects. Our results indicate that our\napproach performs significantly better than the baseline in function code\nexplanation, with improvements of 12.67%, 18.59%, and 0.62% in terms of METEOR,\nchrF, and SentenceBERT scores, respectively. At the file level, our approach\neffectively explains both short and long COBOL files that exceed the token\nwindow size of LLMs and surpass the baseline by 4.21%, 10.72%, and 14.68% in\nexplaining the purpose, functionality, and clarity of the generated\nexplanation. At the project level, our approach generates explanations that\nconvey the functionality and purpose of 82% of the selected projects."}
{"id": "2507.02318", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02318", "abs": "https://arxiv.org/abs/2507.02318", "authors": ["Chen Yang", "Ziqi Wang", "Yanjie Jiang", "Lin Yang", "Yuteng Zheng", "Jianyi Zhou", "Junjie Chen"], "title": "Precisely Detecting Python Type Errors via LLM-based Unit Test Generation", "comment": null, "summary": "Type errors in Python often lead to runtime failures, posing significant\nchallenges to software reliability and developer productivity. Existing static\nanalysis tools aim to detect such errors without execution but frequently\nsuffer from high false positive rates. Recently, unit test generation\ntechniques offer great promise in achieving high test coverage, but they often\nstruggle to produce bug-revealing tests without tailored guidance. To address\nthese limitations, we present RTED, a novel type-aware test generation\ntechnique for automatically detecting Python type errors. Specifically, RTED\ncombines step-by-step type constraint analysis with reflective validation to\nguide the test generation process and effectively suppress false positives. We\nevaluated RTED on two widely-used benchmarks, BugsInPy and TypeBugs.\nExperimental results show that RTED can detect 22-29 more benchmarked type\nerrors than four state-of-the-art techniques. RTED is also capable of producing\nfewer false positives, achieving an improvement of 173.9%-245.9% in precision.\nFurthermore, RTED successfully discovered 12 previously unknown type errors\nfrom six real-world open-source Python projects."}
{"id": "2507.02376", "categories": ["cs.SE", "cs.AI", "cs.DC"], "pdf": "https://arxiv.org/pdf/2507.02376", "abs": "https://arxiv.org/abs/2507.02376", "authors": ["Chung-ju Huang", "Ziqi Zhang", "Yinggui Wang", "Binghui Wang", "Tao Wei", "Leye Wang"], "title": "VeFIA: An Efficient Inference Auditing Framework for Vertical Federated Collaborative Software", "comment": null, "summary": "Vertical Federated Learning (VFL) is a distributed AI software deployment\nmechanism for cross-silo collaboration without accessing participants' data.\nHowever, existing VFL work lacks a mechanism to audit the execution correctness\nof the inference software of the data party. To address this problem, we design\na Vertical Federated Inference Auditing (VeFIA) framework. VeFIA helps the task\nparty to audit whether the data party's inference software is executed as\nexpected during large-scale inference without leaking the data privacy of the\ndata party or introducing additional latency to the inference system. The core\nof VeFIA is that the task party can use the inference results from a framework\nwith Trusted Execution Environments (TEE) and the coordinator to validate the\ncorrectness of the data party's computation results. VeFIA guarantees that, as\nlong as the abnormal inference exceeds 5.4%, the task party can detect\nexecution anomalies in the inference software with a probability of 99.99%,\nwithout incurring any additional online inference latency. VeFIA's random\nsampling validation achieves 100% positive predictive value, negative\npredictive value, and true positive rate in detecting abnormal inference. To\nthe best of our knowledge, this is the first paper to discuss the correctness\nof inference software execution in VFL."}
{"id": "2507.02533", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02533", "abs": "https://arxiv.org/abs/2507.02533", "authors": ["Miguel Romero-Arjona", "José A. Parejo", "Juan C. Alonso", "Ana B. Sánchez", "Aitor Arrieta", "Sergio Segura"], "title": "Meta-Fair: AI-Assisted Fairness Testing of Large Language Models", "comment": null, "summary": "Fairness--the absence of unjustified bias--is a core principle in the\ndevelopment of Artificial Intelligence (AI) systems, yet it remains difficult\nto assess and enforce. Current approaches to fairness testing in large language\nmodels (LLMs) often rely on manual evaluation, fixed templates, deterministic\nheuristics, and curated datasets, making them resource-intensive and difficult\nto scale. This work aims to lay the groundwork for a novel, automated method\nfor testing fairness in LLMs, reducing the dependence on domain-specific\nresources and broadening the applicability of current approaches. Our approach,\nMeta-Fair, is based on two key ideas. First, we adopt metamorphic testing to\nuncover bias by examining how model outputs vary in response to controlled\nmodifications of input prompts, defined by metamorphic relations (MRs). Second,\nwe propose exploiting the potential of LLMs for both test case generation and\noutput evaluation, leveraging their capability to generate diverse inputs and\nclassify outputs effectively. The proposal is complemented by three open-source\ntools supporting LLM-driven generation, execution, and evaluation of test\ncases. We report the findings of several experiments involving 12 pre-trained\nLLMs, 14 MRs, 5 bias dimensions, and 7.9K automatically generated test cases.\nThe results show that Meta-Fair is effective in uncovering bias in LLMs,\nachieving an average precision of 92% and revealing biased behaviour in 29% of\nexecutions. Additionally, LLMs prove to be reliable and consistent evaluators,\nwith the best-performing models achieving F1-scores of up to 0.79. Although\nnon-determinism affects consistency, these effects can be mitigated through\ncareful MR design. While challenges remain to ensure broader applicability, the\nresults indicate a promising path towards an unprecedented level of automation\nin LLM testing."}
{"id": "2507.02564", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02564", "abs": "https://arxiv.org/abs/2507.02564", "authors": ["Alexander Korn", "Samuel Gorsch", "Andreas Vogelsang"], "title": "LLMREI: Automating Requirements Elicitation Interviews with LLMs", "comment": null, "summary": "Requirements elicitation interviews are crucial for gathering system\nrequirements but heavily depend on skilled analysts, making them\nresource-intensive, susceptible to human biases, and prone to miscommunication.\nRecent advancements in Large Language Models present new opportunities for\nautomating parts of this process. This study introduces LLMREI, a chat bot\ndesigned to conduct requirements elicitation interviews with minimal human\nintervention, aiming to reduce common interviewer errors and improve the\nscalability of requirements elicitation. We explored two main approaches,\nzero-shot prompting and least-to-most prompting, to optimize LLMREI for\nrequirements elicitation and evaluated its performance in 33 simulated\nstakeholder interviews. A third approach, fine-tuning, was initially considered\nbut abandoned due to poor performance in preliminary trials. Our study assesses\nthe chat bot's effectiveness in three key areas: minimizing common interview\nerrors, extracting relevant requirements, and adapting its questioning based on\ninterview context and user responses. Our findings indicate that LLMREI makes a\nsimilar number of errors compared to human interviewers, is capable of\nextracting a large portion of requirements, and demonstrates a notable ability\nto generate highly context-dependent questions. We envision the greatest\nbenefit of LLMREI in automating interviews with a large number of stakeholders."}
{"id": "2507.02578", "categories": ["cs.SE", "cs.HC", "D.2.1"], "pdf": "https://arxiv.org/pdf/2507.02578", "abs": "https://arxiv.org/abs/2507.02578", "authors": ["Zoe Pfister"], "title": "Human-Machine Collaboration and Ethical Considerations in Adaptive Cyber-Physical Systems", "comment": "Copyright 2025 IEEE. Accepted for publication in: 2025 IEEE 33nd\n  International Requirements Engineering Conference (RE), Doctor Symposium\n  Paper, 5 pages", "summary": "Adaptive Cyber-Physical Systems (CPS) are systems that integrate both\nphysical and computational capabilities, which can adjust in response to\nchanging parameters. Furthermore, they increasingly incorporate human-machine\ncollaboration, allowing them to benefit from the individual strengths of humans\nand machines. Human-Machine Teaming (HMT) represents the most advanced paradigm\nof human-machine collaboration, envisioning seamless teamwork between humans\nand machines. However, achieving effective and seamless HMT in adaptive CPS is\nchallenging. While adaptive CPS already benefit from feedback loops such as\nMAPE-K, there is still a gap in integrating humans into these feedback loops\ndue to different operational cadences of humans and machines. Further, HMT\nrequires constant monitoring of human operators, collecting potentially\nsensitive information about their actions and behavior. Respecting the privacy\nand human values of the actors of the CPS is crucial for the success of\nhuman-machine teams. This research addresses these challenges by: (1)\ndeveloping novel methods and processes for integrating HMT into adaptive CPS,\nfocusing on human-machine interaction principles and their incorporation into\nadaptive feedback loops found in CPS, and (2) creating frameworks for\nintegrating, verifying, and validating ethics and human values throughout the\nsystem lifecycle, starting from requirements engineering."}
{"id": "2507.02665", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02665", "abs": "https://arxiv.org/abs/2507.02665", "authors": ["Timo Kehrer", "Robert Haines", "Guido Juckeland", "Shurui Zhou", "David E. Bernholdt"], "title": "Do Research Software Engineers and Software Engineering Researchers Speak the Same Language?", "comment": "Early access journal version: T. Kehrer, R. Haines, G. Juckeland, S.\n  Zhou and D. E. Bernholdt, \"Do Research Software Engineers and Software\n  Engineering Researchers Speak the Same Language?,\" in Computing in Science &\n  Engineering, doi: 10.1109/MCSE.2025.3557236", "summary": "Anecdotal evidence suggests that Research Software Engineers (RSEs) and\nSoftware Engineering Researchers (SERs) often use different terminologies for\nsimilar concepts, creating communication challenges. To better understand these\ndivergences, we have started investigating how SE fundamentals from the SER\ncommunity are interpreted within the RSE community, identifying aligned\nconcepts, knowledge gaps, and areas for potential adaptation. Our preliminary\nfindings reveal opportunities for mutual learning and collaboration, and our\nsystematic methodology for terminology mapping provides a foundation for a\ncrowd-sourced extension and validation in the future."}
{"id": "2507.02690", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.02690", "abs": "https://arxiv.org/abs/2507.02690", "authors": ["Jiaxing Wang", "Yifeng Yu", "Jiahan Song", "Bin Cao", "Jing Fan", "Ji Zhang"], "title": "RLHGNN: Reinforcement Learning-driven Heterogeneous Graph Neural Network for Next Activity Prediction in Business Processes", "comment": "15 pages, 7 figures. Business process prediction using reinforcement\n  learning and heterogeneous graph neural networks", "summary": "Next activity prediction represents a fundamental challenge for optimizing\nbusiness processes in service-oriented architectures such as microservices\nenvironments, distributed enterprise systems, and cloud-native platforms, which\nenables proactive resource allocation and dynamic service composition. Despite\nthe prevalence of sequence-based methods, these approaches fail to capture\nnon-sequential relationships that arise from parallel executions and\nconditional dependencies. Even though graph-based approaches address structural\npreservation, they suffer from homogeneous representations and static\nstructures that apply uniform modeling strategies regardless of individual\nprocess complexity characteristics. To address these limitations, we introduce\nRLHGNN, a novel framework that transforms event logs into heterogeneous process\ngraphs with three distinct edge types grounded in established process mining\ntheory. Our approach creates four flexible graph structures by selectively\ncombining these edges to accommodate different process complexities, and\nemploys reinforcement learning formulated as a Markov Decision Process to\nautomatically determine the optimal graph structure for each specific process\ninstance. RLHGNN then applies heterogeneous graph convolution with\nrelation-specific aggregation strategies to effectively predict the next\nactivity. This adaptive methodology enables precise modeling of both sequential\nand non-sequential relationships in service interactions. Comprehensive\nevaluation on six real-world datasets demonstrates that RLHGNN consistently\noutperforms state-of-the-art approaches. Furthermore, it maintains an inference\nlatency of approximately 1 ms per prediction, representing a highly practical\nsolution suitable for real-time business process monitoring applications. The\nsource code is available at https://github.com/Joker3993/RLHGNN."}
{"id": "2507.02695", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02695", "abs": "https://arxiv.org/abs/2507.02695", "authors": ["Sahar Ahmadisakha", "Lech Bialek", "Mohamed Soliman", "Vasilios Andrikopoulos"], "title": "Sustainability Flags for the Identification of Sustainability Posts in Q&A Platforms", "comment": null, "summary": "In recent years, sustainability in software systems has gained significant\nattention, especially with the rise of cloud computing and the shift towards\ncloud-based architectures. This shift has intensified the need to identify\nsustainability in architectural discussions to take informed architectural\ndecisions. One source to see these decisions is in online Q&A forums among\npractitioners' discussions. However, recognizing sustainability concepts within\nsoftware practitioners' discussions remains challenging due to the lack of\nclear and distinct guidelines for this task. To address this issue, we\nintroduce the notion of sustainability flags as pointers in relevant\ndiscussions, developed through thematic analysis of multiple sustainability\nbest practices from cloud providers. This study further evaluates the\neffectiveness of these flags in identifying sustainability within cloud\narchitecture posts, using a controlled experiment. Preliminary results suggest\nthat the use of flags results in classifying fewer posts as\nsustainability-related compared to a control group, with moderately higher\ncertainty and significantly improved performance. Moreover, sustainability\nflags are perceived as more useful and understandable than relying solely on\ndefinitions for identifying sustainability."}
{"id": "2507.02846", "categories": ["cs.SE", "cs.CL"], "pdf": "https://arxiv.org/pdf/2507.02846", "abs": "https://arxiv.org/abs/2507.02846", "authors": ["Anmol Singhal", "Travis Breaux"], "title": "Legal Requirements Translation from Law", "comment": "13 pages, 7 figures, Accepted at the 33rd IEEE International\n  Requirements Engineering 2025", "summary": "Software systems must comply with legal regulations, which is a\nresource-intensive task, particularly for small organizations and startups\nlacking dedicated legal expertise. Extracting metadata from regulations to\nelicit legal requirements for software is a critical step to ensure compliance.\nHowever, it is a cumbersome task due to the length and complex nature of legal\ntext. Although prior work has pursued automated methods for extracting\nstructural and semantic metadata from legal text, key limitations remain: they\ndo not consider the interplay and interrelationships among attributes\nassociated with these metadata types, and they rely on manual labeling or\nheuristic-driven machine learning, which does not generalize well to new\ndocuments. In this paper, we introduce an approach based on textual entailment\nand in-context learning for automatically generating a canonical representation\nof legal text, encodable and executable as Python code. Our representation is\ninstantiated from a manually designed Python class structure that serves as a\ndomain-specific metamodel, capturing both structural and semantic legal\nmetadata and their interrelationships. This design choice reduces the need for\nlarge, manually labeled datasets and enhances applicability to unseen\nlegislation. We evaluate our approach on 13 U.S. state data breach notification\nlaws, demonstrating that our generated representations pass approximately 89.4%\nof test cases and achieve a precision and recall of 82.2 and 88.7,\nrespectively."}
{"id": "2507.02858", "categories": ["cs.SE", "cs.CL"], "pdf": "https://arxiv.org/pdf/2507.02858", "abs": "https://arxiv.org/abs/2507.02858", "authors": ["Yuchen Shen", "Anmol Singhal", "Travis Breaux"], "title": "Requirements Elicitation Follow-Up Question Generation", "comment": "13 pages, 2 figures, accepted at the 33rd IEEE International\n  Requirements Engineering 2025", "summary": "Interviews are a widely used technique in eliciting requirements to gather\nstakeholder needs, preferences, and expectations for a software system.\nEffective interviewing requires skilled interviewers to formulate appropriate\ninterview questions in real time while facing multiple challenges, including\nlack of familiarity with the domain, excessive cognitive load, and information\noverload that hinders how humans process stakeholders' speech. Recently, large\nlanguage models (LLMs) have exhibited state-of-the-art performance in multiple\nnatural language processing tasks, including text summarization and entailment.\nTo support interviewers, we investigate the application of GPT-4o to generate\nfollow-up interview questions during requirements elicitation by building on a\nframework of common interviewer mistake types. In addition, we describe methods\nto generate questions based on interviewee speech. We report a controlled\nexperiment to evaluate LLM-generated and human-authored questions with minimal\nguidance, and a second controlled experiment to evaluate the LLM-generated\nquestions when generation is guided by interviewer mistake types. Our findings\ndemonstrate that, for both experiments, the LLM-generated questions are no\nworse than the human-authored questions with respect to clarity, relevancy, and\ninformativeness. In addition, LLM-generated questions outperform human-authored\nquestions when guided by common mistakes types. This highlights the potential\nof using LLMs to help interviewers improve the quality and ease of requirements\nelicitation interviews in real time."}
