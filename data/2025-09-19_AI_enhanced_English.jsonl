{"id": "2509.14496", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2509.14496", "abs": "https://arxiv.org/abs/2509.14496", "authors": ["Wyatt Petula", "Anushcka Joshi", "Peggy Tu", "Amrutha Somasundar", "Suman Saha"], "title": "DeliverC: Teaching Pointers through GenAI-Powered Game-Based Learning", "comment": "The paper before Camera-ready paper. The paper has been accepted by\n  SIGCSE 2026", "summary": "While game-based learning is widely used in programming education, few tools\noffer adaptive, real-time support for complex topics, such as C pointers. We\npresent DeliverC, a GenAI-enhanced game that integrates GPT-4-mini to provide\npersonalized hints and generate pointer-related challenges on the fly. In a\npilot study involving 25 undergraduate students, we investigated the impact of\nthe system on learning through gameplay data and a 15-item survey that covered\nconstructs such as motivation, self-efficacy, metacognition, and feedback\nquality. Results show that most students felt more confident and reflective\nafter using the tool, and error rates decreased as students progressed through\nscaffolded levels. However, participation decreased with task difficulty, and\nsome students reported receiving unclear or vague feedback. These findings\nsuggest that DeliverC can enhance engagement and understanding in systems\nprogramming, although refinement in AI-generated feedback is still needed. Our\nstudy highlights the potential of combining GenAI with game-based learning to\nsupport personalized and interactive practice in traditionally challenging\nprogramming domains.", "AI": {"tldr": "DeliverC, a GenAI-powered game for learning C pointers, boosted student confidence and understanding, though feedback sometimes lacked clarity. The study shows promise for combining GenAI and games in programming education, but future refinement of feedback quality is needed.", "motivation": "Teaching complex programming concepts like C pointers is challenging, and existing game-based tools often lack adaptive real-time support.", "method": "Developed DeliverC, a GenAI-powered game using GPT-4-mini to give personalized hints and dynamically create pointer-related challenges. Conducted a pilot study with 25 students using gameplay data and a 15-item survey to assess motivation, self-efficacy, metacognition, and feedback quality.", "result": "Most students gained confidence and reflection, and error rates dropped as levels became more scaffolded. Engagement dropped with increased difficulty, and feedback sometimes lacked clarity.", "conclusion": "DeliverC shows promise in enhancing student engagement and learning in systems programming, but AI-generated feedback needs improvement for clarity. Game-based, GenAI-enhanced tools can support personalized and interactive practice in tough programming areas."}}
{"id": "2509.15005", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2509.15005", "abs": "https://arxiv.org/abs/2509.15005", "authors": ["Facundo Dom\u00ednguez", "Arnaud Spiwack"], "title": "Refinement-Types Driven Development: A study", "comment": "11 pages, 3 figures, artifacts\n  https://github.com/tweag/ifl2025-liquidhaskell", "summary": "This paper advocates for the broader application of SMT solvers in everyday\nprogramming, challenging the conventional wisdom that these tools are solely\nfor formal methods and verification. We claim that SMT solvers, when seamlessly\nintegrated into a compiler's static checks, significantly enhance the\ncapabilities of ordinary type checkers in program composition. Specifically, we\nargue that refinement types, as embodied by Liquid Haskell, enable the use of\nSMT solvers in mundane programming tasks. Through a case study on handling\nbinder scopes in compilers, we envision a future where ordinary programming is\nmade simpler and more enjoyable with the aid of refinement types and SMT\nsolvers. As a secondary contribution, we present a prototype implementation of\na theory of finite maps for Liquid Haskell's solver, developed to support our\ncase study.", "AI": {"tldr": "SMT solvers aren't just for formal verification\u2014they can enhance everyday programming when combined with refinement types in languages like Haskell. The paper shows this through a case study and a practical implementation, suggesting a more enjoyable programming future with such tools.", "motivation": "SMT solvers are typically used for formal verification, but the authors believe their power can be beneficial for everyday programming tasks if integrated with the compiler's type system.", "method": "The paper integrates SMT solvers into static checks via refinement types in Liquid Haskell and demonstrates this approach with a case study on handling binder scopes in compilers. They also implement a prototype theory of finite maps for Liquid Haskell's solver.", "result": "The use of SMT solvers, through refinement types, significantly augments traditional type checkers, making programming both simpler and more robust. The theory of finite maps prototype supports enhanced reasoning abilities in Liquid Haskell.", "conclusion": "SMT solvers, when used with refinement types, can make everyday programming tasks safer and easier, and future programming could benefit greatly from such integration. The presented finite map theory prototype demonstrates how these capabilities can be realized in practice."}}
{"id": "2509.14404", "categories": ["cs.SE", "cs.AI", "cs.CL", "cs.PL"], "pdf": "https://arxiv.org/pdf/2509.14404", "abs": "https://arxiv.org/abs/2509.14404", "authors": ["Haoye Tian", "Chong Wang", "BoYang Yang", "Lyuye Zhang", "Yang Liu"], "title": "A Taxonomy of Prompt Defects in LLM Systems", "comment": null, "summary": "Large Language Models (LLMs) have become key components of modern software,\nwith prompts acting as their de-facto programming interface. However, prompt\ndesign remains largely empirical and small mistakes can cascade into\nunreliable, insecure, or inefficient behavior. This paper presents the first\nsystematic survey and taxonomy of prompt defects, recurring ways that prompts\nfail to elicit their intended behavior from LLMs. We organize defects along six\ndimensions: (1) Specification and Intent, (2) Input and Content, (3) Structure\nand Formatting, (4) Context and Memory, (5) Performance and Efficiency, and (6)\nMaintainability and Engineering. Each dimension is refined into fine-grained\nsubtypes, illustrated with concrete examples and root cause analysis. Grounded\nin software engineering principles, we show how these defects surface in real\ndevelopment workflows and examine their downstream effects. For every subtype,\nwe distill mitigation strategies that span emerging prompt engineering\npatterns, automated guardrails, testing harnesses, and evaluation frameworks.\nWe then summarize these strategies in a master taxonomy that links defect,\nimpact, and remedy. We conclude with open research challenges and a call for\nrigorous engineering-oriented methodologies to ensure that LLM-driven systems\nare dependable by design.", "AI": {"tldr": "This paper provides the first systematic taxonomy of prompt defects in LLM applications, analyzes their root causes, impacts, and mitigation strategies, and calls for more rigorous engineering methods to ensure reliable use of LLMs.", "motivation": "Prompt design for LLMs is still empirical and error-prone. Small mistakes in prompts can lead to significant problems like unreliability and inefficiency, yet no systematic framework has existed to understand or address these failures. The paper aims to bring structure, analysis, and engineering rigor to this crucial aspect of LLM software development.", "method": "The paper systematically surveys prompt defects using a taxonomy organized along six dimensions, refines these into specific subtypes with examples and root cause analysis, and distills practical mitigation strategies for each subtype. The methodology leverages software engineering principles and real-world development scenarios.", "result": "The authors deliver the first comprehensive taxonomy of prompt defects, demonstrate how these manifest in real workflows, analyze root causes and impacts, and present associated mitigation strategies. They summarize findings in a consolidated framework linking each defect type to its effects and remedies.", "conclusion": "The paper concludes by highlighting the need for rigorous, engineering-oriented methodologies to ensure the dependability of LLM-driven systems, summarizing a master taxonomy that connects prompt defects, their impacts, and mitigation strategies, and calling attention to open research challenges."}}
{"id": "2509.14623", "categories": ["cs.SE", "cs.AI", "cs.PL", "cs.SY", "eess.SY"], "pdf": "https://arxiv.org/pdf/2509.14623", "abs": "https://arxiv.org/abs/2509.14623", "authors": ["Hanlong Wan", "Xing Lu", "Yan Chen", "Karthik Devaprasad", "Laura Hinkle"], "title": "Automating Modelica Module Generation Using Large Language Models: A Case Study on Building Control Description Language", "comment": "This is the pre-peer-review version of a journal paper; the repo is\n  available at: https://github.com/pnnl/prompt2control", "summary": "Dynamic energy systems and controls require advanced modeling frameworks to\ndesign and test supervisory and fault tolerant strategies. Modelica is a widely\nused equation based language, but developing control modules is labor intensive\nand requires specialized expertise. This paper examines the use of large\nlanguage models (LLMs) to automate the generation of Control Description\nLanguage modules in the Building Modelica Library as a case study. We developed\na structured workflow that combines standardized prompt scaffolds, library\naware grounding, automated compilation with OpenModelica, and human in the loop\nevaluation. Experiments were carried out on four basic logic tasks (And, Or,\nNot, and Switch) and five control modules (chiller enable/disable, bypass valve\ncontrol, cooling tower fan speed, plant requests, and relief damper control).\nThe results showed that GPT 4o failed to produce executable Modelica code in\nzero shot mode, while Claude Sonnet 4 achieved up to full success for basic\nlogic blocks with carefully engineered prompts. For control modules, success\nrates reached 83 percent, and failed outputs required medium level human repair\n(estimated one to eight hours). Retrieval augmented generation often produced\nmismatches in module selection (for example, And retrieved as Or), while a\ndeterministic hard rule search strategy avoided these errors. Human evaluation\nalso outperformed AI evaluation, since current LLMs cannot assess simulation\nresults or validate behavioral correctness. Despite these limitations, the LLM\nassisted workflow reduced the average development time from 10 to 20 hours down\nto 4 to 6 hours per module, corresponding to 40 to 60 percent time savings.\nThese results highlight both the potential and current limitations of LLM\nassisted Modelica generation, and point to future research in pre simulation\nvalidation, stronger grounding, and closed loop evaluation.", "AI": {"tldr": "This study shows that large language models (LLMs) can automate parts of Modelica control module development, saving 40-60% in development time. Claude Sonnet 4 performed best with engineered prompts, while GPT 4o struggled. Human-in-the-loop evaluation is crucial, as LLMs currently cannot fully validate code behavior. More advanced grounding and pre-simulation validation are needed for broader LLM adoption in this field.", "motivation": "Developing control modules for dynamic energy systems in Modelica is labor intensive and requires specialized expertise, which motivates automation to speed up workflow and make development accessible.", "method": "The authors designed a workflow combining standardized prompts, library-aware grounding, automated compilation (OpenModelica), and human-in-the-loop evaluation to generate Control Description Language modules with large language models. They compared zero-shot and engineered prompts across GPT 4o and Claude Sonnet 4, tested retrieval augmented generation vs. hard rule search, and assessed outputs via human and AI evaluation.", "result": "Claude Sonnet 4 provided up to full success for basic logic blocks with engineered prompts, and an 83% success rate for control modules. Failed outputs needed moderate human repair. GPT 4o failed in zero-shot mode. Automated retrieval often mismatched modules, while deterministic rule search performed better. LLM-generated modules reduced development time from 10-20 to 4-6 hours (40-60% savings). Human evaluators outperformed AI evaluators.", "conclusion": "LLMs can significantly reduce development time for control modules in Modelica, but current solutions have limitations in behavioral validation and accuracy. Improved grounding and validation methods are needed for robust, reliable automation."}}
{"id": "2509.14265", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.14265", "abs": "https://arxiv.org/abs/2509.14265", "authors": ["Siyuan Chen", "Zhichao Lu", "Qingfu Zhang"], "title": "Evolution of Kernels: Automated RISC-V Kernel Optimization with Large Language Models", "comment": "Technical report", "summary": "Automated kernel design is critical for overcoming software ecosystem\nbarriers in emerging hardware platforms like RISC-V. While large language\nmodels (LLMs) have shown promise for automated kernel optimization,\ndemonstrating success in CUDA domains with comprehensive technical documents\nand mature codebases, their effectiveness remains unproven for reference-scarce\ndomains like RISC-V. We present Evolution of Kernels (EoK), a novel LLM-based\nevolutionary program search framework that automates kernel design for domains\nwith limited reference material. EoK mitigates reference scarcity by mining and\nformalizing reusable optimization ideas (general design principles + actionable\nthoughts) from established kernel libraries' development histories; it then\nguides parallel LLM explorations using these ideas, enriched via\nRetrieval-Augmented Generation (RAG) with RISC-V-specific context, prioritizing\nhistorically effective techniques. Empirically, EoK achieves a median 1.27x\nspeedup, surpassing human experts on all 80 evaluated kernel design tasks and\nimproving upon prior LLM-based automated kernel design methods by 20%. These\nresults underscore the viability of incorporating human experience into\nemerging domains and highlight the immense potential of LLM-based automated\nkernel optimization.", "AI": {"tldr": "This paper introduces a novel LLM-based framework, EoK, for automated kernel optimization in domains lacking technical references, like RISC-V. By mining and reusing proven optimization strategies from existing libraries, EoK outperforms experts and previous methods, showing strong potential for automated design in emerging hardware platforms.", "motivation": "Automated kernel design faces significant challenges in domains like RISC-V, which lack comprehensive technical documentation and mature codebases, unlike established areas such as CUDA. There is a critical need for approaches that can overcome software ecosystem barriers in these emerging hardware platforms.", "method": "The authors introduce Evolution of Kernels (EoK), a novel framework that leverages large language models (LLMs) combined with evolutionary program search. EoK mitigates reference scarcity by mining reusable optimization ideas from existing kernel library histories. These insights guide LLM explorations, which are further tailored for RISC-V using Retrieval-Augmented Generation (RAG) and context-specific techniques.", "result": "EoK achieves a median speedup of 1.27x across 80 RISC-V kernel design tasks, outperforming human experts on all tasks and improving upon previous LLM-based methods by 20%.", "conclusion": "Incorporating human experience and historically effective optimization techniques into LLM-driven frameworks enables automated kernel design for reference-scarce domains like RISC-V, demonstrating substantial improvements over human and prior automated approaches."}}
{"id": "2509.14646", "categories": ["cs.SE", "cs.PL"], "pdf": "https://arxiv.org/pdf/2509.14646", "abs": "https://arxiv.org/abs/2509.14646", "authors": ["Yongpan Wang", "Xin Xu", "Xiaojie Zhu", "Xiaodong Gu", "Beijun Shen"], "title": "SALT4Decompile: Inferring Source-level Abstract Logic Tree for LLM-Based Binary Decompilation", "comment": "13 pages, 7 figures", "summary": "Decompilation is widely used in reverse engineering to recover high-level\nlanguage code from binary executables. While recent approaches leveraging Large\nLanguage Models (LLMs) have shown promising progress, they typically treat\nassembly code as a linear sequence of instructions, overlooking arbitrary jump\npatterns and isolated data segments inherent to binary files. This limitation\nsignificantly hinders their ability to correctly infer source code semantics\nfrom assembly code. To address this limitation, we propose \\saltm, a novel\nbinary decompilation method that abstracts stable logical features shared\nbetween binary and source code. The core idea of \\saltm is to abstract selected\nbinary-level operations, such as specific jumps, into a high-level logic\nframework that better guides LLMs in semantic recovery. Given a binary\nfunction, \\saltm constructs a Source-level Abstract Logic Tree (\\salt) from\nassembly code to approximate the logic structure of high-level language. It\nthen fine-tunes an LLM using the reconstructed \\salt to generate decompiled\ncode. Finally, the output is refined through error correction and symbol\nrecovery to improve readability and correctness. We compare \\saltm to three\ncategories of baselines (general-purpose LLMs, commercial decompilers, and\ndecompilation methods) using three well-known datasets (Decompile-Eval, MBPP,\nExebench). Our experimental results demonstrate that \\saltm is highly effective\nin recovering the logic of the source code, significantly outperforming\nstate-of-the-art methods (e.g., 70.4\\% TCP rate on Decompile-Eval with a 10.6\\%\nimprovement). The results further validate its robustness against four commonly\nused obfuscation techniques. Additionally, analyses of real-world software and\na user study confirm that our decompiled output offers superior assistance to\nhuman analysts in comprehending binary functions.", "AI": {"tldr": "SALTM introduces a novel logic-abstracting approach to guide LLMs in decompiling binaries, achieving superior semantic recovery and usability compared to existing tools and methods.", "motivation": "Existing LLM-based decompilation approaches treat assembly code as a linear sequence and overlook complex control flows and isolated data segments, limiting their ability to recover accurate high-level source code semantics.", "method": "The proposed method, SALTM, abstracts stable logical features from binary code and constructs a Source-level Abstract Logic Tree (SALT) from assembly code. It then fine-tunes an LLM using the generated SALT for decompilation and further refines the output with error correction and symbol recovery.", "result": "SALTM outperforms general-purpose LLMs, commercial decompilers, and other decompilation methods on benchmarks such as Decompile-Eval, showing a 70.4% TCP rate with a 10.6% improvement. It remains robust against four common obfuscation techniques and provides better assistance to human analysts in comprehending binary functions.", "conclusion": "SALTM effectively bridges the semantic gap between binary and source code by abstracting logical structures, resulting in more accurate and readable decompiled code that surpasses state-of-the-art competitors and aids human analysis."}}
{"id": "2509.14273", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.14273", "abs": "https://arxiv.org/abs/2509.14273", "authors": ["Swapnil Sharma Sarker", "Tanzina Taher Ifty"], "title": "Automated and Context-Aware Code Documentation Leveraging Advanced LLMs", "comment": null, "summary": "Code documentation is essential to improve software maintainability and\ncomprehension. The tedious nature of manual code documentation has led to much\nresearch on automated documentation generation. Existing automated approaches\nprimarily focused on code summarization, leaving a gap in template-based\ndocumentation generation (e.g., Javadoc), particularly with publicly available\nLarge Language Models (LLMs). Furthermore, progress in this area has been\nhindered by the lack of a Javadoc-specific dataset that incorporates modern\nlanguage features, provides broad framework/library coverage, and includes\nnecessary contextual information. This study aims to address these gaps by\ndeveloping a tailored dataset and assessing the capabilities of publicly\navailable LLMs for context-aware, template-based Javadoc generation. In this\nwork, we present a novel, context-aware dataset for Javadoc generation that\nincludes critical structural and semantic information from modern Java\ncodebases. We evaluate five open-source LLMs (including LLaMA-3.1, Gemma-2,\nPhi-3, Mistral, Qwen-2.5) using zero-shot, few-shot, and fine-tuned setups and\nprovide a comparative analysis of their performance. Our results demonstrate\nthat LLaMA 3.1 performs consistently well and is a reliable candidate for\npractical, automated Javadoc generation, offering a viable alternative to\nproprietary systems.", "AI": {"tldr": "The paper addresses the lack of effective automated solutions and datasets for template-based (Javadoc) code documentation. By releasing a new, context-rich dataset and evaluating several open-source LLMs, the authors find LLaMA-3.1 to be the most reliable for this task, suggesting it as a practical solution for automated documentation generation.", "motivation": "Manual code documentation is tedious and time-consuming, and current automated approaches have mostly focused on code summarization rather than structured, template-based documentation like Javadocs. There is also a lack of suitable datasets that include modern language features and context for this task.", "method": "The authors created a novel, context-aware dataset specifically for Javadoc generation, incorporating structural and semantic information from up-to-date Java codebases. They evaluated five open-source large language models (LLMs)\u2014LLaMA-3.1, Gemma-2, Phi-3, Mistral, and Qwen-2.5\u2014using zero-shot, few-shot, and fine-tuned methods to compare their performances.", "result": "Among the tested models, LLaMA-3.1 consistently delivered strong results across various setups, proving to be reliable for automated Javadoc generation.", "conclusion": "LLaMA-3.1 is a robust and practical alternative to proprietary systems for automated, context-aware, template-based Javadoc generation, particularly when powered with a tailored, modern dataset. The study also fills the dataset gap in this research area."}}
{"id": "2509.15150", "categories": ["cs.SE", "cs.PL", "D.2.6; D.3.3; D.2.3; D.2.5; D.2.13"], "pdf": "https://arxiv.org/pdf/2509.15150", "abs": "https://arxiv.org/abs/2509.15150", "authors": ["Federico Bruzzone", "Walter Cazzola", "Luca Favalli"], "title": "Code Less to Code More: Streamlining Language Server Protocol and Type System Development for Language Families", "comment": "34 pages, 10 figures, Journal of Systems and Software, June 2025, for\n  the replication package, see https://doi.org/10.5281/zenodo.15276991", "summary": "Developing editing support for $L$ languages in $E$ editors is complex and\ntime-consuming. Some languages do not provide dedicated editors, while others\noffer a single native editor. The $\\textit{language server protocol}$ (LSP)\nreduces the language-editor combinations $L \\times E$ to $L + E$, where a\nsingle language server communicates with editors via LSP plugins. However,\noverlapping implementations of linguistic components remain an issue. Existing\nlanguage workbenches struggle with modularity, reusability, and leveraging type\nsystems for language server generation. In this work, we propose: (i) Typelang,\na family of domain-specific languages for modular, composable, and reusable\ntype system implementation, (ii) a modular language server generation process,\nproducing servers for languages built in a modular workbench, (iii) the\nvariant-oriented programming paradigm and a cross-artifact coordination layer\nto manage interdependent software variants, and (iv) an LSP plugin generator,\nreducing $E$ to $1$ by automating plugin creation for multiple editors. To\nsimplify editing support for language families, each language artifact\nintegrates its own Typelang variant, used to generate language servers. This\nreduces combinations to $T \\times 1$, where $T = L$ represents the number of\ntype systems. Further reuse of language artifacts across languages lowers this\nto $N \\times 1$, where $N << T$, representing unique type systems. We implement\nTypelang in Neverlang, generating language servers for each artifact and LSP\nplugins for three editors. Empirical evaluation shows a 93.48% reduction in\ncharacters needed for type system implementation and 100% automation of LSP\nplugin generation, significantly lowering effort for editing support in\nlanguage families, especially when artifacts are reused.", "AI": {"tldr": "This paper introduces Typelang for modular type system implementation, automates language server and editor plugin generation, and achieves massive reductions in developer effort for editing support across languages and editors.", "motivation": "Supporting multiple languages across multiple editors is complex, involving redundant implementations and lack of modularity and reusability in current solutions. There is a need to simplify and automate the generation of language servers and plugins for editors, leveraging type systems and modular design.", "method": "The paper introduces Typelang (a family of DSLs for type systems), a modular language server generation process, a variant-oriented programming paradigm, a cross-artifact coordination layer, and an LSP plugin generator. Typelang is implemented in Neverlang to generate language servers and plugins.", "result": "Empirical evaluation shows a 93.48% reduction in characters for type system implementation and complete automation of LSP plugin creation across three editors, drastically reducing the effort required to provide editing support for language families.", "conclusion": "The proposed approach significantly simplifies and automates the process of editing support for language families, enabling modularity, reusability, and reduced development effort through the use of Typelang and automated plugin generation."}}
{"id": "2509.14279", "categories": ["cs.SE", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.14279", "abs": "https://arxiv.org/abs/2509.14279", "authors": ["Robert Tjarko Lange", "Qi Sun", "Aaditya Prasad", "Maxence Faldor", "Yujin Tang", "David Ha"], "title": "Towards Robust Agentic CUDA Kernel Benchmarking, Verification, and Optimization", "comment": "62 pages, 10 figures", "summary": "Recent advances in large language models (LLMs) demonstrate their\neffectiveness in scaling test-time compute for software engineering tasks.\nHowever, these approaches often focus on high-level solutions, with limited\nattention to optimizing low-level CUDA kernel implementations. Additionally,\nexisting kernel generation benchmarks suffer from exploitable loopholes and\ninsufficient diversity in testing conditions, hindering true generalization\nassessment. To address these limitations, we introduce robust-kbench, a new\nbenchmark for rigorous evaluation of kernel performance and correctness across\nvaried scenarios. Furthermore, we present a comprehensive agentic framework\nthat automates CUDA kernel discovery, verification, and optimization. This\npipeline enables frontier LLMs to translate torch code to CUDA kernels and\niteratively improve their runtime within our robust evaluation setting. Our\nsequential workflow first translates PyTorch code into equivalent CUDA kernels.\nIt then optimizes their runtime using a novel evolutionary meta-generation\nprocedure tailored to the CUDA ecosystem, guided by LLM-based verifiers for\ncorrectness and efficient filtering. Evaluated on robust-kbench, our approach\nproduces CUDA kernels outperforming torch implementations for practical\napplications, including forward and backward passes. It can fuse operations and\ndeploy various runtime optimization strategies. The verifier workflow\naccurately classifies incorrect kernels, enhancing hardware verification\nefficiency.", "AI": {"tldr": "The paper introduces robust-kbench, a diverse new benchmark for evaluating CUDA kernels, and an agentic LLM-based framework for automating their translation, optimization, and verification from PyTorch code. This approach produces faster and more accurate CUDA kernels than torch implementations, with robust verification and optimization strategies that address shortcomings in existing methods.", "motivation": "Existing LLM approaches in software engineering focus on high-level tasks and lack optimizations for low-level CUDA kernel implementations. Additionally, current CUDA kernel generation benchmarks have weaknesses such as loopholes and inadequate diversity, which prevent proper evaluation of LLM generalization and performance.", "method": "The paper introduces robust-kbench, a new benchmark designed for diverse and rigorous evaluation of CUDA kernel performance and correctness. It also presents an agentic framework that automates CUDA kernel generation, verification, and optimization using frontier LLMs. The pipeline first translates PyTorch code to CUDA kernels, then applies an evolutionary meta-generation procedure with LLM-based verifiers to optimize runtime and ensure correctness.", "result": "Their approach generates CUDA kernels that outperform standard torch implementations in practical scenarios including forward and backward passes. The method is able to fuse operations, deploy various runtime optimization strategies, and the verifier workflow efficiently identifies incorrect kernels, improving hardware verification.", "conclusion": "The proposed robust-kbench and agentic framework enable rigorous and automated evaluation and optimization of CUDA kernels via LLMs, demonstrating significant improvements over existing torch implementations and addressing loopholes in previous benchmarks."}}
{"id": "2509.14281", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.14281", "abs": "https://arxiv.org/abs/2509.14281", "authors": ["Xifeng Yao", "Dongyu Lang", "Wu Zhang", "Xintong Guo", "Huarui Xie", "Yinhao Ni", "Ping Liu", "Guang Shen", "Yi Bai", "Dandan Tu", "Changzheng Zhang"], "title": "SCoGen: Scenario-Centric Graph-Based Synthesis of Real-World Code Problems", "comment": null, "summary": "Significant advancements have been made in the capabilities of code large\nlanguage models, leading to their rapid adoption and application across a wide\nrange of domains. However, their further advancements are often constrained by\nthe scarcity of real-world coding problems. To bridge this gap, we propose a\nnovel framework for synthesizing code problems that emulate authentic\nreal-world scenarios. This framework systematically integrates domain\nknowledge, domain skills, and coding skills, all of which are meticulously\nextracted from real-world programming-related datasets, including Stack\nOverflow and Kaggle. The extracted elements serve as the foundational building\nblocks for constructing code problems. To align the generated problems with\npractical applications, application scenarios are also mined from the\naforementioned datasets. These scenarios are then utilized to construct a\nscenario-centric graph that interconnects domain knowledge, domain skills, and\ncoding skills. Based on this structured representation, a sampling strategy on\nthe graph is designed, which effectively controls the generation of a code\nproblem with complexity and diversity, reflects real-world challenges.\nExperimental results demonstrate that the proposed method consistently achieves\nsuperior performance over state-of-the-art open-source large language models of\nvarying sizes and functionalities, including both coders and general-purpose\nmodels, across a diverse set of real-world benchmarks.", "AI": {"tldr": "The paper introduces a novel framework to automatically generate realistic coding problems using knowledge mined from real-world datasets. This approach supports better training and evaluation of code large language models by producing more relevant, diverse, and complex problems than existing methods.", "motivation": "The motivation is to address the bottleneck in advancing code large language models, which is due to a lack of real-world coding problems for training and evaluation.", "method": "The paper proposes a framework that synthesizes realistic code problems. It extracts domain knowledge, domain skills, and coding skills from real-world datasets (like Stack Overflow and Kaggle), constructs a scenario-centric graph interconnecting these elements, and applies a sampling strategy to generate diverse and complex problems reflecting real-world scenarios.", "result": "Experimental results show that the proposed framework produces code problems that enable better performance of language models compared to state-of-the-art open-source models, across various benchmarks.", "conclusion": "The framework effectively fills the gap of real-world code problems, facilitating further advancement of code large language models and outperforming existing open-source solutions in generating useful training and evaluation data."}}
{"id": "2509.14294", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.14294", "abs": "https://arxiv.org/abs/2509.14294", "authors": ["Hira Naveed", "Scott Barnett", "Chetan Arora", "John Grundy", "Hourieh Khalajzadeh", "Omar Haggag"], "title": "Monitoring Machine Learning Systems: A Multivocal Literature Review", "comment": null, "summary": "Context: Dynamic production environments make it challenging to maintain\nreliable machine learning (ML) systems. Runtime issues, such as changes in data\npatterns or operating contexts, that degrade model performance are a common\noccurrence in production settings. Monitoring enables early detection and\nmitigation of these runtime issues, helping maintain users' trust and prevent\nunwanted consequences for organizations. Aim: This study aims to provide a\ncomprehensive overview of the ML monitoring literature. Method: We conducted a\nmultivocal literature review (MLR) following the well established guidelines by\nGarousi to investigate various aspects of ML monitoring approaches in 136\npapers. Results: We analyzed selected studies based on four key areas: (1) the\nmotivations, goals, and context; (2) the monitored aspects, specific\ntechniques, metrics, and tools; (3) the contributions and benefits; and (4) the\ncurrent limitations. We also discuss several insights found in the studies,\ntheir implications, and recommendations for future research and practice.\nConclusion: Our MLR identifies and summarizes ML monitoring practices and gaps,\nemphasizing similarities and disconnects between formal and gray literature.\nOur study is valuable for both academics and practitioners, as it helps select\nappropriate solutions, highlights limitations in current approaches, and\nprovides future directions for research and tool development.", "AI": {"tldr": "This paper systematically reviews 136 sources on machine learning monitoring in production, highlighting current practices, tools, and gaps. It compares formal and practical literature, offering recommendations and future research directions to enhance ML system reliability.", "motivation": "Maintaining reliable machine learning (ML) systems in dynamic production environments is challenging due to frequent runtime issues such as data drift and operational changes that degrade model performance. Early detection through monitoring is essential to prevent negative outcomes and maintain trust.", "method": "A multivocal literature review (MLR) was conducted, following Garousi's established guidelines. The review covered 136 papers and analyzed them across four areas: motivations and contexts, techniques and tools used, contributions and benefits, and limitations of current practices.", "result": "The study categorizes and summarizes the ML monitoring landscape, covering both academic and 'gray' literature. It reveals commonalities and gaps in current ML monitoring practices, provides recommendations, and identifies limitations for future improvement.", "conclusion": "The review offers a comprehensive mapping of ML monitoring approaches and points out important differences and overlaps between formal and gray literature. It serves as a significant resource for both researchers and practitioners by aiding in choosing monitoring solutions and identifying areas that require further research."}}
{"id": "2509.14347", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.14347", "abs": "https://arxiv.org/abs/2509.14347", "authors": ["Henri A\u00efdasso", "Francis Bordeleau", "Ali Tizghadam"], "title": "On the Illusion of Success: An Empirical Study of Build Reruns and Silent Failures in Industrial CI", "comment": "17 pages, 7 figures", "summary": "Reliability of build outcomes is a cornerstone of effective Continuous\nIntegration (CI). Yet in practice, developers often struggle with\nnon-deterministic issues in the code or CI infrastructure, which undermine\ntrust in build results. When faced with such unexpected outcomes, developers\noften repeatedly rerun jobs hoping for true success, but this practice is known\nto increase CI costs and reduce productivity. While recent studies have focused\non intermittent job failures, no prior work has investigated silent failures,\nwhere build jobs are marked as successful but fail to complete all or part of\ntheir tasks. Such silent failures often go unnoticed, creating an illusion of\nsuccess with detrimental consequences such as bugs escaping into production.\nThis paper presents the first empirical study of silent failures through the\npractice of rerunning successful jobs. An analysis of 142,387 jobs across 81\nindustrial projects shows that 11% of successful jobs are rerun, with 35% of\nthese reruns occurring after more than 24 hours. Using mixed-effects models on\n32 independent variables (AUC of 85%), we identified key factors associated\nwith reruns of successful jobs, notably testing and static analysis tasks,\nscripting languages like Shell, and developers prior rerun tendencies. A\nfurther analysis of 92 public issues revealed 11 categories of silent failures\naligning with these factors, the most frequent being artifact operation errors,\ncaching errors, and ignored exit codes. Overall, our findings provide valuable\ninsights into the circumstances and causes of silent failures to raise\nawareness among teams, and present solutions to improve CI reliability.", "AI": {"tldr": "The paper empirically examines silent failures in CI\u2014when builds falsely appear successful\u2014and identifies their prevalence, causes, and categories. It highlights the need for detection and mitigation strategies to ensure CI trustworthiness and software quality.", "motivation": "The paper aims to address issues in Continuous Integration (CI) where build outcomes can be unreliable due to non-deterministic or silent failures. While previous studies looked at visible job failures, silent failures\u2014successful builds that actually fail partly or wholly\u2014remain underexplored despite their potential to let bugs slip into production.", "method": "The authors conducted the first empirical study of silent failures by analyzing reruns of successful CI jobs. They examined 142,387 jobs from 81 industrial projects, using mixed-effects statistical models on 32 variables to identify correlates. They also performed qualitative analysis on 92 public issues to categorize types of silent failures.", "result": "Key findings include that 11% of 'successful' jobs are rerun, with over a third happening after more than 24 hours. Factors related to increased reruns include testing/static analysis tasks, scripting languages (like Shell), and developer's past rerun behaviors. The study identified 11 categories of silent failures, with the most common being artifact operation errors, caching problems, and ignored exit codes.", "conclusion": "Silent failures in CI are more common than previously recognized and have specific patterns and contributors. Identifying and understanding these enables better CI practices, improved reliability, and heightened team awareness."}}
{"id": "2509.14373", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.14373", "abs": "https://arxiv.org/abs/2509.14373", "authors": ["Huy Le", "Phong Nguyen", "Hao Do", "Tuan Nguyen", "Thien Pham", "Anh Nguyen-Duc", "Tho Quan"], "title": "CodeLSI: Leveraging Foundation Models for Automated Code Generation with Low-Rank Optimization and Domain-Specific Instruction Tuning", "comment": null, "summary": "Context: Automated code generation using Foundation Models (FMs) offers\npromising solutions for enhancing software development efficiency. However,\nchallenges remain in ensuring domain specificity, cost-effectiveness, and\nsecurity - especially when relying on third-party APIs. This paper introduces\nCodeLSI, a framework that combines low-rank optimization and domain-specific\ninstruction tuning to address these challenges.\n  Objectives: The aim of this study is to develop and evaluate CodeLSI, a novel\napproach for generating high-quality code tailored to specific domains, using\nFMs fine-tuned on company infrastructure without dependence on external APIs.\n  Methods: CodeLSI applies low-rank adaptation techniques to reduce the\ncomputational cost of model pre-training and fine-tuning. Domain-specific\ninstruction tuning is employed to align code generation with organizational\nneeds. We implemented and tested the framework on real-world JavaScript coding\ntasks using datasets drawn from internal software projects.\n  Results: Experimental evaluations show that CodeLSI produces high-quality,\ncontext aware code. It outperforms baseline models in terms of relevance,\naccuracy, and domain fit. The use of low-rank optimization significantly\nreduced resource requirements, enabling scalable training on company-owned\ninfrastructure.\n  Conclusion: CodeLSI demonstrates that combining low-rank optimization with\ndomain specific tuning can enhance the practicality and performance of FMs for\nautomated code generation. This approach provides a secure, cost-efficient\nalternative to commercial API based solutions and supports faster, more\ntargeted innovation in software development.", "AI": {"tldr": "CodeLSI is a new framework for automated code generation that combines low-rank optimization and domain-specific tuning. It produces more accurate, relevant code at lower cost, operating securely on internal infrastructure, and outperforms baseline models for company-specific tasks.", "motivation": "Automated code generation via Foundation Models (FMs) is promising but faces issues with domain specificity, cost, and security, particularly regarding third-party APIs. There is a need for a solution that enables secure, efficient, and targeted code generation within company infrastructures.", "method": "The paper proposes CodeLSI, a framework that leverages low-rank optimization to cut down on computational resources and employs domain-specific instruction tuning to tailor code generation to organizational requirements. The methodology was validated by implementing CodeLSI on real-world JavaScript tasks using internal project datasets.", "result": "CodeLSI generated high-quality, context-aware code that exceeded baseline models in relevance, accuracy, and domain appropriateness. Low-rank optimization allowed training and fine-tuning with less computational cost, making it feasible on company infrastructure.", "conclusion": "Combining low-rank optimization with domain-specific tuning improves the practicality and performance of FMs in automated code generation. CodeLSI is a secure, cost-effective alternative to commercial API-based solutions, fostering faster and more targeted innovation."}}
{"id": "2509.14483", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.14483", "abs": "https://arxiv.org/abs/2509.14483", "authors": ["Thanh-Long Bui", "Hoa Khanh Dam", "Rashina Hoda"], "title": "An LLM-based multi-agent framework for agile effort estimation", "comment": "Submitted to ASE'25", "summary": "Effort estimation is a crucial activity in agile software development, where\nteams collaboratively review, discuss, and estimate the effort required to\ncomplete user stories in a product backlog. Current practices in agile effort\nestimation heavily rely on subjective assessments, leading to inaccuracies and\ninconsistencies in the estimates. While recent machine learning-based methods\nshow promising accuracy, they cannot explain or justify their estimates and\nlack the capability to interact with human team members. Our paper fills this\nsignificant gap by leveraging the powerful capabilities of Large Language\nModels (LLMs). We propose a novel LLM-based multi-agent framework for agile\nestimation that not only can produce estimates, but also can coordinate,\ncommunicate and discuss with human developers and other agents to reach a\nconsensus. Evaluation results on a real-life dataset show that our approach\noutperforms state-of-the-art techniques across all evaluation metrics in the\nmajority of the cases. Our human study with software development practitioners\nalso demonstrates an overwhelmingly positive experience in collaborating with\nour agents in agile effort estimation.", "AI": {"tldr": "This paper introduces an LLM-based multi-agent framework for collaborative, explainable, and accurate agile software effort estimation, which outperforms existing methods and is well-received by practitioners.", "motivation": "Current agile software effort estimation relies heavily on subjective human judgment, leading to inaccuracies and inconsistencies. Existing machine learning solutions improve accuracy, but lack transparency, explainability, and the ability to collaborate interactively with human team members.", "method": "The paper proposes a novel multi-agent framework based on Large Language Models (LLMs). This framework allows agents to generate effort estimates, and also enables them to coordinate, communicate, and discuss these estimates with human developers and with each other to reach consensus.", "result": "Experiments on real-world datasets show that this LLM-based approach outperforms current state-of-the-art techniques across all evaluation metrics in most cases. Additionally, a human study revealed that software development practitioners had a very positive collaborative experience with the agents for agile effort estimation.", "conclusion": "Leveraging LLMs in a multi-agent system provides accurate, explainable, and collaborative effort estimation in agile software development, offering clear improvements over traditional approaches and black-box ML models. Practitioners found the framework effective and beneficial in real-world scenarios."}}
{"id": "2509.14626", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.14626", "abs": "https://arxiv.org/abs/2509.14626", "authors": ["Feiran Qin", "M. M. Abid Naziri", "Hengyu Ai", "Saikat Dutta", "Marcelo d'Amorim"], "title": "Evaluating the Effectiveness of Coverage-Guided Fuzzing for Testing Deep Learning Library APIs", "comment": null, "summary": "Deep Learning (DL) libraries such as PyTorch provide the core components to\nbuild major AI-enabled applications. Finding bugs in these libraries is\nimportant and challenging. Prior approaches have tackled this by performing\neither API-level fuzzing or model-level fuzzing, but they do not use coverage\nguidance, which limits their effectiveness and efficiency. This raises an\nintriguing question: can coverage guided fuzzing (CGF), in particular\nframeworks like LibFuzzer, be effectively applied to DL libraries, and does it\noffer meaningful improvements in code coverage, bug detection, and scalability\ncompared to prior methods?\n  We present the first in-depth study to answer this question. A key challenge\nin applying CGF to DL libraries is the need to create a test harness for each\nAPI that can transform byte-level fuzzer inputs into valid API inputs. To\naddress this, we propose FlashFuzz, a technique that leverages Large Language\nModels (LLMs) to automatically synthesize API-level harnesses by combining\ntemplates, helper functions, and API documentation. FlashFuzz uses a feedback\ndriven strategy to iteratively synthesize and repair harnesses. With this\napproach, FlashFuzz synthesizes harnesses for 1,151 PyTorch and 662 TensorFlow\nAPIs. Compared to state-of-the-art fuzzing methods (ACETest, PathFinder, and\nTitanFuzz), FlashFuzz achieves up to 101.13 to 212.88 percent higher coverage\nand 1.0x to 5.4x higher validity rate, while also delivering 1x to 1182x\nspeedups in input generation. FlashFuzz has discovered 42 previously unknown\nbugs in PyTorch and TensorFlow, 8 of which are already fixed. Our study\nconfirms that CGF can be effectively applied to DL libraries and provides a\nstrong baseline for future testing approaches.", "AI": {"tldr": "The paper introduces FlashFuzz, a system that uses large language models to automatically create test harnesses for deep learning libraries, enabling effective coverage-guided fuzzing. FlashFuzz achieves significantly better coverage, validity, and speed than previous tools, and discovers numerous previously unknown bugs in PyTorch and TensorFlow, validating the effectiveness of CGF in this challenging domain.", "motivation": "Deep learning libraries like PyTorch are foundational to AI applications, but finding bugs in them is difficult. Previous fuzzing methods lack coverage guidance, which limits their ability to uncover bugs and achieve high code coverage. The authors are motivated to determine if coverage-guided fuzzing (CGF) can be practically and effectively applied to these libraries, which is challenging due to the need for specialized API-level test harnesses.", "method": "The authors introduce FlashFuzz, a system that utilizes Large Language Models (LLMs) to automatically synthesize API-level harnesses. FlashFuzz combines templates, helper functions, and API documentation to transform low-level fuzzer inputs into valid API calls, employing a feedback-driven approach to iteratively refine these harnesses. The technique is applied to a large set of APIs from PyTorch and TensorFlow.", "result": "FlashFuzz automatically created harnesses for 1,151 PyTorch and 662 TensorFlow APIs. It outperformed existing state-of-the-art fuzzers (ACETest, PathFinder, TitanFuzz) with up to 101.13-212.88% higher code coverage, 1.0x-5.4x better validity rate, and 1x-1182x faster input generation speeds. FlashFuzz discovered 42 new bugs in PyTorch and TensorFlow, 8 of which have already been fixed.", "conclusion": "Coverage-guided fuzzing, facilitated by automated harness synthesis with LLMs, is a highly effective approach for testing deep learning libraries. FlashFuzz sets a new performance baseline for DL library fuzzing and demonstrates practical scalability, efficiency, and higher bug-finding capability compared to previous methods."}}
{"id": "2509.14740", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.14740", "abs": "https://arxiv.org/abs/2509.14740", "authors": ["Andrei-Raoul Morariu", "Andreas Strandberg", "Bogdan Iancu", "Jerker Bjorkqvist"], "title": "Wireless Communication Performance Testing: From Laboratory Environment to Research Vessel", "comment": "5 pages, 4 figures, 2 tables", "summary": "This study investigates signal transmission within a shared spectrum,\nfocusing on measurements conducted both in laboratory and outdoor environments.\nThe objective was to demonstrate how laboratory objects obstructing the line of\nsight can attenuate the signal between a transmitter (Tx) and a receiver (Rx).\nAdditionally, we examined the impact of distance and placement in various\nlocations aboard an electric research boat on signal transmission efficiency.\nThese findings contribute to understanding whether the environmental factors\ninfluence wireless communication in dynamic and obstructed environments.", "AI": {"tldr": "Obstacles and placement aboard vehicles like boats can notably hinder wireless signal transmission. Measurements in lab and field settings confirm that environmental conditions must be considered for reliable shared spectrum communication.", "motivation": "The paper aims to better understand how environmental factors, including obstacles and dynamic placement, affect signal transmission in shared spectrum environments, particularly in practical settings like onboard an electric research boat.", "method": "The study uses empirical measurements of signal transmission in both laboratory and outdoor environments. It examines how objects that obstruct the line of sight between transmitter and receiver attenuate the signal. It also analyzes the effect of distance and placement on an electric research boat.", "result": "The study found that objects in the line of sight significantly attenuate signal strength. Distance and location aboard the boat further impact signal transmission efficiency, indicating that environmental factors do influence wireless communication performance in obstructed and dynamic settings.", "conclusion": "Environmental factors, such as obstacles and physical arrangement, play a crucial role in wireless signal transmission within shared spectrum environments. Effective wireless communication requires consideration of these factors, especially in dynamic contexts like a moving research boat."}}
{"id": "2509.14744", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.14744", "abs": "https://arxiv.org/abs/2509.14744", "authors": ["Worawalan Chatlatanagulchai", "Kundjanasith Thonglek", "Brittany Reid", "Yutaro Kashiwa", "Pattara Leelaprute", "Arnon Rungsawang", "Bundit Manaskasemsak", "Hajimu Iida"], "title": "On the Use of Agentic Coding Manifests: An Empirical Study of Claude Code", "comment": null, "summary": "Agentic coding tools receive goals written in natural language as input,\nbreak them down into specific tasks, and write/execute the actual code with\nminimal human intervention. Key to this process are agent manifests,\nconfiguration files (such as Claude.md) that provide agents with essential\nproject context, identity, and operational rules. However, the lack of\ncomprehensive and accessible documentation for creating these manifests\npresents a significant challenge for developers. We analyzed 253 Claude.md\nfiles from 242 repositories to identify structural patterns and common content.\nOur findings show that manifests typically have shallow hierarchies with one\nmain heading and several subsections, with content dominated by operational\ncommands, technical implementation notes, and high-level architecture.", "AI": {"tldr": "The paper analyzes 253 agent manifest files and finds they are generally simple in structure and focused on operational and technical information, highlighting a need for improved documentation.", "motivation": "There is a lack of comprehensive and accessible documentation for creating agent manifests (such as Claude.md), which are crucial for agentic coding tools to function effectively. This gap presents a significant challenge for developers using these tools.", "method": "The authors analyzed 253 Claude.md files from 242 repositories to identify structural patterns and common themes in how these agent manifests are constructed.", "result": "The study found that agent manifests generally have shallow hierarchies, usually featuring one main heading and several subsections. The content is mainly composed of operational commands, technical implementation notes, and high-level architecture details.", "conclusion": "Agent manifests for agentic coding tools tend to follow simple structures and cover a set of recurring content types, which points to opportunities for standardization and better documentation practices."}}
{"id": "2509.14745", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.14745", "abs": "https://arxiv.org/abs/2509.14745", "authors": ["Miku Watanabe", "Hao Li", "Yutaro Kashiwa", "Brittany Reid", "Hajimu Iida", "Ahmed E. Hassan"], "title": "On the Use of Agentic Coding: An Empirical Study of Pull Requests on GitHub", "comment": null, "summary": "Large language models (LLMs) are increasingly being integrated into software\ndevelopment processes. The ability to generate code and submit pull requests\nwith minimal human intervention, through the use of autonomous AI agents, is\npoised to become a standard practice. However, little is known about the\npractical usefulness of these pull requests and the extent to which their\ncontributions are accepted in real-world projects. In this paper, we\nempirically study 567 GitHub pull requests (PRs) generated using Claude Code,\nan agentic coding tool, across 157 diverse open-source projects. Our analysis\nreveals that developers tend to rely on agents for tasks such as refactoring,\ndocumentation, and testing. The results indicate that 83.8% of these\nagent-assisted PRs are eventually accepted and merged by project maintainers,\nwith 54.9% of the merged PRs are integrated without further modification. The\nremaining 45.1% require additional changes benefit from human revisions,\nespecially for bug fixes, documentation, and adherence to project-specific\nstandards. These findings suggest that while agent-assisted PRs are largely\nacceptable, they still benefit from human oversight and refinement.", "AI": {"tldr": "Most agent-generated pull requests are accepted and merged in open-source projects, but many still need human editing to fix bugs or meet project norms. Autonomous code generation shows promise, but human involvement is important for best results.", "motivation": "With the growing adoption of large language models (LLMs) in software development, especially for generating code and creating pull requests with minimal human input, there is limited understanding of their practical acceptance in real-world open-source projects.", "method": "An empirical study was conducted by analyzing 567 GitHub pull requests generated by Claude Code (an autonomous agentic coding tool) across 157 diverse open-source projects. The acceptance, modification, and utility of these PRs were systematically evaluated.", "result": "83.8% of agent-generated pull requests were accepted and merged, and 54.9% of those did not require further modification. The remaining 45.1% benefited from human revisions, particularly for bug fixes, documentation improvements, and compliance with project-specific standards.", "conclusion": "Agent-assisted pull requests are widely accepted in real open-source projects, but human oversight and edits remain crucial for higher quality, especially for tasks beyond simple refactoring and documentation."}}
{"id": "2509.14829", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.14829", "abs": "https://arxiv.org/abs/2509.14829", "authors": ["Shuo Jin", "Songqiang Chen", "Xiaoyuan Xie", "Shing-Chi Cheung"], "title": "RulER: Automated Rule-Based Semantic Error Localization and Repair for Code Translation", "comment": "Due to the limitation \"The abstract field cannot be longer than 1,920\n  characters\", the abstract here is shorter than that in the PDF file", "summary": "Automated code translation aims to convert programs between different\nprogramming languages while maintaining their functionality. Due to the\nimperfections of code translation models, the generated translations may\ncontain errors that compromise their reliability. Existing automated debugging\nmethods for code translation rely on code alignments and repair patch templates\nto locate and fix erroneous translations. However, existing methods lack\nreliable references to construct code alignments and design repair patch\ntemplates, which significantly impacts their localization accuracy and repair\neffectiveness. To address these limitations, we reintroduce code translation\nrules and propose a rule-based debugging method for code translation, called\nRulER. RulER automatically derives code translation rules from correct\ntranslations generated by LLMs, enabling the efficient collection of diverse\ntranslation rules. In addition, RulER dynamically combines the existing rules\non expandable nodes like expressions and tokens to further adaptively align\nmore statements. These rules capture clear and detailed structural\ncorrespondences between source and target programming languages. Therefore,\nthey can serve as reliable and reusable references for code alignment and\nrepair template design, enabling RulER to locate and fix translation errors\neffectively. Our evaluation of RulER on Java-to-C++ and Python-to-C++\ntranslations produced by four code translation models demonstrates that RulER\noutperforms state-of-the-art methods, BatFix and TransMap. Our experimental\nresults show that RulER outperformed the best baseline by 20% and 272% in terms\nof error localization rates and repair success rates, respectively. RulER\nexhibits superior repair performance compared to directly prompting LLMs for\npatch generation, demonstrating a promising methodology for extracting and\nleveraging coding knowledge from LLMs.", "AI": {"tldr": "RulER is a rule-based debugging tool for automated code translation, addressing the lack of robust error correction in existing methods. By extracting and applying translation rules from correct LLM outputs, RulER greatly improves error localization and repair success compared to current benchmarks, offering a more effective way to utilize LLM coding knowledge.", "motivation": "Automated code translation often produces erroneous outputs due to imperfect models, and current debugging approaches lack robust references for code alignment and repair template design, reducing their effectiveness.", "method": "The authors introduce RulER, a rule-based debugging method that automatically derives code translation rules from correct LLM-generated translations. RulER dynamically combines existing rules to align and repair more code statements, using these rules as reliable references for error localization and repair.", "result": "RulER was evaluated on Java-to-C++ and Python-to-C++ translations from four code translation models, significantly outperforming BatFix and TransMap with 20% higher error localization and 272% higher repair success rates. It also surpasses direct LLM prompting for patch generation.", "conclusion": "RulER leverages translation rules extracted from LLM outputs to enhance debugging of code translations, providing a reliable and reusable reference for effective error localization and repair. It demonstrates substantial improvements over existing methods and highlights a new approach to extracting coding knowledge from LLMs."}}
{"id": "2509.14856", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.14856", "abs": "https://arxiv.org/abs/2509.14856", "authors": ["Hanyang Guo", "Xunjin Zheng", "Zihan Liao", "Hang Yu", "Peng DI", "Ziyin Zhang", "Hong-Ning Dai"], "title": "CodeFuse-CR-Bench: A Comprehensiveness-aware Benchmark for End-to-End Code Review Evaluation in Python Projects", "comment": null, "summary": "Automated code review (CR) is a key application for Large Language Models\n(LLMs), but progress is hampered by a \"reality gap\": existing benchmarks\nevaluate models on isolated sub-tasks using simplified, context-poor data. This\nfails to reflect the holistic context-rich nature of real-world CR. To bridge\nthis gap, we introduce CodeFuse-CR-Bench, the first comprehensiveness-aware\nbenchmark for repository-level CR evaluation. CodeFuse-CR-Bench comprises 601\nhigh-quality instances from 70 Python projects covering nine Pull-Request (PR)\nproblem domains, where each instance provides rich, multi-faceted context\nincluding the associated issue, PR details, and repository state, enabling\nend-to-end evaluation. Beyond superficial metrics, we also propose a novel\nevaluation framework that combines rule-based checks for location and syntax\nwith model-based judgments of review quality. We present the first large-scale\nassessment of state-of-the-art LLMs on this comprehensive CR task. Our results\nestablish crucial baselines and reveal that (1) no single LLM dominates all\naspects of CR; (2) Gemini 2.5 Pro achieves the highest comprehensive\nperformance; and (3) different LLMs exhibit varying robustness to redundant\ncontext. These findings highlight the necessity of holistic, multi-dimensional\nevaluation and provide actionable insights for advancing truly intelligent yet\npractical CR assistants.", "AI": {"tldr": "Current benchmarks for automated code review are inadequate due to lack of real-world complexity and context. CodeFuse-CR-Bench fills this gap, enabling realistic and comprehensive evaluation of LLMs. Tests reveal no LLM excels universally; Gemini 2.5 Pro performs best overall. Diverse robustness among LLMs highlights the need for richer evaluation methods and informs the development of smarter code review assistants.", "motivation": "Existing automated code review benchmarks use simplified, context-poor data and evaluate only isolated sub-tasks. This doesn't reflect the complex, context-rich nature of real-world code review, thus limiting LLM progress.", "method": "The authors introduced CodeFuse-CR-Bench, a new comprehensiveness-aware benchmark for evaluating repository-level automated code review. The benchmark includes 601 curated instances from 70 Python projects, spanning nine PR problem domains and providing rich, multi-faceted context per instance. They proposed a novel evaluation framework that blends rule-based and model-based review quality assessments.", "result": "A large-scale evaluation of advanced LLMs using this benchmark shows no single LLM is best at all aspects of code review. Gemini 2.5 Pro achieved the highest overall performance, and different LLMs vary in robustness to redundant context.", "conclusion": "Holistic, multi-dimensional evaluation is essential for advancing intelligent and practical code review tools. The benchmark and findings offer actionable insights for future development of LLM-based code review systems."}}
{"id": "2509.14899", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.14899", "abs": "https://arxiv.org/abs/2509.14899", "authors": ["Amine Barrak", "Yosr Fourati", "Michael Olchawa", "Emna Ksontini", "Khalil Zoghlami"], "title": "CARGO: A Framework for Confidence-Aware Routing of Large Language Models", "comment": null, "summary": "As large language models (LLMs) proliferate in scale, specialization, and\nlatency profiles, the challenge of routing user prompts to the most appropriate\nmodel has become increasingly critical for balancing performance and cost. We\nintroduce CARGO (Category-Aware Routing with Gap-based Optimization), a\nlightweight, confidence-aware framework for dynamic LLM selection. CARGO\nemploys a single embedding-based regressor trained on LLM-judged pairwise\ncomparisons to predict model performance, with an optional binary classifier\ninvoked when predictions are uncertain. This two-stage design enables precise,\ncost-aware routing without the need for human-annotated supervision. To capture\ndomain-specific behavior, CARGO also supports category-specific regressors\ntrained across five task groups: mathematics, coding, reasoning, summarization,\nand creative writing. Evaluated on four competitive LLMs (GPT-4o, Claude 3.5\nSonnet, DeepSeek V3, and Perplexity Sonar), CARGO achieves a top-1 routing\naccuracy of 76.4% and win rates ranging from 72% to 89% against individual\nexperts. These results demonstrate that confidence-guided, lightweight routing\ncan achieve expert-level performance with minimal overhead, offering a\npractical solution for real-world, multi-model LLM deployments.", "AI": {"tldr": "CARGO is a lightweight, confidence-guided routing framework for choosing the best LLM for a given prompt. It achieves high accuracy and expert-level routing with minimal overhead, making it suitable for real-world, multi-model LLM use.", "motivation": "With the increase in the number and variety of large language models (LLMs), it has become important to efficiently route user prompts to the best-suited model, balancing the trade-offs between performance and cost. Existing routing systems often require significant supervision or are not flexible enough for domain-specific needs.", "method": "The authors propose CARGO (Category-Aware Routing with Gap-based Optimization), a lightweight, confidence-aware two-stage framework. It uses an embedding-based regressor trained on pairwise LLM output comparisons to predict which model will perform best for a given prompt. If the regressor's prediction is uncertain, it invokes a binary classifier. CARGO also provides category-specific regressors trained on task groups such as mathematics, coding, reasoning, summarization, and creative writing.", "result": "CARGO was evaluated on four leading LLMs: GPT-4o, Claude 3.5 Sonnet, DeepSeek V3, and Perplexity Sonar. It achieved a top-1 routing accuracy of 76.4% and win rates between 72% and 89% against individual expert models.", "conclusion": "The study demonstrates that CARGO's confidence-guided, lightweight routing system achieves expert-level performance in model selection for user prompts with minimal computational overhead. This provides a practical and efficient solution for deploying multiple LLMs in real-world applications."}}
{"id": "2509.14931", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.14931", "abs": "https://arxiv.org/abs/2509.14931", "authors": ["Stefano Fossati", "Damian Andrew Tamburri", "Massimiliano Di Penta", "Marco Tonnarelli"], "title": "\"Let it be Chaos in the Plumbing!\" Usage and Efficacy of Chaos Engineering in DevOps Pipelines", "comment": "To be published in the Proceedings of International Conference on\n  Software Maintenance and Evolution 2025", "summary": "Chaos Engineering (CE) has emerged as a proactive method to improve the\nresilience of modern distributed systems, particularly within DevOps\nenvironments. Originally pioneered by Netflix, CE simulates real-world failures\nto expose weaknesses before they impact production. In this paper, we present a\nsystematic gray literature review that investigates how industry practitioners\nhave adopted and adapted CE principles over recent years. Analyzing 50 sources\npublished between 2019 and early 2024, we developed a comprehensive\nclassification framework that extends the foundational CE principles into ten\ndistinct concepts. Our study reveals that while the core tenets of CE remain\ninfluential, practitioners increasingly emphasize controlled experimentation,\nautomation, and risk mitigation strategies to align with the demands of agile\nand continuously evolving DevOps pipelines. Our results enhance the\nunderstanding of how CE is intended and implemented in practice, and offer\nguidance for future research and industrial applications aimed at improving\nsystem robustness in dynamic production environments.", "AI": {"tldr": "Chaos Engineering remains core to system resilience, but industry practice is evolving towards more automation, risk-aware processes, and controlled experiments. This paper summarizes recent trends and provides a new framework for future CE use.", "motivation": "Chaos Engineering (CE) was created to proactively improve the resilience of distributed systems by simulating failures, especially beneficial within the DevOps context. The paper aims to understand how industry practitioners have recently adopted and adapted CE to address evolving production challenges.", "method": "The authors conducted a systematic gray literature review, analyzing 50 sources published between 2019 and early 2024. They developed a classification framework extending the foundational concepts of CE into ten defined categories.", "result": "The review found that while CE's foundational principles are still key, practitioners now focus more on controlled experimentation, automation, and risk mitigation. This reflects a shift to accommodate agile and rapidly changing DevOps environments.", "conclusion": "The study advances understanding of both the theory and practice of CE, offering a new conceptual framework and practical insights for applying CE to enhance system robustness. It provides clear guidance for future research and industrial implementations of CE in dynamic production settings."}}
{"id": "2509.15195", "categories": ["cs.SE", "cs.AI", "cs.CR", "D.4.6; I.2.2; D.2.5"], "pdf": "https://arxiv.org/pdf/2509.15195", "abs": "https://arxiv.org/abs/2509.15195", "authors": ["Max Bazalii", "Marius Fleischer"], "title": "Orion: Fuzzing Workflow Automation", "comment": "11 pages, 3 figures, 3 tables", "summary": "Fuzz testing is one of the most effective techniques for finding software\nvulnerabilities. While modern fuzzers can generate inputs and monitor\nexecutions automatically, the overall workflow, from analyzing a codebase, to\nconfiguring harnesses, to triaging results, still requires substantial manual\neffort. Prior attempts focused on single stages such as harness synthesis or\ninput minimization, leaving researchers to manually connect the pieces into a\ncomplete fuzzing campaign.\n  We introduce Orion, a framework that automates the the manual bottlenecks of\nfuzzing by integrating LLM reasoning with traditional tools, allowing campaigns\nto scale to settings where human effort alone was impractical. Orion uses LLMs\nfor code reasoning and semantic guidance, while relying on deterministic tools\nfor verification, iterative refinement, and tasks that require precision.\nAcross our benchmark suite, Orion reduces human effort by 46-204x depending on\nthe workflow stage, and we demonstrate its effectiveness through the discovery\nof two previously unknown vulnerabilities in the widely used open-source clib\nlibrary.", "AI": {"tldr": "Orion automates fuzz testing using LLMs and traditional tools, greatly reducing human effort and finding new vulnerabilities in real software.", "motivation": "Fuzz testing processes are still highly manual despite automation in input generation and monitoring; prior solutions only address individual components, not the whole workflow. Orion is motivated by the need to automate the entire fuzzing process to scale vulnerability discovery beyond human-centric limits.", "method": "Orion integrates LLM-based reasoning for semantic tasks (like code understanding) with deterministic tools for tasks needing high precision (such as verification and refinement), automating the main manual fuzzing bottlenecks. Its effectiveness is measured both by reduction in human effort and by discovery of novel vulnerabilities.", "result": "This paper introduces Orion, a framework that automates much of the manual work involved in fuzzing, such as code analysis, harness configuration, and result triage, by integrating large language models (LLMs) with traditional analysis tools. Orion employs LLMs for semantic understanding and guidance, and deterministic tools for precise or iterative tasks. The results show that Orion reduces the required human effort by 46-204 times, depending on the workflow stage, and uncovers two new vulnerabilities in the clib library.", "conclusion": "Orion enables highly automated fuzzing campaigns, making them practical even for large or complex projects, as it minimizes human involvement and is effective in discovering real-world software vulnerabilities."}}
