{"id": "2509.13436", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13436", "abs": "https://arxiv.org/abs/2509.13436", "authors": ["Evan Eisinger", "Michael A. Heroux"], "title": "Is Research Software Science a Metascience?", "comment": "5 pages", "summary": "As research increasingly relies on computational methods, the reliability of\nscientific results depends on the quality, reproducibility, and transparency of\nresearch software. Ensuring these qualities is critical for scientific\nintegrity and discovery. This paper asks whether Research Software Science\n(RSS)--the empirical study of how research software is developed and\nused--should be considered a form of metascience, the science of science.\nClassification matters because it could affect recognition, funding, and\nintegration of RSS into research improvement. We define metascience and RSS,\ncompare their principles and objectives, and examine their overlaps. Arguments\nfor classification highlight shared commitments to reproducibility,\ntransparency, and empirical study of research processes. Arguments against\nportraying RSS as a specialized domain focused on a tool rather than the\nbroader scientific enterprise. Our analysis finds RSS advances core goals of\nmetascience, especially in computational reproducibility, and bridges\ntechnical, social, and cognitive aspects of research. Its classification\ndepends on whether one adopts a broad definition of metascience--any empirical\neffort to improve science--or a narrow one focused on systemic and\nepistemological structures. We argue RSS is best understood as a distinct\ninterdisciplinary domain that aligns with, and in some definitions fits within,\nmetascience. Recognizing it as such can strengthen its role in improving\nreliability, justify funding, and elevate software development in research\ninstitutions. Regardless of classification, applying scientific rigor to\nresearch software ensures the tools of discovery meet the standards of the\ndiscoveries themselves.", "AI": {"tldr": "Examining whether Research Software Science (RSS) is a form of metascience, the paper finds RSS advances metascience goals and fits within broader definitions. Recognizing RSS as metascience could enhance its impact in research, but scientific rigor in software remains vital regardless of classification.", "motivation": "As research increasingly uses computational methods, the reliability of results depends on the quality, reproducibility, and transparency of research software. The paper aims to analyze if Research Software Science (RSS) should be classified as metascience, which could impact its recognition and funding.", "method": "The paper defines and compares metascience and RSS, examining their principles, objectives, and areas of overlap. It reviews arguments for and against considering RSS as metascience based on shared values and focus.", "result": "RSS advances the goals of metascience, particularly in computational reproducibility, and bridges technical and social aspects. Its classification depends on whether metascience is defined broadly or narrowly. The paper concludes that RSS is best understood as a distinct but aligned interdisciplinary domain.", "conclusion": "RSS fits within some definitions of metascience, and recognizing it as such could strengthen research integrity, funding, and the role of software development. Applying scientific rigor to research software is crucial regardless of its classification."}}
{"id": "2509.13471", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.13471", "abs": "https://arxiv.org/abs/2509.13471", "authors": ["Sina Gogani-Khiabani", "Ashutosh Trivedi", "Diptikalyan Saha", "Saeid Tizpaz-Niari"], "title": "An LLM Agentic Approach for Legal-Critical Software: A Case Study for Tax Prep Software", "comment": "To appear at ICSE 26. 12 pages", "summary": "Large language models (LLMs) show promise for translating natural-language\nstatutes into executable logic, but reliability in legally critical settings\nremains challenging due to ambiguity and hallucinations. We present an agentic\napproach for developing legal-critical software, using U.S. federal tax\npreparation as a case study. The key challenge is test-case generation under\nthe oracle problem, where correct outputs require interpreting law. Building on\nmetamorphic testing, we introduce higher-order metamorphic relations that\ncompare system outputs across structured shifts among similar individuals.\nBecause authoring such relations is tedious and error-prone, we use an\nLLM-driven, role-based framework to automate test generation and code\nsynthesis. We implement a multi-agent system that translates tax code into\nexecutable software and incorporates a metamorphic-testing agent that searches\nfor counterexamples. In experiments, our framework using a smaller model\n(GPT-4o-mini) achieves a worst-case pass rate of 45%, outperforming frontier\nmodels (GPT-4o and Claude 3.5, 9-15%) on complex tax-code tasks. These results\nsupport agentic LLM methodologies as a path to robust, trustworthy\nlegal-critical software from natural-language specifications.", "AI": {"tldr": "This paper introduces a multi-agent, LLM-driven framework that uses advanced metamorphic testing to translate US tax codes into executable software, achieving higher robustness and performance on difficult legal tasks than more powerful models, suggesting a promising approach for creating reliable legal-critical applications.", "motivation": "Large language models hold promise for translating legal statutes into executable code, but their reliability in critical legal applications is hindered by ambiguity and hallucination issues.", "method": "The authors propose an agentic, multi-agent system that translates US tax code into executable software. Their approach leverages higher-order metamorphic relations for test generation under the oracle problem, and utilizes an LLM-driven, role-based framework to automate both test creation and code synthesis.", "result": "Their framework, using a smaller LLM (GPT-4o-mini), achieved a worst-case pass rate of 45% on complex tax-code tasks, substantially outperforming larger frontier models (which scored 9-15%).", "conclusion": "Agentic LLM-based methodologies, combined with automated metamorphic testing, can produce more robust and trustworthy legal-critical software from natural language specifications than direct reliance on larger frontier models."}}
{"id": "2509.13487", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.13487", "abs": "https://arxiv.org/abs/2509.13487", "authors": ["Abubakari Alidu", "Michele Ciavotta", "Flavio DePaoli"], "title": "Prompt2DAG: A Modular Methodology for LLM-Based Data Enrichment Pipeline Generation", "comment": null, "summary": "Developing reliable data enrichment pipelines demands significant engineering\nexpertise. We present Prompt2DAG, a methodology that transforms natural\nlanguage descriptions into executable Apache Airflow DAGs. We evaluate four\ngeneration approaches -- Direct, LLM-only, Hybrid, and Template-based -- across\n260 experiments using thirteen LLMs and five case studies to identify optimal\nstrategies for production-grade automation. Performance is measured using a\npenalized scoring framework that combines reliability with code quality (SAT),\nstructural integrity (DST), and executability (PCT). The Hybrid approach\nemerges as the optimal generative method, achieving a 78.5% success rate with\nrobust quality scores (SAT: 6.79, DST: 7.67, PCT: 7.76). This significantly\noutperforms the LLM-only (66.2% success) and Direct (29.2% success) methods.\nOur findings show that reliability, not intrinsic code quality, is the primary\ndifferentiator. Cost-effectiveness analysis reveals the Hybrid method is over\ntwice as efficient as Direct prompting per successful DAG. We conclude that a\nstructured, hybrid approach is essential for balancing flexibility and\nreliability in automated workflow generation, offering a viable path to\ndemocratize data pipeline development.", "AI": {"tldr": "Prompt2DAG translates natural language into data workflows. Among tested methods, the Hybrid approach delivers the best reliability and efficiency, supporting accessible and automated data pipeline creation.", "motivation": "Building reliable data enrichment pipelines is challenging, requiring substantial engineering knowledge. The paper aims to automate this process by turning natural language descriptions into executable workflows.", "method": "The authors propose Prompt2DAG, which converts natural language into Apache Airflow DAGs. They test four approaches (Direct, LLM-only, Hybrid, Template-based) using thirteen large language models and extensive experiments (260 runs, five case studies). Performance is scored on reliability, quality, structural integrity, and executability.", "result": "The Hybrid approach yields the highest success rate (78.5%), outperforming LLM-only (66.2%) and Direct (29.2%) methods, with superior quality and efficiency.", "conclusion": "Structured, hybrid methods best balance automation flexibility and reliability, making data pipeline development more accessible and cost-effective."}}
{"id": "2509.13535", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13535", "abs": "https://arxiv.org/abs/2509.13535", "authors": ["S M Farah Al Fahim", "Md Nakhla Rafi", "Zeyang Ma", "Dong Jae Kim", "Tse-Hsun", "Chen"], "title": "Crash Report Enhancement with Large Language Models: An Empirical Study", "comment": null, "summary": "Crash reports are central to software maintenance, yet many lack the\ndiagnostic detail developers need to debug efficiently. We examine whether\nlarge language models can enhance crash reports by adding fault locations,\nroot-cause explanations, and repair suggestions. We study two enhancement\nstrategies: Direct-LLM, a single-shot approach that uses stack-trace context,\nand Agentic-LLM, an iterative approach that explores the repository for\nadditional evidence. On a dataset of 492 real-world crash reports, LLM-enhanced\nreports improve Top-1 problem-localization accuracy from 10.6% (original\nreports) to 40.2-43.1%, and produce suggested fixes that closely resemble\ndeveloper patches (CodeBLEU around 56-57%). Both our manual evaluations and\nLLM-as-a-judge assessment show that Agentic-LLM delivers stronger root-cause\nexplanations and more actionable repair guidance. A user study with 16\nparticipants further confirms that enhanced reports make crashes easier to\nunderstand and resolve, with the largest improvement in repair guidance. These\nresults indicate that supplying LLMs with stack traces and repository code\nyields enhanced crash reports that are substantially more useful for debugging.", "AI": {"tldr": "Using LLMs to enhance crash reports leads to major improvements in fault localization, explanation, and fix suggestions; the iterative Agentic-LLM strategy is especially effective, and user studies confirm the increased usefulness for debugging.", "motivation": "Crash reports are vital for software maintenance, but typically lack sufficient diagnostic detail for efficient debugging. The authors seek to leverage LLMs to address this gap and provide developers with deeper, more actionable insights from crash reports.", "method": "The paper studies two LLM-based enhancement strategies for crash reports: Direct-LLM, which uses stack-trace context in a single shot, and Agentic-LLM, which iteratively explores the repository for evidence. Evaluations use a dataset of 492 real-world crash reports, with both automatic metrics and user studies.", "result": "LLM-enhanced reports improve problem-localization accuracy from 10.6% (original) to 40.2\u201343.1%, and suggested fixes closely resemble developer patches (CodeBLEU ~56\u201357%). The Agentic-LLM strategy offers superior root-cause and repair guidance. User studies confirm enhanced reports help users understand and resolve crashes more effectively, especially with improved repair guidance.", "conclusion": "Supplying large language models (LLMs) with stack traces and repository code produces crash reports that significantly improve debugging utility. Enhanced reports deliver better fault localization, root-cause explanations, and actionable repair suggestions."}}
{"id": "2509.13650", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.13650", "abs": "https://arxiv.org/abs/2509.13650", "authors": ["Amena Amro", "Manar H. Alalfi"], "title": "GitHub's Copilot Code Review: Can AI Spot Security Flaws Before You Commit?", "comment": null, "summary": "As software development practices increasingly adopt AI-powered tools,\nensuring that such tools can support secure coding has become critical. This\nstudy evaluates the effectiveness of GitHub Copilot's recently introduced code\nreview feature in detecting security vulnerabilities. Using a curated set of\nlabeled vulnerable code samples drawn from diverse open-source projects\nspanning multiple programming languages and application domains, we\nsystematically assessed Copilot's ability to identify and provide feedback on\ncommon security flaws. Contrary to expectations, our results reveal that\nCopilot's code review frequently fails to detect critical vulnerabilities such\nas SQL injection, cross-site scripting (XSS), and insecure deserialization.\nInstead, its feedback primarily addresses low-severity issues, such as coding\nstyle and typographical errors. These findings expose a significant gap between\nthe perceived capabilities of AI-assisted code review and its actual\neffectiveness in supporting secure development practices. Our results highlight\nthe continued necessity of dedicated security tools and manual code audits to\nensure robust software security.", "AI": {"tldr": "GitHub Copilot's new code review feature often misses serious security issues and mostly flags minor coding errors. Developers still need proper security tools and manual reviews for real protection.", "motivation": "With the widespread adoption of AI-powered tools in software development, there is a growing need to ensure these tools can effectively support secure coding practices. The newly introduced code review feature in GitHub Copilot claims to automate security checks, raising expectations about its capabilities for vulnerability detection.", "method": "The study used a curated and labeled set of vulnerable code samples from various open-source projects, covering different programming languages and application domains. The effectiveness of Copilot's code review feature in detecting and providing feedback on common security vulnerabilities was systematically assessed.", "result": "Copilot's code review feature failed to reliably detect critical security vulnerabilities such as SQL injection, cross-site scripting (XSS), and insecure deserialization. Its feedback was mostly limited to low-severity issues like coding style and typographical errors.", "conclusion": "The perceived capabilities of AI-assisted code review tools like Copilot do not match their actual performance in supporting secure coding practices. Dedicated security tools and manual code audits remain necessary to ensure robust software security."}}
{"id": "2509.13429", "categories": ["cs.PL", "cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13429", "abs": "https://arxiv.org/abs/2509.13429", "authors": ["Anthony Arnold", "Mark Marron"], "title": "Catalpa: GC for a Low-Variance Software Stack", "comment": null, "summary": "The performance of an application/runtime is usually conceptualized as a\ncontinuous function where, the lower the amount of memory/time used on a given\nworkload, then the better the compiler/runtime is. However, in practice, good\nperformance of an application is viewed as more of a binary function - either\nthe application responds in under, say 100 ms, and is fast enough for a user to\nbarely notice, or it takes a noticeable amount of time, leaving the user\nwaiting and potentially abandoning the task. Thus, performance really means how\noften the application is fast enough to be usable, leading industrial\ndevelopers to focus on the 95th and 99th percentile tail-latencies as heavily,\nor moreso, than average response time. Our vision is to create a software stack\nthat actively supports these needs via programming language and runtime system\ndesign. In this paper we present a novel garbage-collector design, the Catalpa\ncollector, for the Bosque programming language and runtime. This allocator is\ndesigned to minimize latency and variability while maintaining high-throughput\nand incurring small memory overheads. To achieve these goals we leverage\nvarious features of the Bosque language, including immutability and\nreference-cycle freedom, to construct a collector that has bounded collection\npauses, incurs fixed-constant memory overheads, and does not require any\nbarriers or synchronization with application code.", "AI": {"tldr": "The paper proposes Catalpa, a novel garbage collector for Bosque, which uses language features to guarantee low, predictable response times and minimize performance variability, focusing on real-world usability (user-noticeable delays) rather than just average-case performance.", "motivation": "Traditional performance metrics focus on continuous measures like average memory or time use, but real-world application usability is often determined by binary thresholds of responsiveness (e.g., responding in under 100 ms). Industrial developers care more about tail-latencies (95th and 99th percentile) than simple averages.", "method": "The paper introduces the Catalpa garbage collector for the Bosque programming language. The collector exploits language features such as immutability and reference-cycle freedom to minimize latency and variability, while maintaining high throughput and low memory overhead. It specifically aims to achieve bounded collection pauses, constant memory overheads, and avoids synchronization/barrier requirements in application code.", "result": "The Catalpa collector provides predictable, low-latency garbage collection for Bosque applications, keeping collection pauses within fixed bounds. It achieves high throughput and does not significantly increase memory use, all without the need for additional synchronization between the application and collector.", "conclusion": "Through tailored garbage collection design leveraging language-specific guarantees, it's possible to significantly reduce latency and variability in application performance, making programs consistently responsive and usable."}}
{"id": "2509.13656", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13656", "abs": "https://arxiv.org/abs/2509.13656", "authors": ["Yingao Elaine Yao", "Vedant Nimje", "Varun Viswanath", "Saikat Dutta"], "title": "A Regression Testing Framework with Automated Assertion Generation for Machine Learning Notebooks", "comment": "22 pages, 2 figures, 6 tables", "summary": "Notebooks have become the de-facto choice for data scientists and machine\nlearning engineers for prototyping and experimenting with machine learning (ML)\npipelines. Notebooks provide an interactive interface for code, data, and\nvisualization. However, notebooks provide very limited support for testing.\nThus, during continuous development, many subtle bugs that do not lead to\ncrashes often go unnoticed and cause silent errors that manifest as performance\nregressions.\n  To address this, we introduce NBTest - the first regression testing framework\nthat allows developers to write cell-level assertions in notebooks and run such\nnotebooks in pytest or in continuous integration (CI) pipelines. NBTest offers\na library of assertion APIs, and a JupyterLab plugin that enables executing\nassertions. We also develop the first automated approach for generating\ncell-level assertions for key components in ML notebooks, such as data\nprocessing, model building, and model evaluation. NBTest aims to improve the\nreliability and maintainability of ML notebooks without adding developer\nburden.\n  We evaluate NBTest on 592 Kaggle notebooks. Overall, NBTest generates 21163\nassertions (35.75 on average per notebook). The generated assertions obtain a\nmutation score of 0.57 in killing ML-specific mutations. NBTest can catch\nregression bugs in previous versions of the Kaggle notebooks using assertions\ngenerated for the latest versions. Because ML pipelines involve non\ndeterministic computations, the assertions can be flaky. Hence, we also show\nhow NBTest leverages statistical techniques to minimize flakiness while\nretaining high fault-detection effectiveness. NBTest has been adopted in the CI\nof a popular ML library. Further, we perform a user study with 17 participants\nthat shows that notebook users find NBTest intuitive (Rating 4.3/5) and useful\nin writing assertions and testing notebooks (Rating 4.24/5).", "AI": {"tldr": "NBTest introduces cell-level regression testing and automated assertions for ML notebooks, integrates seamlessly into CI and development workflows, detects bugs and reduces flakiness, and is intuitive and useful according to user studies.", "motivation": "Notebooks are widely used for ML development, but lack robust support for testing, resulting in unnoticed subtle bugs and performance regressions.", "method": "Introduces NBTest, a regression testing framework for ML notebooks supporting cell-level assertions, integration with pytest and CI, offering assertion APIs, a JupyterLab plugin, and automated cell-level assertion generation for data processing, model building, and evaluation.", "result": "NBTest generated 21,163 assertions across 592 Kaggle notebooks, achieving a mutation score of 0.57. It detected regression bugs and minimized flaky assertions via statistical techniques. NBTest has been adopted in a popular ML library's CI, and user studies report high intuitiveness (4.3/5) and usefulness (4.24/5).", "conclusion": "NBTest improves the reliability and maintainability of ML notebooks by enabling effective, developer-friendly regression testing and assertion generation, with demonstrated practicality and adoption."}}
{"id": "2509.13489", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2509.13489", "abs": "https://arxiv.org/abs/2509.13489", "authors": ["Chester J. F. Gould", "William J. Bowman"], "title": "Extended Abstract: Towards a Performance Comparison of Syntax and Type-Directed NbE", "comment": "Submitted to TyDe 2025", "summary": "A key part of any dependent type-checker is the method for checking whether\ntwo types are equal. A common claim is that syntax-directed equality is more\nperformant, although type-directed equality is more expressive. However, this\nclaim is difficult to make precise, since implementations choose only one or\nthe other approach, making a direct comparison impossible. We present some\nwork-in-progress developing a realistic platform for direct, apples-to-apples,\ncomparison of the two approaches, quantifying how much slower type-directed\nequality checking is, and analyzing why and how it can be improved.", "AI": {"tldr": "This paper sets up a real-world experimental platform to directly compare syntax-directed and type-directed type equality methods in dependent type-checkers, quantifies their relative performance, and investigates opportunities to optimize the slower, more expressive type-directed approach.", "motivation": "The motivation is to rigorously compare syntax-directed and type-directed equality checking in dependent type-checkers, addressing the commonly heard, but unsubstantiated, claims about their performance and expressiveness.", "method": "The authors are developing a realistic platform that enables a direct, apples-to-apples comparison of both approaches. This experimental setup aims to quantify performance differences and analyze their causes.", "result": "Preliminary results indicate that type-directed equality checking is slower, and the research provides insights into the factors contributing to this performance gap and strategies for improvement.", "conclusion": "Having a direct comparative platform illuminates the actual trade-offs between syntax-directed and type-directed equality approaches, making previously anecdotal claims more precise and actionable."}}
{"id": "2509.13680", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.13680", "abs": "https://arxiv.org/abs/2509.13680", "authors": ["Wei Ma", "Yixiao Yang", "Jingquan Ge", "Xiaofei Xie", "Lingxiao Jiang"], "title": "Prompt Stability in Code LLMs: Measuring Sensitivity across Emotion- and Personality-Driven Variations", "comment": null, "summary": "Code generation models are widely used in software development, yet their\nsensitivity to prompt phrasing remains under-examined. Identical requirements\nexpressed with different emotions or communication styles can yield divergent\noutputs, while most benchmarks emphasize only peak performance. We present\nPromptSE (Prompt Sensitivity Evaluation), a framework that creates semantically\nequivalent prompt variants with emotion and personality templates, and that\nevaluates stability using probability aware continuous scoring or using binary\npass rates when logits are unavailable. The results are aggregated into a\nproposed area under curve metric (AUC-E) for cross model comparison. Across 14\nmodels from three families (Llama, Qwen, and DeepSeek), our study shows that\nperformance and stability behave as largely decoupled optimization objectives,\nand it reveals architectural and scale related patterns that challenge common\nassumptions about model robustness. The framework supports rapid screening for\nclosed-source models as well as detailed stability analysis in research\nsettings. PromptSE enables practitioners to quantify performance stability\ntrade offs for deployment and model selection, positioning prompt stability as\na complementary evaluation dimension alongside performance and fairness, and\ncontributing to more trustworthy AI-assisted software development tools.", "AI": {"tldr": "PromptSE is a new framework to evaluate how changes in prompt phrasing affect code generation models, offering metrics for stability across models. The study finds that prompt stability and performance do not always go hand in hand, advocating for stability as another critical factor in choosing and deploying AI code tools.", "motivation": "Code generation models often produce varying outputs depending on how prompts are phrased, especially when prompts differ in emotion or communication style. This sensitivity is not thoroughly examined in existing benchmarks, which mainly focus on peak performance.", "method": "The authors present PromptSE, a framework for evaluating prompt sensitivity. It creates semantically equivalent prompt variants using emotion and personality templates, and utilizes probability-aware continuous scoring or binary pass rates to measure stability. Results are summarized using a novel AUC-E metric for cross-model comparison.", "result": "The study, which tested 14 models from Llama, Qwen, and DeepSeek families, found that stability and performance are mostly independent objectives. It also uncovered new insights regarding model robustness related to architecture and scale, opposing some common beliefs.", "conclusion": "PromptSE enables practitioners to systematically measure and balance performance stability in code generation models. It supports screening of closed-source models and allows stability analysis, thus establishing prompt stability as a key evaluation metric alongside performance and fairness, and contributing to the reliability of AI software tools."}}
{"id": "2509.13982", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2509.13982", "abs": "https://arxiv.org/abs/2509.13982", "authors": ["Boyu Zhang", "Ping He", "Tianyu Du", "Xuhong Zhang", "Lei Yun", "Kingsum Chow", "Jianwei Yin"], "title": "CLMTracing: Black-box User-level Watermarking for Code Language Model Tracing", "comment": null, "summary": "With the widespread adoption of open-source code language models (code LMs),\nintellectual property (IP) protection has become an increasingly critical\nconcern. While current watermarking techniques have the potential to identify\nthe code LM to protect its IP, they have limitations when facing the more\npractical and complex demand, i.e., offering the individual user-level tracing\nin the black-box setting. This work presents CLMTracing, a black-box code LM\nwatermarking framework employing the rule-based watermarks and\nutility-preserving injection method for user-level model tracing. CLMTracing\nfurther incorporates a parameter selection algorithm sensitive to the robust\nwatermark and adversarial training to enhance the robustness against watermark\nremoval attacks. Comprehensive evaluations demonstrate CLMTracing is effective\nacross multiple state-of-the-art (SOTA) code LMs, showing significant harmless\nimprovements compared to existing SOTA baselines and strong robustness against\nvarious removal attacks.", "AI": {"tldr": "The paper proposes CLMTracing, a novel framework that enables robust user-level tracing of open-source code language models in black-box settings using advanced watermarking techniques. It surpasses existing methods in defending against watermark removal and maintaining model utility.", "motivation": "With the growing use of open-source code language models (code LMs), protecting intellectual property (IP) has become more urgent. Existing watermarking methods struggle to trace models at the individual user level, especially in black-box settings.", "method": "The paper introduces CLMTracing\u2014a black-box watermarking framework for code LMs that uses rule-based watermarks and a utility-preserving injection method specifically for user-level tracing. It also features a parameter selection algorithm tailored for robust watermarking and incorporates adversarial training to resist watermark removal attacks.", "result": "CLMTracing is tested on multiple state-of-the-art code LMs and demonstrates effectiveness, robustness against watermark removal attacks, and superior performance compared to existing SOTA baselines with minimal impact on model utility.", "conclusion": "CLMTracing provides a practical and robust solution for user-level tracing and IP protection in open-source code LMs within black-box scenarios, outperforming previous approaches in robustness and harmlessness."}}
{"id": "2509.13755", "categories": ["cs.SE", "cs.AI", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.13755", "abs": "https://arxiv.org/abs/2509.13755", "authors": ["Zhaoyang Chu", "Yao Wan", "Zhikun Zhang", "Di Wang", "Zhou Yang", "Hongyu Zhang", "Pan Zhou", "Xuanhua Shi", "Hai Jin", "David Lo"], "title": "Scrub It Out! Erasing Sensitive Memorization in Code Language Models via Machine Unlearning", "comment": "Accepted at the 48th IEEE/ACM International Conference on Software\n  Engineering (ICSE 2026)", "summary": "While Code Language Models (CLMs) have demonstrated superior performance in\nsoftware engineering tasks such as code generation and summarization, recent\nempirical studies reveal a critical privacy vulnerability: these models exhibit\nunintended memorization of sensitive training data, enabling verbatim\nreproduction of confidential information when specifically prompted. To address\nthis issue, several approaches, including training data de-duplication and\ndifferential privacy augmentation, have been proposed. However, these methods\nrequire full-model retraining for deployed CLMs, which incurs substantial\ncomputational costs. In this paper, we aim to answer the following research\nquestion: Can sensitive information memorized by CLMs be erased effectively and\nefficiently?\n  We conduct a pioneering investigation into erasing sensitive memorization in\nCLMs through machine unlearning - a post-hoc modification method that removes\nspecific information from trained models without requiring full retraining.\nSpecifically, we first quantify the memorization risks of sensitive data within\nCLM training datasets and curate a high-risk dataset of 50,000 sensitive\nmemorized samples as unlearning targets. We study two widely used gradient\nascent-based unlearning approaches: the vanilla and constraint-based methods,\nand introduce CodeEraser, an advanced variant that selectively unlearns\nsensitive memorized segments in code while preserving the structural integrity\nand functional correctness of the surrounding code. Extensive experiments on\nthree families of CLMs, i.e., CodeParrot, CodeGen-Mono, and Qwen2.5-Coder,\nvalidate the effectiveness and efficiency of CodeEraser in erasing targeted\nsensitive memorization while maintaining model utility.", "AI": {"tldr": "CLMs can leak sensitive information by memorizing training data. This paper proposes CodeEraser, a machine unlearning technique to efficiently erase such memorization without retraining, while maintaining code usefulness.", "motivation": "CLMs are widely used but pose security risks due to their ability to memorize and reproduce sensitive data. Existing protections are resource-intensive, requiring model retraining. The authors seek a post-hoc, efficient, and effective method to address privacy risks inherent to deployed CLMs.", "method": "The authors use gradient ascent-based unlearning algorithms (vanilla and constraint-based) and propose CodeEraser\u2014a selective approach that removes sensitive data at the memorization level while maintaining code structure and functionality. They perform extensive experiments on three model families (CodeParrot, CodeGen-Mono, Qwen2.5-Coder) using a curated set of 50,000 sensitive samples.", "result": "The paper investigates the critical privacy issues in Code Language Models (CLMs) caused by memorization of sensitive training data, which can lead to unintended exposure of confidential information. It studies methods to erase memorized sensitive data without the costly process of full-model retraining.", "conclusion": "CodeEraser is effective and efficient in removing targeted sensitive information memorized by CLMs and preserves the models' utility. The work demonstrates the advantages of gradient ascent-based unlearning compared to traditional approaches."}}
{"id": "2509.14092", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2509.14092", "abs": "https://arxiv.org/abs/2509.14092", "authors": ["Michele Boreale", "Luisa Collodi"], "title": "Parallelizable Feynman-Kac Models for Universal Probabilistic Programming", "comment": "In Proceedings GandALF 2025, arXiv:2509.13258", "summary": "We study provably correct and efficient instantiations of Sequential Monte\nCarlo (SMC) inference in the context of formal operational semantics of\nProbabilistic Programs (PPs). We focus on universal PPs featuring sampling from\narbitrary measures and conditioning/reweighting in unbounded loops. We first\nequip Probabilistic Program Graphs (PPGs), an automata-theoretic description\nformat of PPs, with an expectation-based semantics over infinite execution\ntraces, which also incorporates trace weights. We then prove a finite\napproximation theorem that provides bounds to this semantics based on\nexpectations taken over finite, fixed-length traces. This enables us to frame\nour semantics within a Feynman-Kac (FK) model, and ensures the consistency of\nthe Particle Filtering (PF) algorithm, an instance of SMC, with respect to our\nsemantics. Building on these results, we introduce VPF, a vectorized version of\nthe PF algorithm tailored to PPGs and our semantics. Experiments conducted with\na proof-of-concept implementation of VPF show very promising results compared\nto state-of-the-art PP inference tools.", "AI": {"tldr": "The paper formalizes semantics and proves correctness for SMC inference in universal probabilistic programs, introduces a vectorized PF algorithm for these models, and shows strong empirical results compared to existing tools.", "motivation": "The motivation is to develop provably correct and efficient Sequential Monte Carlo (SMC) inference techniques for universal probabilistic programs (PPs), particularly those with complex features like arbitrary measures and unbounded loops, which are challenging to analyze and scale.", "method": "The paper introduces an expectation-based semantics for Probabilistic Program Graphs (PPGs) that incorporates infinite execution traces and trace weights. A finite approximation theorem is proven, and the semantics are framed within a Feynman-Kac model. Consistency of the Particle Filtering (PF) algorithm with this semantics is established. The authors also design a vectorized Particle Filtering algorithm (VPF) tailored to PPGs and validate it experimentally.", "result": "The proposed VPF algorithm is shown through experiments to offer very promising performance compared to state-of-the-art probabilistic program inference tools, suggesting both correctness and efficiency.", "conclusion": "This work formalizes the operational semantics for universal probabilistic programs, connects SMC and PF methods rigorously to these semantics, and introduces an efficient vectorized inference algorithm (VPF) with superior empirical results over existing methods."}}
{"id": "2509.13758", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13758", "abs": "https://arxiv.org/abs/2509.13758", "authors": ["Kevin Halim", "Sin G. Teo", "Ruitao Feng", "Zhenpeng Chen", "Yang Gu", "Chong Wang", "Yang Liu"], "title": "A Study on Thinking Patterns of Large Reasoning Models in Code Generation", "comment": null, "summary": "Currently, many large language models (LLMs) are utilized for software\nengineering tasks such as code generation. The emergence of more advanced\nmodels known as large reasoning models (LRMs), such as OpenAI's o3, DeepSeek\nR1, and Qwen3. They have demonstrated the capability of performing multi-step\nreasoning. Despite the advancement in LRMs, little attention has been paid to\nsystematically analyzing the reasoning patterns these models exhibit and how\nsuch patterns influence the generated code. This paper presents a comprehensive\nstudy aimed at investigating and uncovering the reasoning behavior of LRMs\nduring code generation. We prompted several state-of-the-art LRMs of varying\nsizes with code generation tasks and applied open coding to manually annotate\nthe reasoning traces. From this analysis, we derive a taxonomy of LRM reasoning\nbehaviors, encompassing 15 reasoning actions across four phases.\n  Our empirical study based on the taxonomy reveals a series of findings.\nFirst, we identify common reasoning patterns, showing that LRMs generally\nfollow a human-like coding workflow, with more complex tasks eliciting\nadditional actions such as scaffolding, flaw detection, and style checks.\nSecond, we compare reasoning across models, finding that Qwen3 exhibits\niterative reasoning while DeepSeek-R1-7B follows a more linear, waterfall-like\napproach. Third, we analyze the relationship between reasoning and code\ncorrectness, showing that actions such as unit test creation and scaffold\ngeneration strongly support functional outcomes, with LRMs adapting strategies\nbased on task context. Finally, we evaluate lightweight prompting strategies\ninformed by these findings, demonstrating the potential of context- and\nreasoning-oriented prompts to improve LRM-generated code. Our results offer\ninsights and practical implications for advancing automatic code generation.", "AI": {"tldr": "This paper empirically analyzes how advanced reasoning models (LRMs) approach code generation, revealing distinct reasoning patterns and their impact on code quality. By identifying a taxonomy of reasoning actions and studying their effects, the researchers show that prompts leveraging these insights can enhance LRM performance in software engineering tasks.", "motivation": "Although LRMs have shown superior multi-step reasoning capabilities for code generation, there is limited research on how their reasoning patterns affect generated code.", "method": "The authors comprehensively study reasoning traces in multiple state-of-the-art LRMs by prompting them with code generation tasks and manually annotating their reasoning patterns through open coding. This results in taxonomy development and empirical analysis.", "result": "They classify 15 reasoning actions across 4 phases. Key findings include: (1) LRMs mimic human coding workflows, introducing extra reasoning actions for complex tasks; (2) Different LRMs exhibit distinct reasoning styles (e.g., Qwen3 iterative, DeepSeek-R1-7B linear); (3) Some reasoning actions (like scaffolding, unit testing) strongly correlate with functional code outcomes; (4) Lightweight, reasoning-informed prompts can enhance LRM-generated code quality.", "conclusion": "Understanding and leveraging LRM reasoning patterns leads to better code generation and paves the way for more effective prompting strategies."}}
{"id": "2509.13782", "categories": ["cs.SE", "cs.AI", "cs.MA", "D.2.2; I.2.1"], "pdf": "https://arxiv.org/pdf/2509.13782", "abs": "https://arxiv.org/abs/2509.13782", "authors": ["Yu Ge", "Linna Xie", "Zhong Li", "Yu Pei", "Tian Zhang"], "title": "Who is Introducing the Failure? Automatically Attributing Failures of Multi-Agent Systems via Spectrum Analysis", "comment": "20 pages, 6 figures", "summary": "Large Language Model Powered Multi-Agent Systems (MASs) are increasingly\nemployed to automate complex real-world problems, such as programming and\nscientific discovery. Despite their promising, MASs are not without their\nflaws. However, failure attribution in MASs - pinpointing the specific agent\nactions responsible for failures - remains underexplored and labor-intensive,\nposing significant challenges for debugging and system improvement. To bridge\nthis gap, we propose FAMAS, the first spectrum-based failure attribution\napproach for MASs, which operates through systematic trajectory replay and\nabstraction, followed by spectrum analysis.The core idea of FAMAS is to\nestimate, from variations across repeated MAS executions, the likelihood that\neach agent action is responsible for the failure. In particular, we propose a\nnovel suspiciousness formula tailored to MASs, which integrates two key factor\ngroups, namely the agent behavior group and the action behavior group, to\naccount for the agent activation patterns and the action activation patterns\nwithin the execution trajectories of MASs. Through expensive evaluations\nagainst 12 baselines on the Who and When benchmark, FAMAS demonstrates superior\nperformance by outperforming all the methods in comparison.", "AI": {"tldr": "FAMAS is a new method for tracing failures back to specific agent actions in multi-agent systems, using systematic trajectory analysis and a tailored formula to outperform existing approaches.", "motivation": "Large Language Model Powered Multi-Agent Systems (MASs) are increasingly used for automating complex tasks, but failure attribution\u2014identifying which specific agent actions cause failures\u2014remains difficult, underexplored, and labor-intensive, creating obstacles for debugging and improvement.", "method": "The authors propose FAMAS, a spectrum-based failure attribution method for MASs. FAMAS uses systematic trajectory replay and abstraction, combined with spectrum analysis. A novel suspiciousness formula is introduced, incorporating both agent behavior and action behavior groups to analyze activation patterns in agent execution trajectories.", "result": "FAMAS was evaluated against 12 baselines using the Who and When benchmark, where it demonstrated superior performance by outperforming all compared methods.", "conclusion": "FAMAS provides an effective and systematic approach for failure attribution in Multi-Agent Systems, making the debugging process more efficient and accurate."}}
{"id": "2509.13852", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13852", "abs": "https://arxiv.org/abs/2509.13852", "authors": ["Yulun Wu", "Guangba Yu", "Zhihan Jiang", "Yichen Li", "Michael R. Lyu"], "title": "Trace Sampling 2.0: Code Knowledge Enhanced Span-level Sampling for Distributed Tracing", "comment": null, "summary": "Distributed tracing is an essential diagnostic tool in microservice systems,\nbut the sheer volume of traces places a significant burden on backend storage.\nA common approach to mitigating this issue is trace sampling, which selectively\nretains traces based on specific criteria, often preserving only anomalous\nones. However, this method frequently discards valuable information, including\nnormal traces that are essential for comparative analysis. To address this\nlimitation, we introduce Trace Sampling 2.0, which operates at the span level\nwhile maintaining trace structure consistency. This approach allows for the\nretention of all traces while significantly reducing storage overhead. Based on\nthis concept, we design and implement Autoscope, a span-level sampling method\nthat leverages static analysis to extract execution logic, ensuring that\ncritical spans are preserved without compromising structural integrity. We\nevaluated Autoscope on two open-source microservices. Our results show that it\nreduces trace size by 81.2% while maintaining 98.1% faulty span coverage,\noutperforming existing trace-level sampling methods. Furthermore, we\ndemonstrate its effectiveness in root cause analysis, achieving an average\nimprovement of 8.3%. These findings indicate that Autoscope can significantly\nenhance observability and storage efficiency in microservices, offering a\nrobust solution for performance monitoring.", "AI": {"tldr": "Autoscope improves distributed tracing by sampling at the span level, reducing trace storage by 81% while maintaining nearly full coverage of faults and improving root cause analysis, offering a better solution than traditional trace sampling.", "motivation": "Traditional trace sampling in microservice systems often discards valuable information by retaining mostly anomalous traces, making it difficult to perform comparative analyses and negatively impacting observability.", "method": "The authors propose Trace Sampling 2.0, a span-level sampling approach that maintains trace structure consistency. They design Autoscope, which uses static analysis to extract execution logic and selectively samples spans, ensuring critical information is preserved.", "result": "Autoscope was evaluated using two open-source microservices and demonstrated a reduction in trace size by 81.2%, while maintaining 98.1% coverage of faulty spans. It also improved root cause analysis effectiveness by an average of 8.3%, surpassing existing sampling methods.", "conclusion": "Autoscope enables significant reductions in storage overhead for distributed tracing without sacrificing trace coverage or analysis quality, thereby enhancing both observability and performance monitoring in microservice environments."}}
{"id": "2509.13868", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13868", "abs": "https://arxiv.org/abs/2509.13868", "authors": ["Manal Binkhonain", "Reem Alfayaz"], "title": "Are Prompts All You Need? Evaluating Prompt-Based Large Language Models (LLM)s for Software Requirements Classification", "comment": "33 pages, 12 figures", "summary": "Requirements classification assigns natural language requirements to\npredefined classes, such as functional and non functional. Accurate\nclassification reduces risk and improves software quality. Most existing models\nrely on supervised learning, which needs large labeled data that are costly,\nslow to create, and domain dependent; they also generalize poorly and often\nrequire retraining for each task. This study tests whether prompt based large\nlanguage models can reduce data needs. We benchmark several models and\nprompting styles (zero shot, few shot, persona, and chain of thought) across\nmultiple tasks on two English datasets, PROMISE and SecReq. For each task we\ncompare model prompt configurations and then compare the best LLM setups with a\nstrong fine tuned transformer baseline. Results show that prompt based LLMs,\nespecially with few shot prompts, can match or exceed the baseline. Adding a\npersona, or persona plus chain of thought, can yield further gains. We conclude\nthat prompt based LLMs are a practical and scalable option that reduces\ndependence on large annotations and can improve generalizability across tasks.", "AI": {"tldr": "Prompt-based large language models can classify requirements accurately with much less labeled data than traditional methods, reducing annotation effort and transferring better across tasks.", "motivation": "Traditional requirements classification relies on supervised learning, requiring large labeled datasets that are time-consuming, costly, and limited in generalizability.", "method": "The authors experiment with prompt-based large language models (LLMs), testing different prompting styles (zero-shot, few-shot, persona, chain of thought) on two datasets (PROMISE and SecReq) and compare their performance to a fine-tuned transformer baseline.", "result": "Prompt-based LLMs, especially with few-shot prompts, perform as well as or better than the baseline. Persona and chain-of-thought prompting further improve results.", "conclusion": "Prompt-based LLMs greatly reduce data annotation needs, generalize better across domains, and are a scalable, practical solution for requirements classification."}}
{"id": "2509.13896", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13896", "abs": "https://arxiv.org/abs/2509.13896", "authors": ["Shalini Chakraborty", "Lola Burgue\u00f1o", "Nathalie Moreno", "Javier Troya", "Paula Mu\u00f1oz"], "title": "Mind the Ethics! The Overlooked Ethical Dimensions of GenAI in Software Modeling Education", "comment": "8 pages, Educators Symposium at MODELS 2025", "summary": "Generative Artificial Intelligence (GenAI) is rapidly gaining momentum in\nsoftware modeling education, embraced by both students and educators. As GenAI\nassists with interpreting requirements, formalizing models, and translating\nstudents' mental models into structured notations, it increasingly shapes core\nlearning outcomes such as domain comprehension, diagrammatic thinking, and\nmodeling fluency without clear ethical oversight or pedagogical guidelines.\nYet, the ethical implications of this integration remain underexplored.\n  In this paper, we conduct a systematic literature review across six major\ndigital libraries in computer science (ACM Digital Library, IEEE Xplore,\nScopus, ScienceDirect, SpringerLink, and Web of Science). Our aim is to\nidentify studies discussing the ethical aspects of GenAI in software modeling\neducation, including responsibility, fairness, transparency, diversity, and\ninclusion among others.\n  Out of 1,386 unique papers initially retrieved, only three explicitly\naddressed ethical considerations. This scarcity highlights the critical absence\nof ethical discourse surrounding GenAI in modeling education and raises urgent\nquestions about the responsible integration of AI in modeling curricula, as\nwell as it evinces the pressing need for structured ethical frameworks in this\nemerging educational landscape. We examine these three studies and explore the\nemerging research opportunities as well as the challenges that have arisen in\nthis field.", "AI": {"tldr": "Despite GenAI's growing role in software modeling education, almost no existing research seriously addresses its ethical implications. Only 3 out of 1,386 papers reviewed discussed ethical issues, signaling a pressing need for ethical frameworks and further study in this area.", "motivation": "GenAI is increasingly shaping learning outcomes in software modeling education without clear ethical oversight or pedagogical guidelines, prompting concerns about responsibility, fairness, transparency, diversity, and inclusion.", "method": "A systematic literature review was conducted across six major computer science digital libraries, screening 1,386 unique papers for explicit discussion of ethical aspects tied to GenAI in modeling education.", "result": "Of the 1,386 papers reviewed, only three explicitly addressed ethical considerations, demonstrating a critical gap in current research and ethical discussions related to GenAI in this context.", "conclusion": "There is a significant lack of research and ethical discourse regarding the integration of Generative AI (GenAI) in software modeling education, highlighting the urgent need for structured ethical frameworks."}}
{"id": "2509.13941", "categories": ["cs.SE", "cs.AI", "cs.CL"], "pdf": "https://arxiv.org/pdf/2509.13941", "abs": "https://arxiv.org/abs/2509.13941", "authors": ["Simiao Liu", "Fang Liu", "Liehao Li", "Xin Tan", "Yinghao Zhu", "Xiaoli Lian", "Li Zhang"], "title": "An Empirical Study on Failures in Automated Issue Solving", "comment": null, "summary": "Automated issue solving seeks to autonomously identify and repair defective\ncode snippets across an entire codebase. SWE-Bench has emerged as the most\nwidely adopted benchmark for evaluating progress in this area. While LLM-based\nagentic tools show great promise, they still fail on a substantial portion of\ntasks. Moreover, current evaluations primarily report aggregate issue-solving\nrates, which obscure the underlying causes of success and failure, making it\nchallenging to diagnose model weaknesses or guide targeted improvements. To\nbridge this gap, we first analyze the performance and efficiency of three SOTA\ntools, spanning both pipeline-based and agentic architectures, in automated\nissue solving tasks of SWE-Bench-Verified under varying task characteristics.\nFurthermore, to move from high-level performance metrics to underlying cause\nanalysis, we conducted a systematic manual analysis of 150 failed instances.\nFrom this analysis, we developed a comprehensive taxonomy of failure modes\ncomprising 3 primary phases, 9 main categories, and 25 fine-grained\nsubcategories. Then we systematically analyze the distribution of the\nidentified failure modes, the results reveal distinct failure fingerprints\nbetween the two architectural paradigms, with the majority of agentic failures\nstemming from flawed reasoning and cognitive deadlocks. Motivated by these\ninsights, we propose a collaborative Expert-Executor framework. It introduces a\nsupervisory Expert agent tasked with providing strategic oversight and\ncourse-correction for a primary Executor agent. This architecture is designed\nto correct flawed reasoning and break the cognitive deadlocks that frequently\nlead to failure. Experiments show that our framework solves 22.2% of previously\nintractable issues for a leading single agent. These findings pave the way for\nbuilding more robust agents through diagnostic evaluation and collaborative\ndesign.", "AI": {"tldr": "This paper diagnoses why automated code repair tools (evaluated on SWE-Bench) fail, categorizes those failures, and shows that a new collaborative framework can fix many previously unsolvable problems by overcoming typical agentic model weaknesses.", "motivation": "Current evaluations of automated issue solving in code (especially using SWE-Bench) mainly give aggregate success rates, but don't dig into why tools succeed or fail. This makes it hard to target improvements or deeply understand model weaknesses.", "method": "Analyzed three state-of-the-art automated issue-solving tools (covering pipeline-based and agentic architectures) on diverse SWE-Bench-Verified tasks. Then, manually examined 150 failed cases to develop a taxonomy of failure types, and studied how these failures distribute across tools. Finally, designed and tested a new Expert-Executor framework to address common failure causes in agentic tools.", "result": "Identified three main phases, nine categories, and twenty-five subcategories of failure modes, with agentic models most often failing due to flawed reasoning and cognitive deadlocks. The proposed Expert-Executor framework can resolve 22.2% of issues previously unsolvable by top single-agent models.", "conclusion": "Understanding and categorizing the reasons for failure enables more targeted improvements. The introduced collaborative Expert-Executor approach substantially boosts issue-solving rates and breaks through common agentic limitations, paving the way for more robust future models."}}
{"id": "2509.13942", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13942", "abs": "https://arxiv.org/abs/2509.13942", "authors": ["Duc Minh Ha", "Phu Trac Kien", "Tho Quan", "Anh Nguyen-Duc"], "title": "Evaluating Classical Software Process Models as Coordination Mechanisms for LLM-Based Software Generation", "comment": null, "summary": "[Background] Large Language Model (LLM)-based multi-agent systems (MAS) are\ntransforming software development by enabling autonomous collaboration.\nClassical software processes such asWaterfall, V-Model, and Agile offer\nstructured coordination patterns that can be repurposed to guide these agent\ninteractions. [Aims] This study explores how traditional software development\nprocesses can be adapted as coordination scaffolds for LLM based MAS and\nexamines their impact on code quality, cost, and productivity. [Method] We\nexecuted 11 diverse software projects under three process models and four GPT\nvariants, totaling 132 runs. Each output was evaluated using standardized\nmetrics for size (files, LOC), cost (execution time, token usage), and quality\n(code smells, AI- and human detected bugs). [Results] Both process model and\nLLM choice significantly affected system performance. Waterfall was most\nefficient, V-Model produced the most verbose code, and Agile achieved the\nhighest code quality, albeit at higher computational cost. [Conclusions]\nClassical software processes can be effectively instantiated in LLM-based MAS,\nbut each entails trade-offs across quality, cost, and adaptability. Process\nselection should reflect project goals, whether prioritizing efficiency,\nrobustness, or structured validation.", "AI": {"tldr": "The paper investigates how classic software engineering processes (Waterfall, V-Model, Agile) can steer LLM-based multi-agent systems. Experiments show that process choice impacts code quality, size, and development cost. Process selection should match project priorities like efficiency or quality.", "motivation": "Large Language Model (LLM)-based multi-agent systems (MAS) are changing software development. Classical software development processes provide proven coordination structures, but it is unclear how these can be adapted for LLM-driven MAS and what their impact would be.", "method": "The authors executed 11 different software projects, using three classical process models (Waterfall, V-Model, Agile) and four GPT LLM variants, making 132 total runs. Each run's output was analyzed for size, cost, and quality using standardized metrics.", "result": "Both the choice of classical process and LLM greatly impacted outcomes. Waterfall provided highest efficiency, V-Model generated the most verbose code, and Agile resulted in the highest code quality but at greater computational cost.", "conclusion": "Traditional software processes can be successfully adapted for use in LLM-based multi-agent systems, but each has different trade-offs between quality, cost, and adaptability. The best process model to use depends on the specific goals and needs of the software project."}}
{"id": "2509.14093", "categories": ["cs.SE", "cs.AI", "cs.CL"], "pdf": "https://arxiv.org/pdf/2509.14093", "abs": "https://arxiv.org/abs/2509.14093", "authors": ["Kerui Huang", "Shuhan Liu", "Xing Hu", "Tongtong Xu", "Lingfeng Bao", "Xin Xia"], "title": "Reasoning Efficiently Through Adaptive Chain-of-Thought Compression: A Self-Optimizing Framework", "comment": null, "summary": "Chain-of-Thought (CoT) reasoning enhances Large Language Models (LLMs) by\nprompting intermediate steps, improving accuracy and robustness in arithmetic,\nlogic, and commonsense tasks. However, this benefit comes with high\ncomputational costs: longer outputs increase latency, memory usage, and\nKV-cache demands. These issues are especially critical in software engineering\ntasks where concise and deterministic outputs are required. To investigate\nthese trade-offs, we conduct an empirical study based on code generation\nbenchmarks. The results reveal that longer CoT does not always help. Excessive\nreasoning often causes truncation, accuracy drops, and latency up to five times\nhigher, with failed outputs consistently longer than successful ones. These\nfindings challenge the assumption that longer reasoning is inherently better\nand highlight the need for adaptive CoT control. Motivated by this, we propose\nSEER (Self-Enhancing Efficient Reasoning), an adaptive framework that\ncompresses CoT while preserving accuracy. SEER combines Best-of-N sampling with\ntask-aware adaptive filtering, dynamically adjusting thresholds based on\npre-inference outputs to reduce verbosity and computational overhead. We then\nevaluate SEER on three software engineering tasks and one math task. On\naverage, SEER shortens CoT by 42.1%, improves accuracy by reducing truncation,\nand eliminates most infinite loops. These results demonstrate SEER as a\npractical method to make CoT-enhanced LLMs more efficient and robust, even\nunder resource constraints.", "AI": {"tldr": "Longer CoT reasoning in LLMs often increases computational costs without guaranteeing higher accuracy. SEER is an adaptive framework that compresses CoT outputs, reduces latency, prevents common failures, and improves overall efficiency and robustness, particularly for software engineering tasks.", "motivation": "While Chain-of-Thought (CoT) reasoning can improve the performance of large language models (LLMs), especially on complex tasks, it introduces substantial computational costs that hinder efficiency and practicality for tasks that require concise and deterministic outputs, such as in software engineering.", "method": "The paper conducts an empirical study on the effects of CoT reasoning length in code generation benchmarks, then proposes SEER (Self-Enhancing Efficient Reasoning), a framework that adaptively compresses CoT via Best-of-N sampling and task-aware adaptive filtering with dynamic thresholding based on pre-inference outputs.", "result": "SEER shortens CoT by 42.1% on average, improves accuracy by reducing output truncation, and eliminates most infinite loops in outputs, as demonstrated across three software engineering tasks and one math task.", "conclusion": "Longer CoT does not guarantee better results and may hurt performance and efficiency. SEER offers a promising adaptive approach that maintains the benefits of CoT reasoning while significantly reducing computational overhead and making LLMs more robust and efficient for practical applications."}}
