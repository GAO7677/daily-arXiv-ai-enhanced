{"id": "2507.02068", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02068", "abs": "https://arxiv.org/abs/2507.02068", "authors": ["Brian Bell", "Teresa Thomas", "Sang Won Lee", "Chris Brown"], "title": "How do Software Engineering Candidates Prepare for Technical Interviews?", "comment": null, "summary": "To obtain employment, aspiring software engineers must complete technical\ninterviews -- a hiring process which involves candidates writing code while\ncommunicating to an audience. However, the complexities of tech interviews are\ndifficult to prepare for and seldom faced in computing curricula. To this end,\nwe seek to understand how candidates prepare for technical interviews,\ninvestigating the effects of preparation methods and the role of education. We\ndistributed a survey to candidates (n = 131) actively preparing for technical\ninterviews. Our results suggest candidates rarely train in authentic settings\nand courses fail to support preparation efforts -- leading to stress and\nunpreparedness. Based on our findings, we provide implications for stakeholders\nto enhance tech interview preparation for candidates pursuing software\nengineering roles.", "AI": {"tldr": "Technical interviews for software engineering are hard to prepare for and not effectively addressed in current education. Most candidates don't train in realistic ways and feel unprepared and stressed. The paper identifies the challenges and offers suggestions for better support and curriculum alignment.", "motivation": "Aspiring software engineers must pass technical interviews, but these interviews are complex and not usually practiced in educational programs. There is a gap between the skills taught in computing curricula and the skills needed to succeed in technical interviews.", "method": "The researchers distributed a survey to 131 candidates actively preparing for technical interviews, gathering data on their preparation methods and the perceived support from educational courses.", "result": "The study found that candidates rarely train for technical interviews in realistic settings, and educational courses do not adequately support preparation. This lack of support results in candidates feeling stressed and unprepared for technical interviews.", "conclusion": "The findings highlight the need for stakeholders (such as educators and employers) to improve technical interview preparation for software engineering candidates. The paper suggests ways to better align curriculum and training with real-world interview demands."}}
{"id": "2507.02107", "categories": ["cs.SE", "cs.PL"], "pdf": "https://arxiv.org/pdf/2507.02107", "abs": "https://arxiv.org/abs/2507.02107", "authors": ["Ben Limpanukorn", "Yanjun Wang", "Zach Patterson", "Pranav Garg", "Murali Krishna Ramanathan", "Xiaofei Ma", "Anoop Deoras", "Miryung Kim"], "title": "Structural Code Search using Natural Language Queries", "comment": null, "summary": "Searching code is a common task that developers perform to understand APIs,\nlearn common code patterns, and navigate code. Currently, developers most\ncommonly search using keywords and regular expressions that are easy to use and\nwidely available. Beyond keywords and regular expressions, structural code\nsearch tools allow developers to search for code based on its syntactic\nstructure. This has numerous applications ranging from bug finding to\nsystematically refactoring code. However, these structural code search tools\noperate on queries expressed in domain-specific languages (DSL) that can be\ndifficult to learn and write. We propose to allow developers to use natural\nlanguage to search for code structurally. Expressing queries in natural\nlanguage provides an intuitive way to search for code and lowers the barrier to\nentry.\n  In this work, we develop a novel general approach that combines the reasoning\ncapabilities of an LLM to interpret natural language search queries with the\npower of structural search tools to efficiently and accurately retrieve\nrelevant code. We then instantiate this approach for two structural code search\nDSLs: Semgrep and GQL. In our evaluation, we construct a new benchmark for\nstructural code search consisting of 400 queries over 10 Java projects. We show\nthat our approach for structural code search based on translating NL queries to\nDSL queries using an LLM is effective and robust, achieving a high precision\nand recall ranging from 55% - 70%. Further, our approach significantly\noutperforms baselines based on semantic code search and LLM retrievals by up to\n57% and 14% on F1 scores.", "AI": {"tldr": "This paper presents a system that lets developers use natural language to perform powerful structural code searches by translating queries with a large language model, outperforming existing approaches and making advanced search accessible.", "motivation": "Structural code search tools offer precise and powerful ways to find and manipulate code, but require developers to write queries in domain-specific languages (DSLs), which are hard to learn and use. Lowering this barrier by allowing natural language queries could greatly improve accessibility and effectiveness.", "method": "The authors propose a novel method that leverages large language models (LLMs) to translate natural language queries into DSL queries usable by existing structural code search engines (specifically Semgrep and GQL). They built a benchmark with 400 queries over 10 Java projects to evaluate their approach.", "result": "The proposed approach achieves high precision and recall (55%-70%) and significantly outperforms semantic code search and LLM retrieval baselines by as much as 57% and 14% in F1 scores.", "conclusion": "Translating natural language code search queries to structural search DSLs via LLMs is effective, robust, and dramatically more user-friendly than existing structural search methods requiring DSL expertise."}}
{"id": "2507.02110", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02110", "abs": "https://arxiv.org/abs/2507.02110", "authors": ["Md Nahidul Islam Opu", "Fatima Islam Mouri", "Rick Kazman", "Yuanfang Cai", "Shaiful Chowdhury"], "title": "Can Internal Software Metrics Predict App Popularity at Launch? Yeas! and Nays!", "comment": null, "summary": "Predicting mobile app popularity before release can provide developers with a\nstrategic advantage in a competitive marketplace, yet it remains a challenging\nproblem. This study explores whether internal software metrics, measurable from\nsource code before deployment, can predict an app's popularity, defined by user\nratings (calculated from user reviews) and DownloadsPerYear (yearly downloads).\nUsing a dataset of 446 open-source Android apps from F-Droid, we extract a wide\narray of features, including system-, class-, and method-level code metrics,\ncode smells, and app metadata. Additional information, such as user reviews,\ndownload counts, and uses-permission, was collected from the Google Play Store.\nWe evaluate regression and classification models across three feature sets: a\nminimal Size-only baseline, a domain-informed Handpicked set, and a Voting set\nderived via feature selection algorithms. Regression models perform poorly due\nto skewed data, with low $R^2$ scores. However, when reframed as binary\nclassification (Popular vs. Unpopular), results improve significantly. The best\nmodel, a Multilayer Perceptron using the Voting set, achieves F1-scores of\n0.72. These results suggest that internal code metrics, although limited in\ntheir explanatory power, can serve as useful indicators of app popularity. This\nchallenges earlier findings that dismissed internal metrics as predictors of\nsoftware quality.", "AI": {"tldr": "The paper finds that internal source code metrics, available before app release, can help classify Android apps as popular or not, with a best-case F1-score of 0.72\u2014challenging previous assumptions about the irrelevance of such metrics for predicting app popularity.", "motivation": "Predicting mobile app popularity pre-release could benefit developers by providing a strategic edge, but it is a difficult and unresolved task. The authors aim to investigate if internal software metrics available before deployment can reliably predict popularity outcomes.", "method": "The study collected a dataset of 446 open-source Android apps from F-Droid. It extracted software metrics at various code levels (system, class, method), code smells, and metadata. Additional data was gathered from the Google Play Store (user reviews, downloads, permissions). Three sets of features were evaluated using both regression and classification models: minimal Size-only, a Handpicked expert set, and a Voting set selected by algorithms.", "result": "Regression models performed poorly (low R^2) because of skewed data distributions. Reframing the problem as a binary classification task (Popular vs. Unpopular) yielded much better performance, with the best model (a Multilayer Perceptron on the Voting feature set) achieving an F1-score of 0.72.", "conclusion": "Internal code metrics, despite not being highly explanatory, can still be useful indicators for predicting app popularity. This finding contradicts previous claims that internal metrics are not predictive of software quality or app success."}}
{"id": "2507.02118", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02118", "abs": "https://arxiv.org/abs/2507.02118", "authors": ["Cristina Martinez Montes", "Daniela Grassi", "Nicole Novielli", "Birgit Penzenstadle"], "title": "A Multimodal Approach Combining Biometrics and Self-Report Instruments for Monitoring Stress in Programming: Methodological Insights", "comment": null, "summary": "The study of well-being, stress and other human factors has traditionally\nrelied on self-report instruments to assess key variables. However, concerns\nabout potential biases in these instruments, even when thoroughly validated and\nstandardised, have driven growing interest in alternatives in combining these\nmeasures with more objective methods, such as physiological measures.\n  We aimed to (i) compare psychometric stress measures and biometric indicators\nand (ii) identify stress-related patterns in biometric data during software\nengineering tasks.\n  We conducted an experiment where participants completed a pre-survey, then\nprogrammed two tasks wearing biometric sensors, answered brief post-surveys for\neach, and finally went through a short exit interview.\n  Our results showed diverse outcomes; we found no stress in the psychometric\ninstruments. Participants in the interviews reported a mix of feeling no stress\nand experiencing time pressure. Finally, the biometrics showed a significant\ndifference only in EDA phasic peaks.\n  We conclude that our chosen way of inducing stress by imposing a stricter\ntime limit was insufficient. We offer methodological insights for future\nstudies working with stress, biometrics, and psychometric instruments.", "AI": {"tldr": "This study compared self-reported and biometric measures of stress during software tasks with time pressure, finding little alignment between the methods and suggesting the stress induction was insufficient, with methodological recommendations for future research.", "motivation": "Traditional studies on well-being and stress rely heavily on self-reported data, which may include biases, prompting the need for more objective measurements such as biometrics in combination with psychometric tools.", "method": "An experiment was conducted where participants completed surveys, performed programming tasks while wearing biometric sensors, completed post-task surveys, and participated in exit interviews. Stress was induced by strict time limits.", "result": "The psychometric instruments did not register stress. Interviews revealed some felt time pressure while others felt no stress. Biometric data showed significant differences only in EDA phasic peaks.", "conclusion": "Imposing a stricter time limit was not effective in inducing measurable stress in this context. The study provides methodological guidance for future research combining biometrics and psychometric stress measurements."}}
{"id": "2507.02226", "categories": ["cs.PL", "cs.AR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.02226", "abs": "https://arxiv.org/abs/2507.02226", "authors": ["Mohammad Akyash", "Kimia Azar", "Hadi Kamali"], "title": "DecoRTL: A Run-time Decoding Framework for RTL Code Generation with LLMs", "comment": "Accepted to the International Conference on Computer-Aided Design\n  (ICCAD 2025)", "summary": "As one of their many applications, large language models (LLMs) have recently\nshown promise in automating register transfer level (RTL) code generation.\nHowever, conventional LLM decoding strategies, originally designed for natural\nlanguage, often fail to meet the structural and semantic demands of RTL,\nleading to hallucinated, repetitive, or invalid code outputs. In this paper, we\nfirst investigate the root causes of these decoding failures through an\nempirical analysis of token-level entropy during RTL generation. Our findings\nreveal that LLMs exhibit low confidence in regions of structural ambiguity or\nsemantic complexity, showing that standard decoding strategies fail to\ndifferentiate between regions requiring determinism (syntax-critical regions)\nand those that benefit from creative exploratory variability (design-critical\nregions). Then, to overcome this, we introduce DecoRTL, a novel run-time\ndecoding strategy, that is both syntax-aware and contrastive for RTL code\ngeneration. DecoRTL integrates two complementary components: (i)\nself-consistency sampling, which generates multiple candidates and re-ranks\nthem based on token-level agreement to promote correctness while maintaining\ndiversity; and (ii) syntax-aware temperature adaptation, which classifies\ntokens by their syntactical and functional roles and adjusts the sampling\ntemperature accordingly, enforcing low temperature for syntax-critical tokens\nand higher temperature for exploratory ones. Our approach operates entirely at\ninference time without requiring any additional model fine-tuning. Through\nevaluations on multiple open-source LLMs using the VerilogEval benchmark, we\ndemonstrate significant improvements in syntactic validity, functional\ncorrectness, and output diversity, while the execution overhead (performance\noverhead) is imperceptible.", "AI": {"tldr": "Standard LLM decoding fails on RTL code due to structural/semantic challenges. DecoRTL introduces syntax-aware sampling strategies that greatly enhance validity and correctness of RTL generation without slowing inference or requiring model changes.", "motivation": "Conventional LLM decoding strategies\u2014originally tailored for natural language\u2014do not address the structural and semantic intricacies of RTL code, leading to frequent generation errors. There's a need for decoding methods that distinguish between syntax- and design-critical code regions to yield valid and innovative outputs in RTL tasks.", "method": "The authors empirically analyze decoding failures in LLMs by investigating token-level entropy during RTL code generation. Based on observed deficiencies, they introduce DecoRTL, which combines self-consistency sampling (generating and re-ranking multiple outputs) and syntax-aware temperature adaptation (adjusting sampling temperature based on token syntactic/functional roles).", "result": "DecoRTL demonstrates significant gains in syntactic validity, functional correctness, and diversity of generated RTL code on VerilogEval, with negligible execution overhead and no need for model retraining.", "conclusion": "The paper concludes that DecoRTL, a novel syntax-aware and contrastive decoding strategy for LLM-based RTL code generation, significantly enhances the quality of generated code. It improves syntactic validity, functional correctness, and output diversity, with negligible performance overhead and requires no additional model fine-tuning."}}
{"id": "2507.02137", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02137", "abs": "https://arxiv.org/abs/2507.02137", "authors": ["Martin Obaidi", "Marc Herrmann", "Jil Kl\u00fcnder", "Kurt Schneider"], "title": "Towards Trustworthy Sentiment Analysis in Software Engineering: Dataset Characteristics and Tool Selection", "comment": "This paper has been accepted at the RETRAI workshop of the 33rd IEEE\n  International Requirements Engineering Conference (REW 2025)", "summary": "Software development relies heavily on text-based communication, making\nsentiment analysis a valuable tool for understanding team dynamics and\nsupporting trustworthy AI-driven analytics in requirements engineering.\nHowever, existing sentiment analysis tools often perform inconsistently across\ndatasets from different platforms, due to variations in communication style and\ncontent.\n  In this study, we analyze linguistic and statistical features of 10 developer\ncommunication datasets from five platforms and evaluate the performance of 14\nsentiment analysis tools. Based on these results, we propose a mapping approach\nand questionnaire that recommends suitable sentiment analysis tools for new\ndatasets, using their characteristic features as input.\n  Our results show that dataset characteristics can be leveraged to improve\ntool selection, as platforms differ substantially in both linguistic and\nstatistical properties. While transformer-based models such as SetFit and\nRoBERTa consistently achieve strong results, tool effectiveness remains\ncontext-dependent. Our approach supports researchers and practitioners in\nselecting trustworthy tools for sentiment analysis in software engineering,\nwhile highlighting the need for ongoing evaluation as communication contexts\nevolve.", "AI": {"tldr": "Sentiment analysis tool performance varies across software development communication datasets. This study analyzes several datasets and tools, proposing a feature-based recommendation approach. Transformer-based models work well but context matters, so tool selection should consider dataset characteristics for optimal sentiment analysis in software engineering.", "motivation": "Sentiment analysis is important for understanding team dynamics in software development, but existing tools often have inconsistent performance across different communication platforms due to variations in language and content.", "method": "The study examines linguistic and statistical features of 10 developer communication datasets from 5 different platforms and evaluates the performance of 14 sentiment analysis tools. Based on the analysis, a mapping approach and questionnaire are proposed to recommend the most suitable tools for new datasets.", "result": "Transformer-based sentiment analysis models (like SetFit and RoBERTa) generally perform well, but their effectiveness depends on the context and dataset characteristics. Using dataset features can help improve the selection of appropriate tools for sentiment analysis.", "conclusion": "Selecting sentiment analysis tools based on the linguistic and statistical properties of datasets improves analysis reliability in software engineering. However, tool performance remains context-dependent, and continuous evaluation is recommended as communication environments evolve."}}
{"id": "2507.02182", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02182", "abs": "https://arxiv.org/abs/2507.02182", "authors": ["Fangjian Lei", "Jiawen Liu", "Shayan Noei", "Ying Zou", "Derek Truong", "William Alexander"], "title": "Enhancing COBOL Code Explanations: A Multi-Agents Approach Using Large Language Models", "comment": null, "summary": "Common Business Oriented Language (COBOL) is a programming language used to\ndevelop business applications that are widely adopted by financial, business,\nand government agencies. Due to its age, complexity, and declining number of\nCOBOL developers, maintaining COBOL codebases is becoming increasingly\nchallenging. In particular, the lack of documentation makes it difficult for\nnew developers to effectively understand and maintain COBOL systems. Existing\nresearch utilizes large language models (LLMs) to explain the functionality of\ncode snippets. However, COBOL presents unique challenges due to its\narchitectural and syntactical differences, which often cause its code to exceed\nthe token window size of LLMs. In this work, we propose a multi-agent approach\nthat leverages two LLM-based agents working collaboratively to generate\nexplanations for functions, files, and the overall project. These agents\nincorporate together by utilizing contextual information from the codebase into\nthe code explanation prompts. We evaluate the effectiveness of our approach\nusing 14 open-source, real-world COBOL projects. Our results indicate that our\napproach performs significantly better than the baseline in function code\nexplanation, with improvements of 12.67%, 18.59%, and 0.62% in terms of METEOR,\nchrF, and SentenceBERT scores, respectively. At the file level, our approach\neffectively explains both short and long COBOL files that exceed the token\nwindow size of LLMs and surpass the baseline by 4.21%, 10.72%, and 14.68% in\nexplaining the purpose, functionality, and clarity of the generated\nexplanation. At the project level, our approach generates explanations that\nconvey the functionality and purpose of 82% of the selected projects.", "AI": {"tldr": "A collaborative LLM-based system is proposed for explaining COBOL code. It outperforms existing methods on various metrics and explains code at multiple granularities, making COBOL maintenance easier despite legacy challenges.", "motivation": "COBOL is still widely used in critical sectors, but its maintenance is difficult due to code complexity, lack of documentation, and a shrinking pool of developers. Existing code explanation approaches using large language models (LLMs) struggle with COBOL due to its unique structure and often excessive code length.", "method": "The authors propose a multi-agent system consisting of two LLM-based agents. These agents collaborate and use contextual information from the COBOL codebase to generate explanations for functions, files, and whole projects. The system is tested on 14 open-source COBOL projects.", "result": "The approach outperforms baseline methods in several metrics: At the function level, improvements of 12.67% (METEOR), 18.59% (chrF), and 0.62% (SentenceBERT) were observed. At the file level, the approach provides clearer, more functional explanations, especially for long files, with up to 14.68% improvement in clarity. At the project level, 82% of selected projects had their functionality and purpose correctly conveyed by the generated explanations.", "conclusion": "The multi-agent LLM approach significantly improves code explanation for COBOL systems at function, file, and project levels. This aids in better maintenance and understanding of legacy COBOL code, especially given challenges with code length and documentation."}}
{"id": "2507.02318", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02318", "abs": "https://arxiv.org/abs/2507.02318", "authors": ["Chen Yang", "Ziqi Wang", "Yanjie Jiang", "Lin Yang", "Yuteng Zheng", "Jianyi Zhou", "Junjie Chen"], "title": "Precisely Detecting Python Type Errors via LLM-based Unit Test Generation", "comment": null, "summary": "Type errors in Python often lead to runtime failures, posing significant\nchallenges to software reliability and developer productivity. Existing static\nanalysis tools aim to detect such errors without execution but frequently\nsuffer from high false positive rates. Recently, unit test generation\ntechniques offer great promise in achieving high test coverage, but they often\nstruggle to produce bug-revealing tests without tailored guidance. To address\nthese limitations, we present RTED, a novel type-aware test generation\ntechnique for automatically detecting Python type errors. Specifically, RTED\ncombines step-by-step type constraint analysis with reflective validation to\nguide the test generation process and effectively suppress false positives. We\nevaluated RTED on two widely-used benchmarks, BugsInPy and TypeBugs.\nExperimental results show that RTED can detect 22-29 more benchmarked type\nerrors than four state-of-the-art techniques. RTED is also capable of producing\nfewer false positives, achieving an improvement of 173.9%-245.9% in precision.\nFurthermore, RTED successfully discovered 12 previously unknown type errors\nfrom six real-world open-source Python projects.", "AI": {"tldr": "RTED is a new Python test generation tool that uses type constraints and reflective validation to find more type errors and cut down on false positives, outperforming previous methods and aiding in more reliable software.", "motivation": "Type errors in Python can cause runtime failures, undermining software reliability and developer productivity. Existing static analysis tools tend to produce many false positives, while current unit test generation techniques often lack the necessary guidance to efficiently detect such errors.", "method": "The paper introduces RTED, a type-aware test generation method. RTED combines step-by-step type constraint analysis with reflective validation, which helps guide the generation of tests targeting type errors and reduces false positives.", "result": "RTED outperforms four state-of-the-art techniques, detecting 22-29 more benchmarked type errors on the BugsInPy and TypeBugs datasets. It also produces significantly fewer false positives (with a 173.9%-245.9% precision improvement) and uncovers 12 previously unknown type errors in six real-world Python projects.", "conclusion": "RTED effectively boosts type error detection in Python, both increasing detection rates and reducing false positives, thus enhancing Python code reliability."}}
{"id": "2507.02376", "categories": ["cs.SE", "cs.AI", "cs.DC"], "pdf": "https://arxiv.org/pdf/2507.02376", "abs": "https://arxiv.org/abs/2507.02376", "authors": ["Chung-ju Huang", "Ziqi Zhang", "Yinggui Wang", "Binghui Wang", "Tao Wei", "Leye Wang"], "title": "VeFIA: An Efficient Inference Auditing Framework for Vertical Federated Collaborative Software", "comment": null, "summary": "Vertical Federated Learning (VFL) is a distributed AI software deployment\nmechanism for cross-silo collaboration without accessing participants' data.\nHowever, existing VFL work lacks a mechanism to audit the execution correctness\nof the inference software of the data party. To address this problem, we design\na Vertical Federated Inference Auditing (VeFIA) framework. VeFIA helps the task\nparty to audit whether the data party's inference software is executed as\nexpected during large-scale inference without leaking the data privacy of the\ndata party or introducing additional latency to the inference system. The core\nof VeFIA is that the task party can use the inference results from a framework\nwith Trusted Execution Environments (TEE) and the coordinator to validate the\ncorrectness of the data party's computation results. VeFIA guarantees that, as\nlong as the abnormal inference exceeds 5.4%, the task party can detect\nexecution anomalies in the inference software with a probability of 99.99%,\nwithout incurring any additional online inference latency. VeFIA's random\nsampling validation achieves 100% positive predictive value, negative\npredictive value, and true positive rate in detecting abnormal inference. To\nthe best of our knowledge, this is the first paper to discuss the correctness\nof inference software execution in VFL.", "AI": {"tldr": "VeFIA enables accurate, privacy-preserving, and highly reliable auditing of inference software execution in Vertical Federated Learning without extra system latency.", "motivation": "There is currently no mechanism to audit whether the inference software of the data party in Vertical Federated Learning (VFL) is executing correctly, which poses risks for correctness and trust in cross-silo collaborations.", "method": "The authors propose the Vertical Federated Inference Auditing (VeFIA) framework, which uses Trusted Execution Environments (TEE) and a coordinator to validate data party computations. VeFIA performs random sampling validation of inference results without exposing private data or adding inference latency.", "result": "VeFIA enables the task party to audit and detect incorrect execution if abnormal inference exceeds 5.4%, with a detection probability of 99.99%, and no additional inference latency. It consistently achieves perfect performance metrics in detecting abnormalities (100% positive/negative predictive value and true positive rate).", "conclusion": "VeFIA is the first proposed solution to ensure execution correctness for inference software in VFL, providing high-assurance auditing without privacy or performance trade-offs."}}
{"id": "2507.02533", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02533", "abs": "https://arxiv.org/abs/2507.02533", "authors": ["Miguel Romero-Arjona", "Jos\u00e9 A. Parejo", "Juan C. Alonso", "Ana B. S\u00e1nchez", "Aitor Arrieta", "Sergio Segura"], "title": "Meta-Fair: AI-Assisted Fairness Testing of Large Language Models", "comment": null, "summary": "Fairness--the absence of unjustified bias--is a core principle in the\ndevelopment of Artificial Intelligence (AI) systems, yet it remains difficult\nto assess and enforce. Current approaches to fairness testing in large language\nmodels (LLMs) often rely on manual evaluation, fixed templates, deterministic\nheuristics, and curated datasets, making them resource-intensive and difficult\nto scale. This work aims to lay the groundwork for a novel, automated method\nfor testing fairness in LLMs, reducing the dependence on domain-specific\nresources and broadening the applicability of current approaches. Our approach,\nMeta-Fair, is based on two key ideas. First, we adopt metamorphic testing to\nuncover bias by examining how model outputs vary in response to controlled\nmodifications of input prompts, defined by metamorphic relations (MRs). Second,\nwe propose exploiting the potential of LLMs for both test case generation and\noutput evaluation, leveraging their capability to generate diverse inputs and\nclassify outputs effectively. The proposal is complemented by three open-source\ntools supporting LLM-driven generation, execution, and evaluation of test\ncases. We report the findings of several experiments involving 12 pre-trained\nLLMs, 14 MRs, 5 bias dimensions, and 7.9K automatically generated test cases.\nThe results show that Meta-Fair is effective in uncovering bias in LLMs,\nachieving an average precision of 92% and revealing biased behaviour in 29% of\nexecutions. Additionally, LLMs prove to be reliable and consistent evaluators,\nwith the best-performing models achieving F1-scores of up to 0.79. Although\nnon-determinism affects consistency, these effects can be mitigated through\ncareful MR design. While challenges remain to ensure broader applicability, the\nresults indicate a promising path towards an unprecedented level of automation\nin LLM testing.", "AI": {"tldr": "Meta-Fair is a novel, automated framework for testing fairness in large language models by using metamorphic testing and the LLMs themselves for test generation and evaluation. It increases effectiveness and scalability of bias detection, showing high precision and reliable evaluation performance across various dimensions of bias, with some remaining challenges in generalizability and consistency.", "motivation": "Assessing and enforcing fairness in AI systems, particularly large language models (LLMs), is crucial but challenging due to the resource-intensive and non-scalable nature of current fairness testing methods, which rely on manual evaluation and curated datasets.", "method": "The proposed method, Meta-Fair, uses: (1) metamorphic testing, which examines the consistency of model outputs when input prompts are systematically modified via defined metamorphic relations (MRs); and (2) leverages LLMs themselves for automated test case generation and output evaluation. The approach is implemented with three open-source tools for test generation, execution, and evaluation.", "result": "Experiments involving 12 pre-trained LLMs, 14 MRs, 5 bias dimensions, and 7,900 automatically generated test cases showed that Meta-Fair effectively uncovers bias in LLMs, with an average precision of 92% and biased behavior detected in 29% of executions. LLMs demonstrated reliable evaluation performance, with top models reaching F1-scores up to 0.79. Non-determinism impacts consistency but can be controlled by careful MR design.", "conclusion": "Meta-Fair demonstrates a promising automated approach to fairness testing in LLMs, reducing the need for manual intervention and domain-specific resources while effectively identifying biases. Some challenges remain in ensuring consistent and broad applicability."}}
{"id": "2507.02564", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02564", "abs": "https://arxiv.org/abs/2507.02564", "authors": ["Alexander Korn", "Samuel Gorsch", "Andreas Vogelsang"], "title": "LLMREI: Automating Requirements Elicitation Interviews with LLMs", "comment": null, "summary": "Requirements elicitation interviews are crucial for gathering system\nrequirements but heavily depend on skilled analysts, making them\nresource-intensive, susceptible to human biases, and prone to miscommunication.\nRecent advancements in Large Language Models present new opportunities for\nautomating parts of this process. This study introduces LLMREI, a chat bot\ndesigned to conduct requirements elicitation interviews with minimal human\nintervention, aiming to reduce common interviewer errors and improve the\nscalability of requirements elicitation. We explored two main approaches,\nzero-shot prompting and least-to-most prompting, to optimize LLMREI for\nrequirements elicitation and evaluated its performance in 33 simulated\nstakeholder interviews. A third approach, fine-tuning, was initially considered\nbut abandoned due to poor performance in preliminary trials. Our study assesses\nthe chat bot's effectiveness in three key areas: minimizing common interview\nerrors, extracting relevant requirements, and adapting its questioning based on\ninterview context and user responses. Our findings indicate that LLMREI makes a\nsimilar number of errors compared to human interviewers, is capable of\nextracting a large portion of requirements, and demonstrates a notable ability\nto generate highly context-dependent questions. We envision the greatest\nbenefit of LLMREI in automating interviews with a large number of stakeholders.", "AI": {"tldr": "The paper introduces LLMREI, a chatbot for automating requirements elicitation interviews. Using zero-shot and least-to-most prompting (not fine-tuning), it performs comparably to humans in error rates, requirement extraction, and context adaptation, with greatest value in large-scale interview scenarios.", "motivation": "Requirements elicitation interviews are essential in gathering system requirements but are resource-intensive, subject to human biases, and prone to miscommunication. Automating parts of this process could improve efficiency and reliability.", "method": "The study introduces LLMREI, a chatbot designed to conduct requirements elicitation interviews with minimal human intervention. It evaluates two main approaches: zero-shot prompting and least-to-most prompting, in 33 simulated stakeholder interviews. Fine-tuning was abandoned due to poor preliminary performance. The effectiveness of LLMREI was assessed on minimizing interviewer errors, extracting relevant requirements, and adapting to context and responses.", "result": "LLMREI made a similar number of errors as human interviewers, extracted a large portion of requirements, and showed a strong ability to adapt its questions contextually.", "conclusion": "LLMREI has potential to automate requirements elicitation interviews effectively, especially when conducting interviews with many stakeholders. It can reduce common interviewer errors and improve scalability, despite making a similar number of errors as humans."}}
{"id": "2507.02578", "categories": ["cs.SE", "cs.HC", "D.2.1"], "pdf": "https://arxiv.org/pdf/2507.02578", "abs": "https://arxiv.org/abs/2507.02578", "authors": ["Zoe Pfister"], "title": "Human-Machine Collaboration and Ethical Considerations in Adaptive Cyber-Physical Systems", "comment": "Copyright 2025 IEEE. Accepted for publication in: 2025 IEEE 33nd\n  International Requirements Engineering Conference (RE), Doctor Symposium\n  Paper, 5 pages", "summary": "Adaptive Cyber-Physical Systems (CPS) are systems that integrate both\nphysical and computational capabilities, which can adjust in response to\nchanging parameters. Furthermore, they increasingly incorporate human-machine\ncollaboration, allowing them to benefit from the individual strengths of humans\nand machines. Human-Machine Teaming (HMT) represents the most advanced paradigm\nof human-machine collaboration, envisioning seamless teamwork between humans\nand machines. However, achieving effective and seamless HMT in adaptive CPS is\nchallenging. While adaptive CPS already benefit from feedback loops such as\nMAPE-K, there is still a gap in integrating humans into these feedback loops\ndue to different operational cadences of humans and machines. Further, HMT\nrequires constant monitoring of human operators, collecting potentially\nsensitive information about their actions and behavior. Respecting the privacy\nand human values of the actors of the CPS is crucial for the success of\nhuman-machine teams. This research addresses these challenges by: (1)\ndeveloping novel methods and processes for integrating HMT into adaptive CPS,\nfocusing on human-machine interaction principles and their incorporation into\nadaptive feedback loops found in CPS, and (2) creating frameworks for\nintegrating, verifying, and validating ethics and human values throughout the\nsystem lifecycle, starting from requirements engineering.", "AI": {"tldr": "This paper proposes solutions for integrating human-machine teamwork more naturally and ethically into adaptive cyber-physical systems by developing new interaction mechanisms and frameworks that ensure respect for human values from the earliest stages of system development.", "motivation": "The motivation behind this paper is to enhance the efficiency and effectiveness of adaptive Cyber-Physical Systems (CPS) by seamlessly integrating Human-Machine Teaming (HMT), while addressing the challenges related to differing operational cadences between humans and machines and respecting human privacy and values.", "method": "The paper proposes to (1) develop novel methods and processes for integrating HMT into adaptive CPS, emphasizing human-machine interaction and adapting feedback loops, and (2) design frameworks for verifying and validating ethics and human values throughout the system lifecycle, starting from requirements engineering.", "result": "The main expected results include new methods and processes to better integrate HMT into adaptive CPS feedback loops, and comprehensive frameworks that ensure ethics and human values are embedded into the systems from their inception and throughout their operation.", "conclusion": "By addressing integration and ethical challenges, the research aims to advance the state-of-the-art in adaptive CPS by enabling truly collaborative and ethically-aligned human-machine teams."}}
{"id": "2507.02665", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02665", "abs": "https://arxiv.org/abs/2507.02665", "authors": ["Timo Kehrer", "Robert Haines", "Guido Juckeland", "Shurui Zhou", "David E. Bernholdt"], "title": "Do Research Software Engineers and Software Engineering Researchers Speak the Same Language?", "comment": "Early access journal version: T. Kehrer, R. Haines, G. Juckeland, S.\n  Zhou and D. E. Bernholdt, \"Do Research Software Engineers and Software\n  Engineering Researchers Speak the Same Language?,\" in Computing in Science &\n  Engineering, doi: 10.1109/MCSE.2025.3557236", "summary": "Anecdotal evidence suggests that Research Software Engineers (RSEs) and\nSoftware Engineering Researchers (SERs) often use different terminologies for\nsimilar concepts, creating communication challenges. To better understand these\ndivergences, we have started investigating how SE fundamentals from the SER\ncommunity are interpreted within the RSE community, identifying aligned\nconcepts, knowledge gaps, and areas for potential adaptation. Our preliminary\nfindings reveal opportunities for mutual learning and collaboration, and our\nsystematic methodology for terminology mapping provides a foundation for a\ncrowd-sourced extension and validation in the future.", "AI": {"tldr": "This paper explores the communication challenges caused by differing terminologies between RSEs and SERs, presenting a methodology to map and align concepts for enhanced mutual understanding and collaboration.", "motivation": "There are communication challenges between Research Software Engineers (RSEs) and Software Engineering Researchers (SERs) due to the use of different terminologies for similar concepts.", "method": "The authors conducted an investigation into how fundamental software engineering concepts from the SER community are interpreted within the RSE community. They used a systematic terminology mapping methodology to identify aligned concepts, knowledge gaps, and potential areas for adapting terminology.", "result": "Preliminary findings reveal opportunities for mutual learning and collaboration between RSEs and SERs. The methodology provides a foundation for future crowd-sourced extension and validation of the terminology mapping.", "conclusion": "The systematic mapping and comparison of terminology between RSE and SER communities helps identify overlaps, gaps, and opportunities for collaboration, offering a path towards improving cross-community understanding and cooperation."}}
{"id": "2507.02690", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.02690", "abs": "https://arxiv.org/abs/2507.02690", "authors": ["Jiaxing Wang", "Yifeng Yu", "Jiahan Song", "Bin Cao", "Jing Fan", "Ji Zhang"], "title": "RLHGNN: Reinforcement Learning-driven Heterogeneous Graph Neural Network for Next Activity Prediction in Business Processes", "comment": "15 pages, 7 figures. Business process prediction using reinforcement\n  learning and heterogeneous graph neural networks", "summary": "Next activity prediction represents a fundamental challenge for optimizing\nbusiness processes in service-oriented architectures such as microservices\nenvironments, distributed enterprise systems, and cloud-native platforms, which\nenables proactive resource allocation and dynamic service composition. Despite\nthe prevalence of sequence-based methods, these approaches fail to capture\nnon-sequential relationships that arise from parallel executions and\nconditional dependencies. Even though graph-based approaches address structural\npreservation, they suffer from homogeneous representations and static\nstructures that apply uniform modeling strategies regardless of individual\nprocess complexity characteristics. To address these limitations, we introduce\nRLHGNN, a novel framework that transforms event logs into heterogeneous process\ngraphs with three distinct edge types grounded in established process mining\ntheory. Our approach creates four flexible graph structures by selectively\ncombining these edges to accommodate different process complexities, and\nemploys reinforcement learning formulated as a Markov Decision Process to\nautomatically determine the optimal graph structure for each specific process\ninstance. RLHGNN then applies heterogeneous graph convolution with\nrelation-specific aggregation strategies to effectively predict the next\nactivity. This adaptive methodology enables precise modeling of both sequential\nand non-sequential relationships in service interactions. Comprehensive\nevaluation on six real-world datasets demonstrates that RLHGNN consistently\noutperforms state-of-the-art approaches. Furthermore, it maintains an inference\nlatency of approximately 1 ms per prediction, representing a highly practical\nsolution suitable for real-time business process monitoring applications. The\nsource code is available at https://github.com/Joker3993/RLHGNN.", "AI": {"tldr": "Existing sequential and graph-based methods struggle with complex business process activity prediction. RLHGNN addresses this by adaptively generating heterogeneous graph structures with reinforcement learning from event logs, achieving superior prediction accuracy and real-time performance on diverse datasets.", "motivation": "Next activity prediction is crucial for optimizing business processes in modern service architectures, but existing sequence-based and graph-based methods have significant limitations in representing complex, real-world process interactions, particularly parallelism and conditional dependencies.", "method": "The authors propose RLHGNN, a framework that transforms event logs into heterogeneous process graphs with three edge types (based on process mining theory). It generates four flexible graph structures by combining these edges and uses reinforcement learning (formulated as a Markov Decision Process) to select the optimal structure for each process instance. Then, heterogeneous graph convolution with relation-specific aggregation predicts the next activity.", "result": "Comprehensive evaluation on six real-world datasets shows that RLHGNN consistently outperforms current state-of-the-art methods, with an inference latency of roughly 1 ms per prediction, making it suitable for real-time monitoring.", "conclusion": "RLHGNN offers a robust, adaptive, and efficient solution for next activity prediction in complex business process environments, effectively modeling both sequential and non-sequential relationships and enabling real-time deployment."}}
{"id": "2507.02695", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02695", "abs": "https://arxiv.org/abs/2507.02695", "authors": ["Sahar Ahmadisakha", "Lech Bialek", "Mohamed Soliman", "Vasilios Andrikopoulos"], "title": "Sustainability Flags for the Identification of Sustainability Posts in Q&A Platforms", "comment": null, "summary": "In recent years, sustainability in software systems has gained significant\nattention, especially with the rise of cloud computing and the shift towards\ncloud-based architectures. This shift has intensified the need to identify\nsustainability in architectural discussions to take informed architectural\ndecisions. One source to see these decisions is in online Q&A forums among\npractitioners' discussions. However, recognizing sustainability concepts within\nsoftware practitioners' discussions remains challenging due to the lack of\nclear and distinct guidelines for this task. To address this issue, we\nintroduce the notion of sustainability flags as pointers in relevant\ndiscussions, developed through thematic analysis of multiple sustainability\nbest practices from cloud providers. This study further evaluates the\neffectiveness of these flags in identifying sustainability within cloud\narchitecture posts, using a controlled experiment. Preliminary results suggest\nthat the use of flags results in classifying fewer posts as\nsustainability-related compared to a control group, with moderately higher\ncertainty and significantly improved performance. Moreover, sustainability\nflags are perceived as more useful and understandable than relying solely on\ndefinitions for identifying sustainability.", "AI": {"tldr": "The paper proposes 'sustainability flags' to help identify sustainability in cloud architecture discussions. Experiments show these flags improve identification accuracy and are seen as more practical than relying on definitions alone.", "motivation": "As sustainability becomes increasingly important in software and especially cloud-based systems, it is crucial to identify sustainability considerations in architectural decisions. However, current discussions among practitioners, such as those on Q&A forums, lack clear ways to pinpoint sustainability topics.", "method": "The authors introduce 'sustainability flags'\u2014indicators developed from thematic analyses of best practices among cloud providers\u2014to highlight sustainability-related content in software architecture discussions. They evaluate the usefulness of these flags in a controlled experiment.", "result": "Preliminary findings show that using sustainability flags helps participants classify fewer posts as sustainability-related but with greater certainty and much better performance compared to a control group. Additionally, users find these flags more helpful and easier to understand than standalone definitions of sustainability.", "conclusion": "Sustainability flags are effective tools for helping practitioners identify sustainability topics in cloud architecture discussions. They lead to more precise classification and are perceived as more practical and comprehensible than abstract definitions."}}
{"id": "2507.02846", "categories": ["cs.SE", "cs.CL"], "pdf": "https://arxiv.org/pdf/2507.02846", "abs": "https://arxiv.org/abs/2507.02846", "authors": ["Anmol Singhal", "Travis Breaux"], "title": "Legal Requirements Translation from Law", "comment": "13 pages, 7 figures, Accepted at the 33rd IEEE International\n  Requirements Engineering 2025", "summary": "Software systems must comply with legal regulations, which is a\nresource-intensive task, particularly for small organizations and startups\nlacking dedicated legal expertise. Extracting metadata from regulations to\nelicit legal requirements for software is a critical step to ensure compliance.\nHowever, it is a cumbersome task due to the length and complex nature of legal\ntext. Although prior work has pursued automated methods for extracting\nstructural and semantic metadata from legal text, key limitations remain: they\ndo not consider the interplay and interrelationships among attributes\nassociated with these metadata types, and they rely on manual labeling or\nheuristic-driven machine learning, which does not generalize well to new\ndocuments. In this paper, we introduce an approach based on textual entailment\nand in-context learning for automatically generating a canonical representation\nof legal text, encodable and executable as Python code. Our representation is\ninstantiated from a manually designed Python class structure that serves as a\ndomain-specific metamodel, capturing both structural and semantic legal\nmetadata and their interrelationships. This design choice reduces the need for\nlarge, manually labeled datasets and enhances applicability to unseen\nlegislation. We evaluate our approach on 13 U.S. state data breach notification\nlaws, demonstrating that our generated representations pass approximately 89.4%\nof test cases and achieve a precision and recall of 82.2 and 88.7,\nrespectively.", "AI": {"tldr": "The paper presents an automated approach for translating complex legal texts into executable Python representations using textual entailment and in-context learning. This reduces manual effort, improves handling of metadata relationships, and demonstrates strong accuracy and generalization in legal compliance tasks.", "motivation": "Ensuring software systems comply with legal regulations is challenging and resource-intensive, especially for small companies lacking legal expertise. Extracting legal requirements from lengthy, complex legal documents is a particularly difficult step that existing automated solutions handle poorly, especially in terms of capturing relationships between metadata and generalizing to new laws.", "method": "The authors propose an automated approach using textual entailment and in-context learning to generate canonical, executable Python representations of legal text. This method is grounded in a manually designed Python class structure (a metamodel) that captures both structural and semantic metadata as well as their interrelationships, minimizing the need for large amounts of manual labeling.", "result": "The approach was applied to 13 U.S. state data breach notification laws, with the generated Python representations passing 89.4% of test cases and achieving 82.2 precision and 88.7 recall, indicating strong performance and generalizability.", "conclusion": "The proposed method effectively reduces manual effort required to extract legal requirements, improves generalizability to new legislation, and provides high-accuracy, executable representations of legal regulations, thereby supporting software compliance in resource-constrained organizations."}}
{"id": "2507.02858", "categories": ["cs.SE", "cs.CL"], "pdf": "https://arxiv.org/pdf/2507.02858", "abs": "https://arxiv.org/abs/2507.02858", "authors": ["Yuchen Shen", "Anmol Singhal", "Travis Breaux"], "title": "Requirements Elicitation Follow-Up Question Generation", "comment": "13 pages, 2 figures, accepted at the 33rd IEEE International\n  Requirements Engineering 2025", "summary": "Interviews are a widely used technique in eliciting requirements to gather\nstakeholder needs, preferences, and expectations for a software system.\nEffective interviewing requires skilled interviewers to formulate appropriate\ninterview questions in real time while facing multiple challenges, including\nlack of familiarity with the domain, excessive cognitive load, and information\noverload that hinders how humans process stakeholders' speech. Recently, large\nlanguage models (LLMs) have exhibited state-of-the-art performance in multiple\nnatural language processing tasks, including text summarization and entailment.\nTo support interviewers, we investigate the application of GPT-4o to generate\nfollow-up interview questions during requirements elicitation by building on a\nframework of common interviewer mistake types. In addition, we describe methods\nto generate questions based on interviewee speech. We report a controlled\nexperiment to evaluate LLM-generated and human-authored questions with minimal\nguidance, and a second controlled experiment to evaluate the LLM-generated\nquestions when generation is guided by interviewer mistake types. Our findings\ndemonstrate that, for both experiments, the LLM-generated questions are no\nworse than the human-authored questions with respect to clarity, relevancy, and\ninformativeness. In addition, LLM-generated questions outperform human-authored\nquestions when guided by common mistakes types. This highlights the potential\nof using LLMs to help interviewers improve the quality and ease of requirements\nelicitation interviews in real time.", "AI": {"tldr": "Using GPT-4o to generate follow-up questions in requirements elicitation interviews yields questions that are as good or better than those written by humans, especially when guided by common mistakes, suggesting LLMs can improve the interview process.", "motivation": "Interviewing is a critical technique in software requirements elicitation, but conducting effective interviews is challenging due to real-time question formulation, domain unfamiliarity, cognitive load, and information overload. Leveraging recent advances in large language models (LLMs), this paper explores how AI can assist interviewers.", "method": "The authors apply GPT-4o, a state-of-the-art large language model, to generate follow-up interview questions during requirements elicitation. They use a framework of common interviewer mistakes and develop methods to generate questions based on interviewee speech. The approach is evaluated through two controlled experiments: one comparing LLM- and human-generated questions with minimal guidance, and another where LLM question generation is guided by interviewer mistake types.", "result": "The experiments show that LLM-generated questions are at least as clear, relevant, and informative as human-authored questions. Furthermore, when LLMs are guided by common mistake types, their questions actually outperform human-generated ones in these metrics.", "conclusion": "LLMs like GPT-4o can effectively assist interviewers by generating high-quality, real-time follow-up questions during requirements elicitation interviews, potentially enhancing interview quality and reducing interviewer burden."}}
