{"id": "2507.02068", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02068", "abs": "https://arxiv.org/abs/2507.02068", "authors": ["Brian Bell", "Teresa Thomas", "Sang Won Lee", "Chris Brown"], "title": "How do Software Engineering Candidates Prepare for Technical Interviews?", "comment": null, "summary": "To obtain employment, aspiring software engineers must complete technical\ninterviews -- a hiring process which involves candidates writing code while\ncommunicating to an audience. However, the complexities of tech interviews are\ndifficult to prepare for and seldom faced in computing curricula. To this end,\nwe seek to understand how candidates prepare for technical interviews,\ninvestigating the effects of preparation methods and the role of education. We\ndistributed a survey to candidates (n = 131) actively preparing for technical\ninterviews. Our results suggest candidates rarely train in authentic settings\nand courses fail to support preparation efforts -- leading to stress and\nunpreparedness. Based on our findings, we provide implications for stakeholders\nto enhance tech interview preparation for candidates pursuing software\nengineering roles.", "AI": {"tldr": "Most software engineering candidates feel unprepared and stressed for technical interviews due to lack of authentic practice and insufficient curricular support, highlighting a need for educational enhancements.", "motivation": "There is a gap between the requirements of technical interviews for software engineering roles and the training provided by computing curricula, making the process challenging and stressful for candidates.", "method": "A survey was distributed to 131 candidates actively preparing for technical interviews to gather data about their preparation methods and perceptions regarding the support offered by education.", "result": "Candidates typically do not practice interview skills in realistic, authentic contexts, and formal courses provide minimal support, resulting in poor preparation and high anxiety.", "conclusion": "Courses and traditional computing curricula do not adequately prepare candidates for the unique challenges of technical interviews, leading to feelings of stress and unpreparedness among job seekers."}}
{"id": "2507.02107", "categories": ["cs.SE", "cs.PL"], "pdf": "https://arxiv.org/pdf/2507.02107", "abs": "https://arxiv.org/abs/2507.02107", "authors": ["Ben Limpanukorn", "Yanjun Wang", "Zach Patterson", "Pranav Garg", "Murali Krishna Ramanathan", "Xiaofei Ma", "Anoop Deoras", "Miryung Kim"], "title": "Structural Code Search using Natural Language Queries", "comment": null, "summary": "Searching code is a common task that developers perform to understand APIs,\nlearn common code patterns, and navigate code. Currently, developers most\ncommonly search using keywords and regular expressions that are easy to use and\nwidely available. Beyond keywords and regular expressions, structural code\nsearch tools allow developers to search for code based on its syntactic\nstructure. This has numerous applications ranging from bug finding to\nsystematically refactoring code. However, these structural code search tools\noperate on queries expressed in domain-specific languages (DSL) that can be\ndifficult to learn and write. We propose to allow developers to use natural\nlanguage to search for code structurally. Expressing queries in natural\nlanguage provides an intuitive way to search for code and lowers the barrier to\nentry.\n  In this work, we develop a novel general approach that combines the reasoning\ncapabilities of an LLM to interpret natural language search queries with the\npower of structural search tools to efficiently and accurately retrieve\nrelevant code. We then instantiate this approach for two structural code search\nDSLs: Semgrep and GQL. In our evaluation, we construct a new benchmark for\nstructural code search consisting of 400 queries over 10 Java projects. We show\nthat our approach for structural code search based on translating NL queries to\nDSL queries using an LLM is effective and robust, achieving a high precision\nand recall ranging from 55% - 70%. Further, our approach significantly\noutperforms baselines based on semantic code search and LLM retrievals by up to\n57% and 14% on F1 scores.", "AI": {"tldr": "This paper presents a method for using natural language to search code structurally by translating queries through a large language model. It improves both accessibility and effectiveness in code search, outperforming existing techniques on multiple benchmarks.", "motivation": "Developers often need to search code for understanding APIs, finding patterns, or refactoring. While structural code search is powerful, its reliance on domain-specific languages (DSLs) makes it inaccessible to many. Using natural language would make code search more intuitive and lower barriers to use.", "method": "The authors introduce an approach that uses a large language model (LLM) to translate natural language (NL) queries into structural search DSL queries, specifically for Semgrep and GQL tools. They benchmark this method using 400 queries across 10 Java projects, comparing it with traditional semantic code search and direct LLM retrievals.", "result": "The proposed method achieves high precision and recall (55%-70%), and it outperforms semantic code search and direct LLM retrievals, with up to 57% and 14% improvements in F1 score, respectively.", "conclusion": "Translating natural language code search queries into structural DSL queries via LLMs is both effective and efficient, surpassing existing methods and making structural code search more accessible."}}
{"id": "2507.02110", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02110", "abs": "https://arxiv.org/abs/2507.02110", "authors": ["Md Nahidul Islam Opu", "Fatima Islam Mouri", "Rick Kazman", "Yuanfang Cai", "Shaiful Chowdhury"], "title": "Can Internal Software Metrics Predict App Popularity at Launch? Yeas! and Nays!", "comment": null, "summary": "Predicting mobile app popularity before release can provide developers with a\nstrategic advantage in a competitive marketplace, yet it remains a challenging\nproblem. This study explores whether internal software metrics, measurable from\nsource code before deployment, can predict an app's popularity, defined by user\nratings (calculated from user reviews) and DownloadsPerYear (yearly downloads).\nUsing a dataset of 446 open-source Android apps from F-Droid, we extract a wide\narray of features, including system-, class-, and method-level code metrics,\ncode smells, and app metadata. Additional information, such as user reviews,\ndownload counts, and uses-permission, was collected from the Google Play Store.\nWe evaluate regression and classification models across three feature sets: a\nminimal Size-only baseline, a domain-informed Handpicked set, and a Voting set\nderived via feature selection algorithms. Regression models perform poorly due\nto skewed data, with low $R^2$ scores. However, when reframed as binary\nclassification (Popular vs. Unpopular), results improve significantly. The best\nmodel, a Multilayer Perceptron using the Voting set, achieves F1-scores of\n0.72. These results suggest that internal code metrics, although limited in\ntheir explanatory power, can serve as useful indicators of app popularity. This\nchallenges earlier findings that dismissed internal metrics as predictors of\nsoftware quality.", "AI": {"tldr": "By applying ML models to code metrics and metadata from pre-release Android apps, the study finds that classification models can reasonably predict app popularity, overturning past doubts about the predictive value of internal metrics.", "motivation": "Predicting mobile app popularity before release can give developers a strategic advantage, but methods to achieve this are not well-established. Previous work generally dismissed internal code metrics as useful predictors.", "method": "Collected internal code metrics and metadata from 446 open-source Android apps, augmented with Play Store data. Evaluated various regression and classification models using different feature sets: Size-only, Handpicked, and Voting feature selection.", "result": "Regression models using these features performed poorly due to skewed data distribution, but binary classification into Popular vs. Unpopular worked notably better. The best model (Multilayer Perceptron with Voting set features) achieved an F1-score of 0.72, showing internal code metrics have predictive value.", "conclusion": "Internal code metrics, despite previous skepticism, can help indicate app popularity in a classification setting, though their explanatory power is limited."}}
{"id": "2507.02226", "categories": ["cs.PL", "cs.AR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.02226", "abs": "https://arxiv.org/abs/2507.02226", "authors": ["Mohammad Akyash", "Kimia Azar", "Hadi Kamali"], "title": "DecoRTL: A Run-time Decoding Framework for RTL Code Generation with LLMs", "comment": "Accepted to the International Conference on Computer-Aided Design\n  (ICCAD 2025)", "summary": "As one of their many applications, large language models (LLMs) have recently\nshown promise in automating register transfer level (RTL) code generation.\nHowever, conventional LLM decoding strategies, originally designed for natural\nlanguage, often fail to meet the structural and semantic demands of RTL,\nleading to hallucinated, repetitive, or invalid code outputs. In this paper, we\nfirst investigate the root causes of these decoding failures through an\nempirical analysis of token-level entropy during RTL generation. Our findings\nreveal that LLMs exhibit low confidence in regions of structural ambiguity or\nsemantic complexity, showing that standard decoding strategies fail to\ndifferentiate between regions requiring determinism (syntax-critical regions)\nand those that benefit from creative exploratory variability (design-critical\nregions). Then, to overcome this, we introduce DecoRTL, a novel run-time\ndecoding strategy, that is both syntax-aware and contrastive for RTL code\ngeneration. DecoRTL integrates two complementary components: (i)\nself-consistency sampling, which generates multiple candidates and re-ranks\nthem based on token-level agreement to promote correctness while maintaining\ndiversity; and (ii) syntax-aware temperature adaptation, which classifies\ntokens by their syntactical and functional roles and adjusts the sampling\ntemperature accordingly, enforcing low temperature for syntax-critical tokens\nand higher temperature for exploratory ones. Our approach operates entirely at\ninference time without requiring any additional model fine-tuning. Through\nevaluations on multiple open-source LLMs using the VerilogEval benchmark, we\ndemonstrate significant improvements in syntactic validity, functional\ncorrectness, and output diversity, while the execution overhead (performance\noverhead) is imperceptible.", "AI": {"tldr": "Conventional LLM decoding methods struggle with RTL code generation due to structural and semantic challenges. This paper introduces DecoRTL, a syntax-aware, contrastive decoding strategy that dynamically adapts token sampling. DecoRTL significantly improves correctness and diversity of RTL outputs without fine-tuning or sacrificing performance.", "motivation": "Large language models (LLMs) have shown capability in automating RTL (register transfer level) code generation, but conventional decoding strategies, designed for natural language, frequently produce code that is hallucinated, repetitive, or structurally invalid. The motivation is to address these generation failures and adapt LLM decoding for the unique requirements of RTL code.", "method": "The authors conduct empirical analysis of token-level entropy in RTL code generation to identify decoding failures. They then propose DecoRTL, a novel decoding approach that operates during inference. DecoRTL features (i) self-consistency sampling: generating and re-ranking multiple output candidates based on token-level agreement; (ii) syntax-aware temperature adaptation: dynamically adjusting the sampling temperature based on the syntactic and functional role of tokens to ensure determinism for syntax-critical parts and creativity for design-critical parts.", "result": "DecoRTL, tested on multiple open-source LLMs with the VerilogEval benchmark, achieves notable improvements in syntactic validity, functional correctness, and diversity of generated RTL code, all with negligible performance overhead and without requiring model fine-tuning.", "conclusion": "Adapting decoding strategies for the unique structure and requirements of RTL code is crucial for LLM-based code generation. DecoRTL effectively addresses common failure modes of existing decoding methods and improves both the syntax and function of generated output with minimal cost."}}
{"id": "2507.02118", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02118", "abs": "https://arxiv.org/abs/2507.02118", "authors": ["Cristina Martinez Montes", "Daniela Grassi", "Nicole Novielli", "Birgit Penzenstadle"], "title": "A Multimodal Approach Combining Biometrics and Self-Report Instruments for Monitoring Stress in Programming: Methodological Insights", "comment": null, "summary": "The study of well-being, stress and other human factors has traditionally\nrelied on self-report instruments to assess key variables. However, concerns\nabout potential biases in these instruments, even when thoroughly validated and\nstandardised, have driven growing interest in alternatives in combining these\nmeasures with more objective methods, such as physiological measures.\n  We aimed to (i) compare psychometric stress measures and biometric indicators\nand (ii) identify stress-related patterns in biometric data during software\nengineering tasks.\n  We conducted an experiment where participants completed a pre-survey, then\nprogrammed two tasks wearing biometric sensors, answered brief post-surveys for\neach, and finally went through a short exit interview.\n  Our results showed diverse outcomes; we found no stress in the psychometric\ninstruments. Participants in the interviews reported a mix of feeling no stress\nand experiencing time pressure. Finally, the biometrics showed a significant\ndifference only in EDA phasic peaks.\n  We conclude that our chosen way of inducing stress by imposing a stricter\ntime limit was insufficient. We offer methodological insights for future\nstudies working with stress, biometrics, and psychometric instruments.", "AI": {"tldr": "Self-reports, interviews, and biometrics (except for one EDA measure) found little evidence of stress from stricter time limits in programming tasks; future research should refine stress-induction methods and measurement combinations.", "motivation": "Traditional methods for studying well-being and stress rely heavily on self-report instruments, which can have biases despite validation. This has sparked interest in combining these with physiological (biometric) measures for a more objective view.", "method": "The authors conducted an experiment where participants completed a pre-survey, performed programming tasks under biometric monitoring, and completed post-task surveys and an exit interview to compare psychometric (self-reported) and biometric (physiological) stress indicators.", "result": "Self-reported surveys indicated no stress, interviews revealed mixed experiences (no stress or only time pressure), and biometric data showed a significant difference only in EDA phasic peaks\u2014otherwise no strong biometric indicators of stress found.", "conclusion": "The method of stress induction (stricter time limit) was insufficient to elicit measurable stress. The study provides methodological recommendations for future research using stress-induction, psychometric, and biometric approaches."}}
{"id": "2507.02137", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02137", "abs": "https://arxiv.org/abs/2507.02137", "authors": ["Martin Obaidi", "Marc Herrmann", "Jil Kl\u00fcnder", "Kurt Schneider"], "title": "Towards Trustworthy Sentiment Analysis in Software Engineering: Dataset Characteristics and Tool Selection", "comment": "This paper has been accepted at the RETRAI workshop of the 33rd IEEE\n  International Requirements Engineering Conference (REW 2025)", "summary": "Software development relies heavily on text-based communication, making\nsentiment analysis a valuable tool for understanding team dynamics and\nsupporting trustworthy AI-driven analytics in requirements engineering.\nHowever, existing sentiment analysis tools often perform inconsistently across\ndatasets from different platforms, due to variations in communication style and\ncontent.\n  In this study, we analyze linguistic and statistical features of 10 developer\ncommunication datasets from five platforms and evaluate the performance of 14\nsentiment analysis tools. Based on these results, we propose a mapping approach\nand questionnaire that recommends suitable sentiment analysis tools for new\ndatasets, using their characteristic features as input.\n  Our results show that dataset characteristics can be leveraged to improve\ntool selection, as platforms differ substantially in both linguistic and\nstatistical properties. While transformer-based models such as SetFit and\nRoBERTa consistently achieve strong results, tool effectiveness remains\ncontext-dependent. Our approach supports researchers and practitioners in\nselecting trustworthy tools for sentiment analysis in software engineering,\nwhile highlighting the need for ongoing evaluation as communication contexts\nevolve.", "AI": {"tldr": "The paper finds that sentiment analysis tool performance varies across communication platforms in software engineering due to differences in dataset features. By analyzing 10 datasets and 14 tools, the authors develop a tool recommender based on dataset characteristics, improving sentiment analysis reliability. Transformer models perform well, but context remains crucial, and ongoing evaluation is recommended.", "motivation": "Software development teams communicate mostly via text, making sentiment analysis crucial for understanding team dynamics and ensuring reliable analytics. However, current sentiment analysis tools perform inconsistently on datasets from different platforms due to different communication styles and linguistic features.", "method": "The authors analyzed linguistic and statistical features from 10 developer communication datasets spanning five platforms. They then evaluated 14 sentiment analysis tools on these datasets, and developed a mapping approach and accompanying questionnaire to recommend suitable tools for new datasets based on their specific characteristics.", "result": "Their findings reveal that differences in platform-specific linguistic and statistical features significantly affect the efficacy of sentiment analysis tools. Transformer-based models like SetFit and RoBERTa performed well overall, but optimal tool choice still depends on the specific context. The proposed approach helps users select appropriate sentiment analysis tools, emphasizing the importance of ongoing tool evaluation.", "conclusion": "Dataset characteristics are key to selecting effective sentiment analysis tools for software engineering contexts. A mapping-based recommendation system can guide researchers and practitioners towards more reliable sentiment analysis, but continuous assessment is necessary as communication evolves."}}
{"id": "2507.02182", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02182", "abs": "https://arxiv.org/abs/2507.02182", "authors": ["Fangjian Lei", "Jiawen Liu", "Shayan Noei", "Ying Zou", "Derek Truong", "William Alexander"], "title": "Enhancing COBOL Code Explanations: A Multi-Agents Approach Using Large Language Models", "comment": null, "summary": "Common Business Oriented Language (COBOL) is a programming language used to\ndevelop business applications that are widely adopted by financial, business,\nand government agencies. Due to its age, complexity, and declining number of\nCOBOL developers, maintaining COBOL codebases is becoming increasingly\nchallenging. In particular, the lack of documentation makes it difficult for\nnew developers to effectively understand and maintain COBOL systems. Existing\nresearch utilizes large language models (LLMs) to explain the functionality of\ncode snippets. However, COBOL presents unique challenges due to its\narchitectural and syntactical differences, which often cause its code to exceed\nthe token window size of LLMs. In this work, we propose a multi-agent approach\nthat leverages two LLM-based agents working collaboratively to generate\nexplanations for functions, files, and the overall project. These agents\nincorporate together by utilizing contextual information from the codebase into\nthe code explanation prompts. We evaluate the effectiveness of our approach\nusing 14 open-source, real-world COBOL projects. Our results indicate that our\napproach performs significantly better than the baseline in function code\nexplanation, with improvements of 12.67%, 18.59%, and 0.62% in terms of METEOR,\nchrF, and SentenceBERT scores, respectively. At the file level, our approach\neffectively explains both short and long COBOL files that exceed the token\nwindow size of LLMs and surpass the baseline by 4.21%, 10.72%, and 14.68% in\nexplaining the purpose, functionality, and clarity of the generated\nexplanation. At the project level, our approach generates explanations that\nconvey the functionality and purpose of 82% of the selected projects.", "AI": {"tldr": "A new multi-agent system using LLMs explains COBOL code more effectively, outperforming baselines and aiding maintainability, especially for large or poorly documented codebases.", "motivation": "COBOL remains critical for business, government, and financial systems, but its age, complexity, and the scarcity of COBOL developers pose challenges for maintenance, especially due to poor documentation. Existing code explanation techniques with LLMs are hindered by COBOL's unique syntax and length, exceeding typical LLM token windows.", "method": "The authors propose a novel multi-agent system using two LLM-based agents that collaborate to generate explanations at the function, file, and project levels. These agents share contextual information from across the codebase to improve explanation accuracy, specifically tailored to accommodate COBOL's architectural and syntactical challenges.", "result": "Tested on 14 open-source COBOL projects, the approach significantly outperforms the baseline in code explanation quality, with notable gains in METEOR, chrF, and SentenceBERT metrics for functions. At the file level, it effectively explains longer COBOL files, surpassing baseline explanations in purpose, functionality, and clarity. At the project level, 82% of projects received comprehensive explanations on functionality and purpose.", "conclusion": "The multi-agent LLM-based approach proves to be a superior solution for generating meaningful documentation and explanations for COBOL codebases, facilitating understanding and maintainability despite token window limitations and COBOL-specific challenges."}}
{"id": "2507.02318", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02318", "abs": "https://arxiv.org/abs/2507.02318", "authors": ["Chen Yang", "Ziqi Wang", "Yanjie Jiang", "Lin Yang", "Yuteng Zheng", "Jianyi Zhou", "Junjie Chen"], "title": "Precisely Detecting Python Type Errors via LLM-based Unit Test Generation", "comment": null, "summary": "Type errors in Python often lead to runtime failures, posing significant\nchallenges to software reliability and developer productivity. Existing static\nanalysis tools aim to detect such errors without execution but frequently\nsuffer from high false positive rates. Recently, unit test generation\ntechniques offer great promise in achieving high test coverage, but they often\nstruggle to produce bug-revealing tests without tailored guidance. To address\nthese limitations, we present RTED, a novel type-aware test generation\ntechnique for automatically detecting Python type errors. Specifically, RTED\ncombines step-by-step type constraint analysis with reflective validation to\nguide the test generation process and effectively suppress false positives. We\nevaluated RTED on two widely-used benchmarks, BugsInPy and TypeBugs.\nExperimental results show that RTED can detect 22-29 more benchmarked type\nerrors than four state-of-the-art techniques. RTED is also capable of producing\nfewer false positives, achieving an improvement of 173.9%-245.9% in precision.\nFurthermore, RTED successfully discovered 12 previously unknown type errors\nfrom six real-world open-source Python projects.", "AI": {"tldr": "RTED is a new Python type error detector that uses smart test generation and reduces false alarms. It finds more errors and fewer false positives than existing tools, even discovering new bugs in real projects.", "motivation": "Python's dynamic typing often leads to runtime type errors, which hurt software reliability and create productivity challenges for developers. Existing static analysis tools produce many false positives, and test generation approaches lack precise guidance, limiting their effectiveness at finding type errors.", "method": "The paper presents RTED, a novel test generation technique that is type-aware. RTED integrates step-by-step type constraint analysis with reflective validation to guide the unit test generation process. This combination helps focus test generation on revealing actual type errors while reducing false positives.", "result": "RTED was evaluated on the BugsInPy and TypeBugs benchmarks, showing it can detect 22-29 more type errors than four other state-of-the-art techniques. RTED achieves a 173.9%-245.9% improvement in precision (fewer false positives) and discovered 12 new type errors in real-world open-source Python projects.", "conclusion": "RTED effectively improves Python type error detection by integrating type constraint analysis and reflective validation, clearly outperforming previous approaches in both coverage and precision while even uncovering previously unknown real-world type errors."}}
{"id": "2507.02376", "categories": ["cs.SE", "cs.AI", "cs.DC"], "pdf": "https://arxiv.org/pdf/2507.02376", "abs": "https://arxiv.org/abs/2507.02376", "authors": ["Chung-ju Huang", "Ziqi Zhang", "Yinggui Wang", "Binghui Wang", "Tao Wei", "Leye Wang"], "title": "VeFIA: An Efficient Inference Auditing Framework for Vertical Federated Collaborative Software", "comment": null, "summary": "Vertical Federated Learning (VFL) is a distributed AI software deployment\nmechanism for cross-silo collaboration without accessing participants' data.\nHowever, existing VFL work lacks a mechanism to audit the execution correctness\nof the inference software of the data party. To address this problem, we design\na Vertical Federated Inference Auditing (VeFIA) framework. VeFIA helps the task\nparty to audit whether the data party's inference software is executed as\nexpected during large-scale inference without leaking the data privacy of the\ndata party or introducing additional latency to the inference system. The core\nof VeFIA is that the task party can use the inference results from a framework\nwith Trusted Execution Environments (TEE) and the coordinator to validate the\ncorrectness of the data party's computation results. VeFIA guarantees that, as\nlong as the abnormal inference exceeds 5.4%, the task party can detect\nexecution anomalies in the inference software with a probability of 99.99%,\nwithout incurring any additional online inference latency. VeFIA's random\nsampling validation achieves 100% positive predictive value, negative\npredictive value, and true positive rate in detecting abnormal inference. To\nthe best of our knowledge, this is the first paper to discuss the correctness\nof inference software execution in VFL.", "AI": {"tldr": "This paper introduces VeFIA, the first framework to audit execution correctness of inference software in VFL, ensuring privacy, zero additional latency, and highly accurate anomaly detection using TEEs and random sampling.", "motivation": "Existing Vertical Federated Learning (VFL) frameworks lack mechanisms to audit whether the inference software of a data party executes correctly, which can jeopardize trust without revealing private data.", "method": "The authors design and implement the Vertical Federated Inference Auditing (VeFIA) framework, which allows the task party to audit the correctness of the data party's inference software execution using Trusted Execution Environments (TEE) and a coordinator. The framework uses random sampling validation without revealing data or introducing additional latency.", "result": "VeFIA can detect execution anomalies in inference software with a probability of 99.99% if abnormal inference exceeds 5.4%, achieves 100% positive predictive value, negative predictive value, and true positive rate in detecting abnormal inference, and introduces no additional latency to the inference system.", "conclusion": "VeFIA is the first framework addressing the correctness of inference software execution in VFL, offering privacy-preserving, latency-free, and highly accurate auditing to foster trustworthy federated inference."}}
{"id": "2507.02533", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02533", "abs": "https://arxiv.org/abs/2507.02533", "authors": ["Miguel Romero-Arjona", "Jos\u00e9 A. Parejo", "Juan C. Alonso", "Ana B. S\u00e1nchez", "Aitor Arrieta", "Sergio Segura"], "title": "Meta-Fair: AI-Assisted Fairness Testing of Large Language Models", "comment": null, "summary": "Fairness--the absence of unjustified bias--is a core principle in the\ndevelopment of Artificial Intelligence (AI) systems, yet it remains difficult\nto assess and enforce. Current approaches to fairness testing in large language\nmodels (LLMs) often rely on manual evaluation, fixed templates, deterministic\nheuristics, and curated datasets, making them resource-intensive and difficult\nto scale. This work aims to lay the groundwork for a novel, automated method\nfor testing fairness in LLMs, reducing the dependence on domain-specific\nresources and broadening the applicability of current approaches. Our approach,\nMeta-Fair, is based on two key ideas. First, we adopt metamorphic testing to\nuncover bias by examining how model outputs vary in response to controlled\nmodifications of input prompts, defined by metamorphic relations (MRs). Second,\nwe propose exploiting the potential of LLMs for both test case generation and\noutput evaluation, leveraging their capability to generate diverse inputs and\nclassify outputs effectively. The proposal is complemented by three open-source\ntools supporting LLM-driven generation, execution, and evaluation of test\ncases. We report the findings of several experiments involving 12 pre-trained\nLLMs, 14 MRs, 5 bias dimensions, and 7.9K automatically generated test cases.\nThe results show that Meta-Fair is effective in uncovering bias in LLMs,\nachieving an average precision of 92% and revealing biased behaviour in 29% of\nexecutions. Additionally, LLMs prove to be reliable and consistent evaluators,\nwith the best-performing models achieving F1-scores of up to 0.79. Although\nnon-determinism affects consistency, these effects can be mitigated through\ncareful MR design. While challenges remain to ensure broader applicability, the\nresults indicate a promising path towards an unprecedented level of automation\nin LLM testing.", "AI": {"tldr": "Meta-Fair offers an automated, LLM-driven approach to fairness testing by using metamorphic relations and leveraging LLMs for both input generation and result evaluation. It is effective and scalable, achieving high precision and F1-scores in bias detection, indicating a promising direction for automated fairness assessment in LLMs.", "motivation": "Assessing and enforcing fairness in large language models (LLMs) is essential due to the risk of unjustified bias, but current testing methods are resource-intensive, manual, and difficult to scale across domains.", "method": "The paper introduces Meta-Fair, an automated method for fairness testing in LLMs. Meta-Fair uses metamorphic testing, where controlled prompt modifications (metamorphic relations) help unveil bias. It also harnesses LLMs themselves for both generating test cases and evaluating the outputs. Three open-source tools were developed to automate generation, execution, and evaluation of test cases. Experiments involved 12 LLMs, 14 MRs, 5 bias dimensions, and 7,900 automatically generated test cases.", "result": "Meta-Fair effectively uncovered bias in LLMs, achieving an average precision of 92% and detecting biased behavior in 29% of executions. LLMs also demonstrated reliability as output evaluators, with top models reaching F1-scores of 0.79. The impact of non-determinism can be minimized through careful MR design.", "conclusion": "The proposed Meta-Fair framework automates fairness testing in LLMs, significantly reducing manual labor and domain-specific dependence, while achieving high accuracy in bias detection. Some challenges remain, but this approach holds promise for scalable, robust fairness assessment in LLMs."}}
{"id": "2507.02564", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02564", "abs": "https://arxiv.org/abs/2507.02564", "authors": ["Alexander Korn", "Samuel Gorsch", "Andreas Vogelsang"], "title": "LLMREI: Automating Requirements Elicitation Interviews with LLMs", "comment": null, "summary": "Requirements elicitation interviews are crucial for gathering system\nrequirements but heavily depend on skilled analysts, making them\nresource-intensive, susceptible to human biases, and prone to miscommunication.\nRecent advancements in Large Language Models present new opportunities for\nautomating parts of this process. This study introduces LLMREI, a chat bot\ndesigned to conduct requirements elicitation interviews with minimal human\nintervention, aiming to reduce common interviewer errors and improve the\nscalability of requirements elicitation. We explored two main approaches,\nzero-shot prompting and least-to-most prompting, to optimize LLMREI for\nrequirements elicitation and evaluated its performance in 33 simulated\nstakeholder interviews. A third approach, fine-tuning, was initially considered\nbut abandoned due to poor performance in preliminary trials. Our study assesses\nthe chat bot's effectiveness in three key areas: minimizing common interview\nerrors, extracting relevant requirements, and adapting its questioning based on\ninterview context and user responses. Our findings indicate that LLMREI makes a\nsimilar number of errors compared to human interviewers, is capable of\nextracting a large portion of requirements, and demonstrates a notable ability\nto generate highly context-dependent questions. We envision the greatest\nbenefit of LLMREI in automating interviews with a large number of stakeholders.", "AI": {"tldr": "This paper presents LLMREI, a chatbot that automates the requirements elicitation process using advanced prompting techniques. It is as effective as human interviewers at avoiding errors and extracting requirements, and it offers scalable solutions for large-scale interviews.", "motivation": "Requirements elicitation interviews are essential but resource-intensive due to reliance on skilled human analysts. The process is prone to bias and miscommunication, motivating the need for more scalable, automated, and error-resistant solutions. Advances in Large Language Models (LLMs) offer new automation possibilities.", "method": "The authors introduce LLMREI, a chatbot for conducting requirements elicitation interviews with minimal human involvement. They explore zero-shot prompting and least-to-most prompting approaches to optimize the chatbot, evaluating its performance through 33 simulated stakeholder interviews. Fine-tuning was also considered but later dropped.", "result": "LLMREI performed similarly to humans regarding common interview errors, was effective at extracting a substantial amount of requirements, and showed strong adaptability by generating context-dependent questions. Fine-tuning did not yield satisfactory results.", "conclusion": "LLMREI can reduce interviewer errors, improve scalability, and automate requirements elicitation, with notable benefits in scenarios involving large numbers of stakeholders."}}
{"id": "2507.02578", "categories": ["cs.SE", "cs.HC", "D.2.1"], "pdf": "https://arxiv.org/pdf/2507.02578", "abs": "https://arxiv.org/abs/2507.02578", "authors": ["Zoe Pfister"], "title": "Human-Machine Collaboration and Ethical Considerations in Adaptive Cyber-Physical Systems", "comment": "Copyright 2025 IEEE. Accepted for publication in: 2025 IEEE 33nd\n  International Requirements Engineering Conference (RE), Doctor Symposium\n  Paper, 5 pages", "summary": "Adaptive Cyber-Physical Systems (CPS) are systems that integrate both\nphysical and computational capabilities, which can adjust in response to\nchanging parameters. Furthermore, they increasingly incorporate human-machine\ncollaboration, allowing them to benefit from the individual strengths of humans\nand machines. Human-Machine Teaming (HMT) represents the most advanced paradigm\nof human-machine collaboration, envisioning seamless teamwork between humans\nand machines. However, achieving effective and seamless HMT in adaptive CPS is\nchallenging. While adaptive CPS already benefit from feedback loops such as\nMAPE-K, there is still a gap in integrating humans into these feedback loops\ndue to different operational cadences of humans and machines. Further, HMT\nrequires constant monitoring of human operators, collecting potentially\nsensitive information about their actions and behavior. Respecting the privacy\nand human values of the actors of the CPS is crucial for the success of\nhuman-machine teams. This research addresses these challenges by: (1)\ndeveloping novel methods and processes for integrating HMT into adaptive CPS,\nfocusing on human-machine interaction principles and their incorporation into\nadaptive feedback loops found in CPS, and (2) creating frameworks for\nintegrating, verifying, and validating ethics and human values throughout the\nsystem lifecycle, starting from requirements engineering.", "AI": {"tldr": "This paper addresses the technical and ethical challenges of integrating advanced human-machine collaboration into adaptive cyber-physical systems by proposing new methods for seamless feedback loop integration and frameworks for embedding ethics and human values throughout system development.", "motivation": "Adaptive Cyber-Physical Systems (CPS) are increasingly incorporating Human-Machine Teaming (HMT) for enhanced collaboration, but current methods struggle to seamlessly integrate humans into adaptive feedback loops due to differing operational speeds and privacy concerns.", "method": "The research proposes the development of novel methods and processes for integrating HMT into adaptive CPS, focusing on improved human-machine interaction and adaptation mechanisms. It also aims to create frameworks for ensuring ethics and human values are embedded, verified, and validated across the system lifecycle, beginning with requirements engineering.", "result": "The paper develops new approaches for integrating HMT into CPS feedback loops and provides frameworks that systematically include and evaluate ethical and human value considerations during all phases of system development.", "conclusion": "Integrating advanced human-machine teaming into adaptive CPS requires both technical advancements in feedback integration and structured methods for respecting privacy and human values. The research delivers methods and frameworks to bridge these gaps and enable effective, ethical human-machine teams."}}
{"id": "2507.02665", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02665", "abs": "https://arxiv.org/abs/2507.02665", "authors": ["Timo Kehrer", "Robert Haines", "Guido Juckeland", "Shurui Zhou", "David E. Bernholdt"], "title": "Do Research Software Engineers and Software Engineering Researchers Speak the Same Language?", "comment": "Early access journal version: T. Kehrer, R. Haines, G. Juckeland, S.\n  Zhou and D. E. Bernholdt, \"Do Research Software Engineers and Software\n  Engineering Researchers Speak the Same Language?,\" in Computing in Science &\n  Engineering, doi: 10.1109/MCSE.2025.3557236", "summary": "Anecdotal evidence suggests that Research Software Engineers (RSEs) and\nSoftware Engineering Researchers (SERs) often use different terminologies for\nsimilar concepts, creating communication challenges. To better understand these\ndivergences, we have started investigating how SE fundamentals from the SER\ncommunity are interpreted within the RSE community, identifying aligned\nconcepts, knowledge gaps, and areas for potential adaptation. Our preliminary\nfindings reveal opportunities for mutual learning and collaboration, and our\nsystematic methodology for terminology mapping provides a foundation for a\ncrowd-sourced extension and validation in the future.", "AI": {"tldr": "The paper explores differences in terminology between RSEs and SERs, introduces a systematic mapping methodology, and finds areas for improved mutual understanding and collaboration, setting the stage for future community-driven enhancement.", "motivation": "There are observed communication challenges between Research Software Engineers (RSEs) and Software Engineering Researchers (SERs) due to the use of different terminologies for similar concepts. The motivation is to understand these differences, identify gaps, and foster better communication and collaboration.", "method": "The authors use a systematic methodology for mapping terminologies between the RSE and SER communities, aiming to analyze how SE fundamentals are interpreted and applied across both groups.", "result": "The preliminary findings highlight areas of alignment and knowledge gaps between the two communities, suggesting possibilities for mutual learning and collaborative improvement.", "conclusion": "This work lays the groundwork for future crowd-sourced efforts to extend and validate the terminology mapping, ultimately aiming to bridge the communication gap and enhance collaboration between RSEs and SERs."}}
{"id": "2507.02690", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.02690", "abs": "https://arxiv.org/abs/2507.02690", "authors": ["Jiaxing Wang", "Yifeng Yu", "Jiahan Song", "Bin Cao", "Jing Fan", "Ji Zhang"], "title": "RLHGNN: Reinforcement Learning-driven Heterogeneous Graph Neural Network for Next Activity Prediction in Business Processes", "comment": "15 pages, 7 figures. Business process prediction using reinforcement\n  learning and heterogeneous graph neural networks", "summary": "Next activity prediction represents a fundamental challenge for optimizing\nbusiness processes in service-oriented architectures such as microservices\nenvironments, distributed enterprise systems, and cloud-native platforms, which\nenables proactive resource allocation and dynamic service composition. Despite\nthe prevalence of sequence-based methods, these approaches fail to capture\nnon-sequential relationships that arise from parallel executions and\nconditional dependencies. Even though graph-based approaches address structural\npreservation, they suffer from homogeneous representations and static\nstructures that apply uniform modeling strategies regardless of individual\nprocess complexity characteristics. To address these limitations, we introduce\nRLHGNN, a novel framework that transforms event logs into heterogeneous process\ngraphs with three distinct edge types grounded in established process mining\ntheory. Our approach creates four flexible graph structures by selectively\ncombining these edges to accommodate different process complexities, and\nemploys reinforcement learning formulated as a Markov Decision Process to\nautomatically determine the optimal graph structure for each specific process\ninstance. RLHGNN then applies heterogeneous graph convolution with\nrelation-specific aggregation strategies to effectively predict the next\nactivity. This adaptive methodology enables precise modeling of both sequential\nand non-sequential relationships in service interactions. Comprehensive\nevaluation on six real-world datasets demonstrates that RLHGNN consistently\noutperforms state-of-the-art approaches. Furthermore, it maintains an inference\nlatency of approximately 1 ms per prediction, representing a highly practical\nsolution suitable for real-time business process monitoring applications. The\nsource code is available at https://github.com/Joker3993/RLHGNN.", "AI": {"tldr": "RLHGNN is a new, reinforcement learning-driven framework for next activity prediction in complex business processes. By adapting graph structure per process instance and using relation-specific graph convolution, it outperforms current best methods and runs fast enough for real-time use.", "motivation": "Next activity prediction is critical in optimizing business processes, especially in complex, distributed environments such as microservices and cloud-native platforms. Existing sequence-based and graph-based methods struggle to capture complex, non-sequential, and heterogeneous process relationships.", "method": "The authors introduce RLHGNN, a novel framework that transforms event logs into heterogeneous process graphs with three types of edges based on process mining theory. It generates four flexible graph structures to match different process complexities. A reinforcement learning approach, formulated as a Markov Decision Process, is used to automatically select the optimal graph structure for each process instance, followed by heterogeneous graph convolution with relation-specific aggregation for activity prediction.", "result": "In experiments on six real-world datasets, RLHGNN outperforms existing state-of-the-art methods and maintains low inference latency (about 1 ms per prediction), showing practical suitability for real-time applications.", "conclusion": "RLHGNN successfully addresses the limitations of previous next activity prediction approaches by adaptively modeling process heterogeneity, achieving superior accuracy and real-time inference capabilities. The framework effectively supports proactive resource allocation and dynamic service composition in business processes."}}
{"id": "2507.02695", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.02695", "abs": "https://arxiv.org/abs/2507.02695", "authors": ["Sahar Ahmadisakha", "Lech Bialek", "Mohamed Soliman", "Vasilios Andrikopoulos"], "title": "Sustainability Flags for the Identification of Sustainability Posts in Q&A Platforms", "comment": null, "summary": "In recent years, sustainability in software systems has gained significant\nattention, especially with the rise of cloud computing and the shift towards\ncloud-based architectures. This shift has intensified the need to identify\nsustainability in architectural discussions to take informed architectural\ndecisions. One source to see these decisions is in online Q&A forums among\npractitioners' discussions. However, recognizing sustainability concepts within\nsoftware practitioners' discussions remains challenging due to the lack of\nclear and distinct guidelines for this task. To address this issue, we\nintroduce the notion of sustainability flags as pointers in relevant\ndiscussions, developed through thematic analysis of multiple sustainability\nbest practices from cloud providers. This study further evaluates the\neffectiveness of these flags in identifying sustainability within cloud\narchitecture posts, using a controlled experiment. Preliminary results suggest\nthat the use of flags results in classifying fewer posts as\nsustainability-related compared to a control group, with moderately higher\ncertainty and significantly improved performance. Moreover, sustainability\nflags are perceived as more useful and understandable than relying solely on\ndefinitions for identifying sustainability.", "AI": {"tldr": "The paper introduces 'sustainability flags,' derived from best practices, to better identify sustainability in software discussions. Experiments show these flags improve certainty, performance, and user understanding compared to just using definitions.", "motivation": "Sustainability in software systems has become increasingly important with the adoption of cloud computing, but it's difficult to identify sustainability-related discussions among software practitioners due to a lack of clear guidelines.", "method": "The authors conducted a thematic analysis of sustainability best practices from various cloud providers to develop 'sustainability flags'\u2014pointers to help identify relevant topics in practitioners' discussions. These flags were then evaluated through a controlled experiment, comparing their effectiveness to using only definitions.", "result": "The use of sustainability flags led to fewer posts being classified as relating to sustainability compared to the control, but those classifications were made with higher certainty and significantly better performance. Users also found the flags more useful and understandable than simple definitions.", "conclusion": "Sustainability flags, developed from best practices, are effective tools for more reliably and understandably identifying sustainability in cloud architecture discussions among practitioners compared to solely relying on definitions."}}
{"id": "2507.02846", "categories": ["cs.SE", "cs.CL"], "pdf": "https://arxiv.org/pdf/2507.02846", "abs": "https://arxiv.org/abs/2507.02846", "authors": ["Anmol Singhal", "Travis Breaux"], "title": "Legal Requirements Translation from Law", "comment": "13 pages, 7 figures, Accepted at the 33rd IEEE International\n  Requirements Engineering 2025", "summary": "Software systems must comply with legal regulations, which is a\nresource-intensive task, particularly for small organizations and startups\nlacking dedicated legal expertise. Extracting metadata from regulations to\nelicit legal requirements for software is a critical step to ensure compliance.\nHowever, it is a cumbersome task due to the length and complex nature of legal\ntext. Although prior work has pursued automated methods for extracting\nstructural and semantic metadata from legal text, key limitations remain: they\ndo not consider the interplay and interrelationships among attributes\nassociated with these metadata types, and they rely on manual labeling or\nheuristic-driven machine learning, which does not generalize well to new\ndocuments. In this paper, we introduce an approach based on textual entailment\nand in-context learning for automatically generating a canonical representation\nof legal text, encodable and executable as Python code. Our representation is\ninstantiated from a manually designed Python class structure that serves as a\ndomain-specific metamodel, capturing both structural and semantic legal\nmetadata and their interrelationships. This design choice reduces the need for\nlarge, manually labeled datasets and enhances applicability to unseen\nlegislation. We evaluate our approach on 13 U.S. state data breach notification\nlaws, demonstrating that our generated representations pass approximately 89.4%\nof test cases and achieve a precision and recall of 82.2 and 88.7,\nrespectively.", "AI": {"tldr": "The paper presents an automated, Python-based approach to extract legal requirements from regulatory texts using textual entailment and in-context learning, achieving high accuracy and reducing manual work, particularly benefiting small organizations.", "motivation": "Ensuring software compliance with legal regulations is challenging and resource-intensive, especially for small organizations without dedicated legal staff. Extracting legal requirements from regulations is critical but burdensome due to the complexity of legal texts. Existing automated approaches lack consideration of relationships among metadata attributes and do not generalize well to new documents.", "method": "The authors propose an automated approach using textual entailment and in-context learning to generate canonical representations of legal text, which can be encoded and executed as Python code. This representation stems from a manually designed Python class structure (a domain-specific metamodel) that captures both structural and semantic metadata and their interrelations, reducing reliance on large, labeled training datasets.", "result": "The approach was evaluated using 13 U.S. state data breach notification laws. The generated representations passed about 89.4% of test cases and achieved a precision of 82.2 and recall of 88.7, indicating a high level of accuracy and effectiveness.", "conclusion": "The proposed method enhances the automation and accuracy of extracting legal requirements from regulations, with reduced dependence on manual labeling and strong generalization to new legislative texts. This supports software compliance in resource-constrained environments."}}
{"id": "2507.02858", "categories": ["cs.SE", "cs.CL"], "pdf": "https://arxiv.org/pdf/2507.02858", "abs": "https://arxiv.org/abs/2507.02858", "authors": ["Yuchen Shen", "Anmol Singhal", "Travis Breaux"], "title": "Requirements Elicitation Follow-Up Question Generation", "comment": "13 pages, 2 figures, accepted at the 33rd IEEE International\n  Requirements Engineering 2025", "summary": "Interviews are a widely used technique in eliciting requirements to gather\nstakeholder needs, preferences, and expectations for a software system.\nEffective interviewing requires skilled interviewers to formulate appropriate\ninterview questions in real time while facing multiple challenges, including\nlack of familiarity with the domain, excessive cognitive load, and information\noverload that hinders how humans process stakeholders' speech. Recently, large\nlanguage models (LLMs) have exhibited state-of-the-art performance in multiple\nnatural language processing tasks, including text summarization and entailment.\nTo support interviewers, we investigate the application of GPT-4o to generate\nfollow-up interview questions during requirements elicitation by building on a\nframework of common interviewer mistake types. In addition, we describe methods\nto generate questions based on interviewee speech. We report a controlled\nexperiment to evaluate LLM-generated and human-authored questions with minimal\nguidance, and a second controlled experiment to evaluate the LLM-generated\nquestions when generation is guided by interviewer mistake types. Our findings\ndemonstrate that, for both experiments, the LLM-generated questions are no\nworse than the human-authored questions with respect to clarity, relevancy, and\ninformativeness. In addition, LLM-generated questions outperform human-authored\nquestions when guided by common mistakes types. This highlights the potential\nof using LLMs to help interviewers improve the quality and ease of requirements\nelicitation interviews in real time.", "AI": {"tldr": "This paper shows that using large language models (like GPT-4o) to generate interview questions can help interviewers during requirements gathering: the generated questions are as good as or better than those from humans, especially when the LLM is guided to avoid common interviewer mistakes.", "motivation": "Interviewing is crucial for requirements elicitation in software engineering, but interviewers face challenges such as domain unfamiliarity, cognitive overload, and information overload. Large Language Models have shown strong performance in NLP tasks and may be able to assist interviewers in generating effective follow-up questions.", "method": "The paper investigates using GPT-4o to generate follow-up interview questions during requirements elicitation. They build upon a framework of common interviewer mistake types and propose methods for automated question generation based on interviewee speech. The study conducts two controlled experiments: one comparing minimally guided LLM- and human-generated questions, and another guiding LLM question generation by mistake types.", "result": "The experiments reveal that LLM-generated questions are no worse than human-authored ones in terms of clarity, relevancy, and informativeness. When guided by interviewer mistake types, LLM-generated questions even outperform those authored by humans.", "conclusion": "LLMs like GPT-4o can be valuable tools for interviewers during requirements elicitation, improving question quality and reducing cognitive and informational challenges. Guiding LLMs using common interviewer mistakes enhances the effectiveness of generated questions."}}
