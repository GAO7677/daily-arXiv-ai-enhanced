{"id": "2508.04820", "categories": ["cs.SE", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2508.04820", "abs": "https://arxiv.org/abs/2508.04820", "authors": ["Mayra Sofia Ruiz Rodriguez", "SayedHassan Khatoonabadi", "Emad Shihab"], "title": "Automated File-Level Logging Generation for Machine Learning Applications using LLMs: A Case Study using GPT-4o Mini", "comment": null, "summary": "Logging is essential in software development, helping developers monitor\nsystem behavior and aiding in debugging applications. Given the ability of\nlarge language models (LLMs) to generate natural language and code, researchers\nare exploring their potential to generate log statements. However, prior work\nfocuses on evaluating logs introduced in code functions, leaving file-level log\ngeneration underexplored -- especially in machine learning (ML) applications,\nwhere comprehensive logging can enhance reliability. In this study, we evaluate\nthe capacity of GPT-4o mini as a case study to generate log statements for ML\nprojects at file level. We gathered a set of 171 ML repositories containing\n4,073 Python files with at least one log statement. We identified and removed\nthe original logs from the files, prompted the LLM to generate logs for them,\nand evaluated both the position of the logs and log level, variables, and text\nquality of the generated logs compared to human-written logs. In addition, we\nmanually analyzed a representative sample of generated logs to identify common\npatterns and challenges. We find that the LLM introduces logs in the same place\nas humans in 63.91% of cases, but at the cost of a high overlogging rate of\n82.66%. Furthermore, our manual analysis reveals challenges for file-level\nlogging, which shows overlogging at the beginning or end of a function,\ndifficulty logging within large code blocks, and misalignment with\nproject-specific logging conventions. While the LLM shows promise for\ngenerating logs for complete files, these limitations remain to be addressed\nfor practical implementation.", "AI": {"tldr": "This paper evaluates the capability of GPT-4o mini to automatically generate file-level log statements for machine learning projects. While the model places logs similarly to humans most of the time, it generates too many logs and fails to adapt to project-specific conventions, limiting its usefulness for automated logging without further improvement.", "motivation": "The motivation behind this paper is the need for effective logging in software development, particularly in machine learning projects, to enhance reliability. The use of large language models to automate log statement generation is an emerging area, but prior studies have largely ignored file-level log generation, leaving a gap in understanding their efficacy outside the function level.", "method": "The authors performed an empirical evaluation of GPT-4o mini, using it to generate log statements for Python files sourced from 171 ML repositories. They removed existing human-written log statements, prompted the LLM to generate new ones, and compared these generated logs against original logs based on placement, log level, variable use, and text quality. A manual qualitative analysis was also conducted to examine common generation patterns and challenges.", "result": "GPT-4o mini generated log statements that matched human placement in 63.91% of cases. However, this came with a significant overlogging rate of 82.66%. The manual analysis highlighted notable problems including tendency to overlog at certain code locations (e.g., start/end of functions), inability to handle large code blocks effectively, and lack of adherence to project-specific logging conventions.", "conclusion": "The study concludes that while LLMs show potential in generating file-level log statements, critical challenges such as overlogging and misalignment with project norms need to be solved before such models can be practically used in automated logging for ML projects."}}
{"id": "2508.04895", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.04895", "abs": "https://arxiv.org/abs/2508.04895", "authors": ["Wentao Lu", "Alexander Senchenko", "Abram Hindle", "Cor-Paul Bezemer"], "title": "Automated Bug Frame Retrieval from Gameplay Videos Using Vision-Language Models", "comment": null, "summary": "Modern game studios deliver new builds and patches at a rapid pace,\ngenerating thousands of bug reports, many of which embed gameplay videos. To\nverify and triage these bug reports, developers must watch the submitted\nvideos. This manual review is labour-intensive, slow, and hard to scale. In\nthis paper, we introduce an automated pipeline that reduces each video to a\nsingle frame that best matches the reported bug description, giving developers\ninstant visual evidence that pinpoints the bug.\n  Our pipeline begins with FFmpeg for keyframe extraction, reducing each video\nto a median of just 1.90% of its original frames while still capturing bug\nmoments in 98.79 of cases. These keyframes are then evaluated by a\nvision--language model (GPT-4o), which ranks them based on how well they match\nthe textual bug description and selects the most representative frame. We\nevaluated this approach using real-world developer-submitted gameplay videos\nand JIRA bug reports from a popular First-Person Shooter (FPS) game. The\npipeline achieves an overall F1 score of 0.79 and Accuracy of 0.89 for the\ntop-1 retrieved frame. Performance is highest for the Lighting & Shadow (F1 =\n0.94), Physics & Collision (0.86), and UI & HUD (0.83) bug categories, and\nlowest for Animation & VFX (0.51).\n  By replacing video viewing with an immediately informative image, our\napproach dramatically reduces manual effort and speeds up triage and regression\nchecks, offering practical benefits to quality assurance (QA) teams and\ndevelopers across the game industry.", "AI": {"tldr": "This paper introduces an automated pipeline that uses keyframe extraction and a vision-language model to select a single, representative frame from gameplay bug report videos, matching the bug description. Tested on real game studio data, the method greatly reduces review effort, achieving strong accuracy and recall, and can improve bug triage efficiency for game QA teams.", "motivation": "Game studios receive thousands of bug reports, many with gameplay videos, but verifying them requires tedious manual video review. This process is slow, labor-intensive, and doesn't scale well as patch frequency increases.", "method": "The authors propose an automated pipeline: First, FFmpeg is used for keyframe extraction, drastically reducing the number of frames to review. Next, a vision-language model (GPT-4o) evaluates these keyframes against the bug's textual description and selects the best-matching frame for developers.", "result": "On real-world gameplay videos and bug reports from a popular FPS title, the pipeline reduced frames to a median 1.90% of the original while capturing bug moments in 98.79% of cases. For selecting the single most relevant frame, their method achieved an F1 of 0.79 and accuracy of 0.89, with especially strong results for certain bug types.", "conclusion": "Replacing manual video review with a single, automatically selected informative frame streamlines bug triage and significantly reduces QA and developer workload. The tool offers practical, effective benefits for studios handling large volumes of video-based bug reports."}}
{"id": "2508.04921", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.04921", "abs": "https://arxiv.org/abs/2508.04921", "authors": ["Zixuan Feng", "Reed Milewicz", "Emerson Murphy-Hill", "Tyler Menezes", "Alexander Serebrenik", "Igor Steinmacher", "Anita Sarma"], "title": "Charting Uncertain Waters: A Socio-Technical Framework for Navigating GenAI's Impact on Open Source Communities", "comment": "13 pages, 1 figure", "summary": "Open Source Software communities face a wave of uncertainty as Generative AI\nrapidly transforms how software is created, maintained, and governed. Without\nclear frameworks, communities risk being overwhelmed by the complexity and\nambiguity introduced by GenAI, threatening the collaborative ethos that\nunderpins OSS. We conduct a scenario-driven, conceptual exploration using a\nsocio-technical framework inspired by McLuhan's Tetrad to surface both risks\nand opportunities for community resilience amid GenAI-driven disruption of OSS\ndevelopment across four domains: software practices, documentation, community\nengagement, and governance. By adopting this lens, OSS leaders and researchers\ncan proactively shape the future of their ecosystems, rather than simply\nreacting to technological upheaval.", "AI": {"tldr": "Generative AI is rapidly changing OSS development, creating uncertainty and risk. This paper uses a socio-technical framework to explore and map the risks and opportunities in four critical domains, guiding OSS communities to proactively adapt rather than be overwhelmed.", "motivation": "The motivation is to address the uncertainty and potential disruption that Generative AI (GenAI) brings to Open Source Software (OSS) communities, which lack clear frameworks for navigating these changes.", "method": "The method is a scenario-driven, conceptual exploration using a socio-technical framework inspired by McLuhan's Tetrad. This approach analyzes the impact of GenAI on OSS across four domains: software practices, documentation, community engagement, and governance.", "result": "The result is an identification of both risks and opportunities for OSS communities as they face GenAI-driven disruptions. The paper highlights how OSS leaders and researchers can use the framework to proactively manage these changes.", "conclusion": "The conclusion is that by applying a structured socio-technical lens, OSS communities can build resilience and actively shape their ecosystems in response to GenAI challenges, rather than passively reacting."}}
{"id": "2508.04925", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2508.04925", "abs": "https://arxiv.org/abs/2508.04925", "authors": ["Sigma Jahan", "Saurabh Singh Rajput", "Tushar Sharma", "Mohammad Masudur Rahman"], "title": "Taxonomy of Faults in Attention-Based Neural Networks", "comment": null, "summary": "Attention mechanisms are at the core of modern neural architectures, powering\nsystems ranging from ChatGPT to autonomous vehicles and driving a major\neconomic impact. However, high-profile failures, such as ChatGPT's nonsensical\noutputs or Google's suspension of Gemini's image generation due to attention\nweight errors, highlight a critical gap: existing deep learning fault\ntaxonomies might not adequately capture the unique failures introduced by\nattention mechanisms. This gap leaves practitioners without actionable\ndiagnostic guidance. To address this gap, we present the first comprehensive\nempirical study of faults in attention-based neural networks (ABNNs). Our work\nis based on a systematic analysis of 555 real-world faults collected from 96\nprojects across ten frameworks, including GitHub, Hugging Face, and Stack\nOverflow. Through our analysis, we develop a novel taxonomy comprising seven\nattention-specific fault categories, not captured by existing work. Our results\nshow that over half of the ABNN faults arise from mechanisms unique to\nattention architectures. We further analyze the root causes and manifestations\nof these faults through various symptoms. Finally, by analyzing symptom-root\ncause associations, we identify four evidence-based diagnostic heuristics that\nexplain 33.0% of attention-specific faults, offering the first systematic\ndiagnostic guidance for attention-based models.", "AI": {"tldr": "The paper systematically studies faults in attention-based neural networks, develops a new categorization of these faults, and provides practical diagnostic guidelines, addressing a significant gap in current deep learning fault analysis.", "motivation": "Although attention mechanisms are fundamental to modern neural networks and have broad economic and technological impacts, there have been high-profile failures directly linked to these mechanisms. Existing deep learning fault taxonomies do not sufficiently address attention-specific errors, leaving practitioners without proper diagnostic guidance.", "method": "The authors conducted a systematic empirical analysis of 555 real-world faults from 96 attention-based neural network projects. These faults were collected from platforms such as GitHub, Hugging Face, and Stack Overflow and analyzed to create a new taxonomy of attention-specific faults. They further examined symptoms and root causes, developing diagnostic heuristics based on these findings.", "result": "The study introduced a novel taxonomy with seven attention-specific fault categories, showing that over 50% of faults in attention-based models stem from mechanisms unique to attention. Four diagnostic heuristics were developed, capable of explaining 33% of attention-specific faults.", "conclusion": "This paper fills a critical gap by providing the first systematic analysis and diagnostic guidance for faults in attention-based neural networks, with actionable taxonomy and evidence-based heuristics for practitioners."}}
{"id": "2508.04829", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2508.04829", "abs": "https://arxiv.org/abs/2508.04829", "authors": ["Devora Chait-Roth", "Kedar S. Namjoshi", "Thomas Wies"], "title": "Consistent Updates for Scalable Microservices", "comment": null, "summary": "Online services are commonly implemented with a scalable microservice\narchitecture, where isomorphic worker processes service client requests,\nrecording persistent state in a backend data store. To maintain service, any\nmodifications to the service functionality must be made on the fly -- i.e., as\nthe service continues to process client requests -- but doing so is\nchallenging. The central difficulty is that of avoiding potential\ninconsistencies caused by ''mixed mode'' operation, where workers of current\nand new versions are concurrently active and interact via the data store. Some\nupdate methods avoid mixed mode altogether, but only at the cost of substantial\ninefficiency -- by doubling resources (memory and compute), or by halving\nthroughput. The alternative is a so-called ''rolling'' update, which is\nuncontrolled and runs the risk of serious service failures arising from\ninconsistent mixed-mode behavior.\n  In this paper, we present the first algorithms that guarantee consistency for\nmixed mode updates. The algorithms rely on semantic properties of service\nactions, such as commutativity. We show that semantic awareness is required, by\nproving that any semantically oblivious, mixed-mode update method cannot avoid\ninconsistencies. Ideally, it should appear to every client that a service\nupdate takes effect atomically; this ensures that a client is not exposed to\ninconsistent mixed-mode behavior. We introduce a framework that formalizes this\nintuition and develop foundational theory for reasoning about the consistency\nof mixed-mode updates, applying that theory to derive the new algorithms and\nestablish their correctness.", "AI": {"tldr": "Updating microservices on the fly risks inconsistencies when old and new versions run together. The authors prove only semantic-aware (not generic) methods can guarantee consistency, and provide new algorithms and a framework to safely and efficiently handle mixed-mode updates.", "motivation": "In microservice architectures, updating service functionality on the fly is necessary for maintaining availability. However, this process risks 'mixed mode' inconsistencies when old and new versions of workers operate simultaneously. Existing methods to avoid mixed mode are either inefficient or risky.", "method": "The authors present new algorithms that leverage the semantics (e.g., commutativity) of service actions to ensure consistency during mixed-mode updates. They also formalize a framework and provide a theoretical foundation for reasoning about consistency in updates, proving their algorithms are correct.", "result": "They show that any update method that does not consider semantics cannot avoid inconsistencies. Their semantic-aware algorithms are proven to guarantee consistency during mixed-mode updates without sacrificing efficiency.", "conclusion": "The paper establishes that semantic-based approaches are necessary and effective for safe, efficient live updates in microservices. Their framework and algorithms enable atomic-appearing updates and avoid inconsistent behaviors."}}
{"id": "2508.05005", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.05005", "abs": "https://arxiv.org/abs/2508.05005", "authors": ["Gang Xu", "Airong Wang", "Yushan Pan"], "title": "Generative AI for Object-Oriented Programming: Writing the Right Code and Reasoning the Right Logic", "comment": null, "summary": "We find ourselves in the midst of an explosion in artificial intelligence\nresearch, particularly with large language models (LLMs). These models have\ndiverse applications spanning finance, commonsense knowledge graphs, medicine,\nand visual analysis. In the world of Object-Oriented Programming(OOP), a robust\nbody of knowledge and methods has been developed for managing complex tasks\nthrough object-oriented thinking. However, the intersection of LLMs with OOP\nremains an underexplored territory. Empirically, we currently possess limited\nunderstanding of how LLMs can enhance the effectiveness of OOP learning and\ncode writing, as well as how we can evaluate such AI-powered tools. Our work\naims to address this gap by presenting a vision from the perspectives of key\nstakeholders involved in an OOP task: programmers, mariners, and experienced\nprogrammers. We identify critical junctures within typical coding workflows\nwhere the integration of LLMs can offer significant benefits. Furthermore, we\npropose ways to augment existing logical reasoning and code writing, ultimately\nenhancing the programming experience.", "AI": {"tldr": "The paper explores how large language models (LLMs) can be integrated into object-oriented programming (OOP) to benefit different types of programmers. It identifies key workflow stages where LLMs could enhance logical reasoning and code writing, and outlines approaches for improved programming experiences, addressing an underexplored area of AI application.", "motivation": "While LLMs have rapidly advanced and impacted diverse fields, their potential to improve OOP learning and development is still largely unexplored. The lack of empirical understanding motivates this investigation.", "method": "The authors present a conceptual vision by analyzing OOP tasks from the perspectives of programmers, mentors, and experienced developers. They identify key workflow stages where LLMs could be beneficial and propose enhancements in logic and coding via AI tools.", "result": "The study highlights critical points in OOP workflows for effective LLM integration and suggests methods to augment the programming experience through logical reasoning and better code generation.", "conclusion": "This paper concludes that integrating large language models (LLMs) into object-oriented programming (OOP) workflows can offer significant advantages, providing enhanced logical reasoning and improved code writing for various stakeholders."}}
{"id": "2508.05034", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2508.05034", "abs": "https://arxiv.org/abs/2508.05034", "authors": ["Arabat", "Ali", "Sayagh", "Mohammed", "Hassine", "Jameleddine"], "title": "An ML-based Approach to Predicting Software Change Dependencies: Insights from an Empirical Study on OpenStack", "comment": null, "summary": "As software systems grow in complexity, accurately identifying and managing\ndependencies among changes becomes increasingly critical. For instance, a\nchange that leverages a function must depend on the change that introduces it.\nEstablishing such dependencies allows CI/CD pipelines to build and orchestrate\nchanges effectively, preventing build failures and incomplete feature\ndeployments. In modern software systems, dependencies often span multiple\ncomponents across teams, creating challenges for development and deployment.\nThey serve various purposes, from enabling new features to managing\nconfigurations, and can even involve traditionally independent changes like\ndocumentation updates. To address these challenges, we conducted a preliminary\nstudy on dependency management in OpenStack, a large-scale software system. Our\nstudy revealed that a substantial portion of software changes in OpenStack over\nthe past 10 years are interdependent. Surprisingly, 51.08% of these\ndependencies are identified during the code review phase-after a median delay\nof 5.06 hours-rather than at the time of change creation. Developers often\nspend a median of 57.12 hours identifying dependencies, searching among a\nmedian of 463 other changes. To help developers proactively identify\ndependencies, we propose a semi-automated approach that leverages two ML\nmodels. The first model predicts the likelihood of dependencies among changes,\nwhile the second identifies the exact pairs of dependent changes. Our proposed\nmodels demonstrate strong performance, achieving average AUC scores of 79.33%\nand 91.89%, and Brier scores of 0.11 and 0.014, respectively. Indeed, the\nsecond model has a good top-k recall across all types of pairs, while the top-k\nprecision has room for improvement.", "AI": {"tldr": "As software grows, managing change dependencies is vital but often delayed and effort-intensive. Studying OpenStack, authors found most dependencies are caught late, causing developer overhead. They propose and test two ML models to predict and identify dependencies, showing strong performance, but highlight a need to boost precision further.", "motivation": "Modern software systems are highly complex and have dependencies that span multiple components and teams. Properly identifying and managing these dependencies is critical for preventing build failures and incomplete deployments. However, many dependencies are detected late in the development process, leading to increased effort and delay.", "method": "The authors conducted a preliminary study on the OpenStack software system to examine interdependencies among its changes over 10 years. They then developed and evaluated a semi-automated approach using two machine learning models: one to predict the likelihood of dependencies and another to identify specific pairs of dependent changes.", "result": "The study found that 51.08% of dependencies in OpenStack are identified during code review, with a median delay of 5.06 hours, and developers spend a median of 57.12 hours searching among hundreds of changes to identify dependencies. The proposed ML models performed well, with average AUC scores of 79.33% and 91.89%, and Brier scores of 0.11 and 0.014. The second model exhibited good top-k recall for all pair types, although its top-k precision could be improved.", "conclusion": "Dependency management in large-scale software like OpenStack is a significant challenge, often leading to delays and requiring extensive manual effort. Semi-automated ML-based approaches can effectively predict and help identify dependencies, potentially improving development efficiency, though further refinement to improve precision is needed."}}
{"id": "2508.05085", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.05085", "abs": "https://arxiv.org/abs/2508.05085", "authors": ["Junayed Mahmud", "James Chen", "Terry Achille", "Camilo Alvarez-Velez", "Darren Dean Bansil", "Patrick Ijieh", "Samar Karanch", "Nadeeshan De Silva", "Oscar Chaparro", "Andrian Marcus", "Kevin Moran"], "title": "LadyBug: A GitHub Bot for UI-Enhanced Bug Localization in Mobile Apps", "comment": "5 pages, to appear in the Proceedings of the 41st International\n  Conference on Software Maintenance and Evolution (ICSME'25) - Tool\n  Demonstration Track", "summary": "This paper introduces LadyBug, a GitHub bot that automatically localizes bugs\nfor Android apps by combining UI interaction information with text retrieval.\nLadyBug connects to an Android app's GitHub repository, and is triggered when a\nbug is reported in the corresponding issue tracker. Developers can then record\na reproduction trace for the bug on a device or emulator and upload the trace\nto LadyBug via the GitHub issue tracker. This enables LadyBug to utilize both\nthe text from the original bug description, and UI information from the\nreproduction trace to accurately retrieve a ranked list of files from the\nproject that most likely contain the reported bug.\n  We empirically evaluated LadyBug using an automated testing pipeline and\nbenchmark called RedWing that contains 80 fully-localized and reproducible bug\nreports from 39 Android apps. Our results illustrate that LadyBug outperforms\ntext-retrieval-based baselines and that the utilization of UI information leads\nto a substantial increase in localization accuracy. LadyBug is an open-source\ntool, available at https://github.com/LadyBugML/ladybug.\n  A video showing the capabilities of Ladybug can be viewed here:\nhttps://youtu.be/hI3tzbRK0Cw", "AI": {"tldr": "LadyBug is a GitHub bot for Android apps that improves bug localization by combining bug report text with UI reproduction traces, greatly outperforming traditional text-only methods according to empirical benchmarks.", "motivation": "Automatic bug localization in mobile apps, especially Android, is challenging because traditional approaches using only textual bug reports are often not accurate enough. Developers need efficient tools to pinpoint the location of bugs to speed up debugging and improve software quality.", "method": "LadyBug is a GitHub bot that leverages both the textual content of bug reports and UI interaction traces recorded by developers as they reproduce bugs. It communicates with the app's GitHub repository and, once a bug is reported, accepts reproduction traces that provide UI context. It then applies text retrieval techniques combined with UI information to suggest a ranked list of files likely to contain the bug.", "result": "Empirical evaluation using the RedWing benchmark (80 bug reports from 39 apps) shows that LadyBug outperforms baseline methods that rely solely on text retrieval. The integration of UI context leads to significantly higher bug localization accuracy.", "conclusion": "Combining textual bug report data with UI interaction traces offers a practical and more accurate approach to automatic bug localization in Android apps. LadyBug effectively implements this strategy and is available as open-source software."}}
{"id": "2508.05170", "categories": ["cs.SE", "cs.AI", "cs.CL", "cs.LG"], "pdf": "https://arxiv.org/pdf/2508.05170", "abs": "https://arxiv.org/abs/2508.05170", "authors": ["Lishui Fan", "Yu Zhang", "Mouxiang Chen", "Zhongxin Liu"], "title": "Posterior-GRPO: Rewarding Reasoning Processes in Code Generation", "comment": null, "summary": "Reinforcement learning (RL) has significantly advanced code generation for\nlarge language models (LLMs). However, current paradigms rely on outcome-based\nrewards from test cases, neglecting the quality of the intermediate reasoning\nprocess. While supervising the reasoning process directly is a promising\ndirection, it is highly susceptible to reward hacking, where the policy model\nlearns to exploit the reasoning reward signal without improving final outcomes.\nTo address this, we introduce a unified framework that can effectively\nincorporate the quality of the reasoning process during RL. First, to enable\nreasoning evaluation, we develop LCB-RB, a benchmark comprising preference\npairs of superior and inferior reasoning processes. Second, to accurately score\nreasoning quality, we introduce an Optimized-Degraded based (OD-based) method\nfor reward model training. This method generates high-quality preference pairs\nby systematically optimizing and degrading initial reasoning paths along\ncurated dimensions of reasoning quality, such as factual accuracy, logical\nrigor, and coherence. A 7B parameter reward model with this method achieves\nstate-of-the-art (SOTA) performance on LCB-RB and generalizes well to other\nbenchmarks. Finally, we introduce Posterior-GRPO (P-GRPO), a novel RL method\nthat conditions process-based rewards on task success. By selectively applying\nrewards to the reasoning processes of only successful outcomes, P-GRPO\neffectively mitigates reward hacking and aligns the model's internal reasoning\nwith final code correctness. A 7B parameter model with P-GRPO achieves superior\nperformance across diverse code generation tasks, outperforming outcome-only\nbaselines by 4.5%, achieving comparable performance to GPT-4-Turbo. We further\ndemonstrate the generalizability of our approach by extending it to\nmathematical tasks. Our models, dataset, and code are publicly available.", "AI": {"tldr": "This paper proposes a reinforcement learning framework for code generation that rewards both the reasoning process and final outcomes. By introducing new benchmarks, a reward model, and a novel RL method, the authors achieve improved code generation accuracy and mitigate reward hacking, outperforming baseline methods and matching GPT-4-Turbo performance.", "motivation": "Reinforcement learning (RL) has improved code generation in large language models (LLMs), but most methods use only final outcome rewards (like passing test cases), ignoring the quality of the intermediate reasoning. Directly supervising the reasoning process is promising, but existing approaches suffer from reward hacking, where models exploit the reward without improving real outcomes.", "method": "The authors introduce a unified framework for incorporating reasoning process quality into RL for code generation. They develop LCB-RB, a benchmark with preference pairs for comparing reasoning processes. They propose an Optimized-Degraded based (OD-based) reward model training method, generating preference pairs by optimizing and degrading reasoning paths along key reasoning qualities. They introduce Posterior-GRPO (P-GRPO), an RL technique that applies process-based rewards only to reasoning leading to successful outcomes, reducing reward hacking.", "result": "The 7B parameter reward model trained using the new method achieves state-of-the-art performance on LCB-RB and generalizes to other benchmarks. The 7B parameter P-GRPO model outperforms outcome-only baselines by 4.5% and matches GPT-4-Turbo in code generation tasks. The approach also generalizes to mathematical reasoning.", "conclusion": "Rewarding reasoning process quality in RL, especially when conditioned on successful task completion, yields better code generation in LLMs and mitigates reward hacking. The proposed framework, datasets, and models advance the state-of-the-art and are publicly available."}}
{"id": "2508.05192", "categories": ["cs.SE", "H.2.3; I.2.6; D.2.2"], "pdf": "https://arxiv.org/pdf/2508.05192", "abs": "https://arxiv.org/abs/2508.05192", "authors": ["Felix Neubauer", "J\u00fcrgen Pleiss", "Benjamin Uekermann"], "title": "AI-assisted JSON Schema Creation and Mapping", "comment": "Accepted for Tools and Demonstrations Track of ACM/IEEE MODELS'25", "summary": "Model-Driven Engineering (MDE) places models at the core of system and data\nengineering processes. In the context of research data, these models are\ntypically expressed as schemas that define the structure and semantics of\ndatasets. However, many domains still lack standardized models, and creating\nthem remains a significant barrier, especially for non-experts. We present a\nhybrid approach that combines large language models (LLMs) with deterministic\ntechniques to enable JSON Schema creation, modification, and schema mapping\nbased on natural language inputs by the user. These capabilities are integrated\ninto the open-source tool MetaConfigurator, which already provides visual model\nediting, validation, code generation, and form generation from models. For data\nintegration, we generate schema mappings from heterogeneous JSON, CSV, XML, and\nYAML data using LLMs, while ensuring scalability and reliability through\ndeterministic execution of generated mapping rules. The applicability of our\nwork is demonstrated in an application example in the field of chemistry. By\ncombining natural language interaction with deterministic safeguards, this work\nsignificantly lowers the barrier to structured data modeling and data\nintegration for non-experts.", "AI": {"tldr": "A new tool, MetaConfigurator, combines AI and deterministic methods to let users easily create and map data schemas (like JSON) using plain language, making complex data modeling and integration accessible to non-experts.", "motivation": "In many domains, standardized models and schemas are lacking, making data modeling and integration a difficult task, especially for non-experts. There is a need to simplify schema creation and mapping processes to improve data engineering outcomes.", "method": "The authors present a hybrid approach that leverages large language models (LLMs) alongside deterministic techniques. This enables users to create, modify, and map JSON Schemas using natural language inputs. The method is implemented in the open-source tool MetaConfigurator, which also includes features for model editing, validation, code and form generation, and integrates schema mapping functions for various data formats (JSON, CSV, XML, YAML). Deterministic execution is used for the generated mapping rules to ensure scalability and reliability.", "result": "MetaConfigurator allows for natural language-based schema management and mapping, demonstrated effectively in a chemistry application. Schema mappings across diverse formats are automated, and deterministic execution ensures trustworthiness and efficiency. The tool significantly eases structured data modeling and integration tasks for non-experts.", "conclusion": "By combining the strengths of LLMs for flexible natural language interaction and deterministic mechanisms for rule application, the work makes structured data modeling and integration more accessible, especially to users without extensive technical background."}}
{"id": "2508.05193", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.05193", "abs": "https://arxiv.org/abs/2508.05193", "authors": ["Kaiwen Yan", "Yuhang Chang", "Zirui Guo", "Yaling Mou", "Jiang Ming", "Jingwei Sun"], "title": "STEPWISE-CODEX-Bench: Evaluating Complex Multi-Function Comprehension and Fine-Grained Execution Reasoning", "comment": null, "summary": "In recent years, large language models (LLMs) have made significant progress\nin code intelligence, yet systematically evaluating their code understanding\nand reasoning abilities remains challenging. Mainstream benchmarks such as\nHumanEval and MBPP primarily assess functional correctness, while reasoning\nbenchmarks like CRUXEVAL are limited to single-function, low-complexity\nscenarios. As a result, advanced models achieve nearly saturated scores,\nlimiting their discriminative power. To address this, we present\nSTEPWISE-CODEX-Bench (SX-Bench), a novel benchmark designed for complex\nmulti-function understanding and fine-grained execution reasoning. SX-Bench\nfeatures tasks involving collaboration among multiple sub-functions (e.g.,\nchained calls, nested loops), shifting evaluation towards overall control and\ndata flow modeling. It defines \"computation steps\" as the minimal execution\nunit and requires models to predict the total number of steps in reasoning\ntasks, thereby assessing a model's in-depth understanding of dynamic execution\nbeyond simple I/O matching. Evaluation on over 20 mainstream models (including\n14 reasoning-enhanced models) demonstrates that SX-Bench is highly\ndiscriminative: even the state-of-the-art OpenAI-O3 achieves only 78.37 percent\naccuracy on Hard-Reasoning tasks, much lower than its saturated scores on\nprevious benchmarks, thereby revealing bottlenecks in complex and fine-grained\nreasoning. We also release an automated pipeline combining program synthesis,\nsymbolic execution, and LLM-aided validation for efficient benchmark generation\nand quality assurance. SX-Bench advances code evaluation from \"single-function\nverification\" to \"multi-function dynamic reasoning,\" providing a key tool for\nthe in-depth assessment of advanced code intelligence models.", "AI": {"tldr": "SX-Bench is a new benchmark for evaluating large language models' code reasoning and multi-function understanding. It overcomes the limitations of saturated previous benchmarks by testing models on complex tasks and computation steps. Results show modern LLMs still struggle with deep reasoning, highlighting areas for future improvement.", "motivation": "Current code benchmarks for large language models (LLMs) focus mainly on simple functional correctness or low-complexity reasoning, resulting in saturated scores for advanced models and failing to truly distinguish their deeper reasoning capabilities.", "method": "The paper proposes STEPWISE-CODEX-Bench (SX-Bench), a new benchmark designed for multi-function reasoning and fine-grained code understanding. It involves complex tasks requiring collaboration between sub-functions and asks models to predict total computation steps, evaluating dynamic execution modeling. An automated pipeline using program synthesis, symbolic execution, and LLM validation is released for benchmark creation and quality assurance.", "result": "SX-Bench was tested on over 20 mainstream models, including 14 reasoning-enhanced LLMs. Even state-of-the-art models like OpenAI-O3 only scored 78.37% accuracy on Hard-Reasoning tasks, much lower than their performances on previous benchmarks. This confirms SX-Bench's ability to reveal nuanced limitations in existing models' complex reasoning abilities.", "conclusion": "SX-Bench shifts code evaluation from simple, single-function checks to complex, multi-function, dynamic reasoning tasks. It is a crucial tool for probing the advanced reasoning and understanding of LLMs beyond basic correctness, enabling more granular and meaningful assessments."}}
{"id": "2508.05199", "categories": ["cs.SE", "cs.AI", "D.2.2; D.2.7; I.2.2"], "pdf": "https://arxiv.org/pdf/2508.05199", "abs": "https://arxiv.org/abs/2508.05199", "authors": ["Igor Costa", "Christopher Baran"], "title": "EvoGraph: Hybrid Directed Graph Evolution toward Software 3.0", "comment": "15 pages, 3 tables, 1 algorithm. Submitted to ICSE 2025", "summary": "We introduce **EvoGraph**, a framework that enables software systems to\nevolve their own source code, build pipelines, documentation, and tickets.\nEvoGraph represents every artefact in a typed directed graph, applies learned\nmutation operators driven by specialized small language models (SLMs), and\nselects survivors with a multi-objective fitness. On three benchmarks, EvoGraph\nfixes 83% of known security vulnerabilities, translates COBOL to Java with 93%\nfunctional equivalence (test verified), and maintains documentation freshness\nwithin two minutes. Experiments show a 40% latency reduction and a sevenfold\ndrop in feature lead time compared with strong baselines. We extend our\napproach to **evoGraph**, leveraging language-specific SLMs for modernizing\n.NET, Lisp, CGI, ColdFusion, legacy Python, and C codebases, achieving 82-96%\nsemantic equivalence across languages while reducing computational costs by 90%\ncompared to large language models. EvoGraph's design responds to empirical\nfailure modes in legacy modernization, such as implicit contracts, performance\npreservation, and integration evolution. Our results suggest a practical path\ntoward Software 3.0, where systems adapt continuously yet remain under\nmeasurable control.", "AI": {"tldr": "EvoGraph enables automated, high-quality evolution of software systems, fixing vulnerabilities, modernizing codebases across languages, and reducing both computational and operational costs. This approach leverages small language models, outperforms standard baselines, and represents a step toward self-adaptive Software 3.0.", "motivation": "Legacy modernization and maintenance of software systems are challenging, involving manual and error-prone updates of source code, build pipelines, documentation, and tickets. There's a need for automated, efficient, and reliable systems that self-evolve while maintaining key quality attributes.", "method": "EvoGraph uses a typed directed graph to represent all software artefacts, applies mutation operators driven by specialized small language models (SLMs), and employs multi-objective fitness functions for selection. The approach is benchmarked across legacy modernization tasks and extended to various languages using language-specific SLMs.", "result": "EvoGraph fixes 83% of security vulnerabilities, translates COBOL to Java at 93% functional equivalence, and maintains documentation freshness within two minutes. It reduces latency by 40% and feature lead time sevenfold compared to baselines. When extended to multiple languages, it achieves 82-96% semantic equivalence and a 90% reduction in computational costs versus large LLMs.", "conclusion": "EvoGraph shows a practical pathway for automated software evolution, addressing key empirical modernization failure modes and enabling continuous adaptation of systems under measurable control."}}
{"id": "2508.05301", "categories": ["cs.SE", "cs.CY"], "pdf": "https://arxiv.org/pdf/2508.05301", "abs": "https://arxiv.org/abs/2508.05301", "authors": ["Victoria Torres Bosch", "Ronny Seiger", "Manuela Albert Albiol", "Antoni Mestre Gascon", "Pedro Jose Valderas Aranda"], "title": "A Conceptual Model and Methodology for Sustainability-aware, IoT-enhanced Business Processes", "comment": "Submitted to Information Systems Frontiers (1572-9419)", "summary": "The real-time data collection and automation capabilities offered by the\nInternet of Things (IoT) are revolutionizing and transforming Business\nProcesses (BPs) into IoT-enhanced BPs, showing high potential for improving\nsustainability. Although already studied in Business Process Management (BPM),\nsustainability research has primarily focused on environmental concerns.\nHowever, achieving a holistic and lasting impact requires a systematic approach\nto address sustainability beyond the environmental dimension. This work\nproposes a conceptual model and a structured methodology with the goal of\nanalyzing the potential of IoT to measure and improve the sustainability of\nBPs. The conceptual model formally represents key sustainability concepts,\nlinking BPM and IoT by highlighting how IoT devices support and contribute to\nsustainability. The methodology guides the systematic analysis of existing BPs,\nidentifies opportunities, and implements sustainability-aware, IoT-enhanced\nBPs. The approach is illustrated through a running example from the tourism\ndomain and a case study in healthcare.", "AI": {"tldr": "This paper introduces a comprehensive model and methodology for integrating IoT into business processes to improve sustainability across environmental, social, and economic dimensions, and demonstrates its effectiveness in tourism and healthcare examples.", "motivation": "While IoT has enhanced business processes and initial research links IoT and BPM to environmental sustainability, most studies neglect a broader, systematic approach to sustainability\u2014including social and economic dimensions. There is a gap in integrating holistic sustainability goals into IoT-enhanced business processes.", "method": "The authors propose a conceptual model that formally represents key sustainability concepts and illustrates the link between BPM and IoT, showing how IoT can contribute to sustainability. A structured methodology is then developed to systematically analyze, identify, and implement sustainability-aware, IoT-enhanced business processes. The methodology is demonstrated with tourism and healthcare examples.", "result": "The work provides a structured and formalized approach to connect IoT and BPM with holistic sustainability, beyond just the environmental aspect. It identifies specific opportunities and procedures for making BPs more sustainable using IoT, validated through practical examples.", "conclusion": "A new conceptual and methodological framework is introduced, enabling organizations to systematically evaluate and enhance the sustainability of their business processes through IoT integration, covering environmental, social, and economic dimensions. The framework's applicability is shown in different domains, indicating its generalizability."}}
