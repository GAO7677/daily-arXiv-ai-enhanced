{"id": "2510.01379", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.01379", "abs": "https://arxiv.org/abs/2510.01379", "authors": ["Huashan Chen", "Zhenyu Qi", "Haotang Li", "Hong Chen", "Jinfu Chen", "Kebin Peng", "In Kee Kim", "Kyu Hyung Lee", "Sen He"], "title": "Beyond Single LLMs: Enhanced Code Generation via Multi-Stage Performance-Guided LLM Orchestration", "comment": null, "summary": "While Large Language Models (LLMs) have become the predominant paradigm for\nautomated code generation, current single-model approaches fundamentally ignore\nthe heterogeneous computational strengths that different models exhibit across\nprogramming languages, algorithmic domains, and development stages. This paper\nchallenges the single-model convention by introducing a multi-stage,\nperformance-guided orchestration framework that dynamically routes coding tasks\nto the most suitable LLMs within a structured generate-fix-refine workflow. Our\napproach is grounded in a comprehensive empirical study of 17 state-of-the-art\nLLMs across five programming languages (Python, Java, C++, Go, and Rust) using\nHumanEval-X benchmark. The study, which evaluates both functional correctness\nand runtime performance metrics (execution time, mean/max memory utilization,\nand CPU efficiency), reveals pronounced performance heterogeneity by language,\ndevelopment stage, and problem category. Guided by these empirical insights, we\npresent PerfOrch, an LLM agent that orchestrates top-performing LLMs for each\ntask context through stage-wise validation and rollback mechanisms. Without\nrequiring model fine-tuning, PerfOrch achieves substantial improvements over\nstrong single-model baselines: average correctness rates of 96.22% and 91.37%\non HumanEval-X and EffiBench-X respectively, surpassing GPT-4o's 78.66% and\n49.11%. Beyond correctness gains, the framework delivers consistent performance\noptimizations, improving execution time for 58.76% of problems with median\nspeedups ranging from 17.67% to 27.66% across languages on two benchmarks. The\nframework's plug-and-play architecture ensures practical scalability, allowing\nnew LLMs to be profiled and integrated seamlessly, thereby offering a paradigm\nfor production-grade automated software engineering that adapts to the rapidly\nevolving generative AI landscape.", "AI": {"tldr": "Instead of relying on a single LLM for code generation, using a performance-guided framework to route tasks among multiple top-performing models yields much better correctness and speed, and is scalable for future AI advances.", "motivation": "Current code generation approaches use a single language model, ignoring the varied computational strengths of different models across programming languages, problem types, and stages of software development.", "method": "Comprehensive empirical evaluation of 17 state-of-the-art LLMs across five programming languages on code generation tasks, using correctness and performance metrics. Based on these insights, a multi-stage, performance-guided orchestration framework called PerfOrch was designed, which routes tasks dynamically among models in a generate-fix-refine workflow, with stage-wise validation and rollback mechanisms.", "result": "PerfOrch, without requiring model fine-tuning, achieves substantially higher correctness (up to 96.22% on HumanEval-X and 91.37% on EffiBench-X) compared to GPT-4o and other single-model baselines. It also improves runtime performance across benchmarks, with median speedups between 17.67% and 27.66%. The system is scalable and supports seamless integration of new LLMs.", "conclusion": "A multi-model orchestration framework can significantly outperform single-model approaches to code generation in both correctness and efficiency, and the plug-and-play architecture enables scalable, adaptable automated software engineering workflows."}}
{"id": "2510.01514", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.01514", "abs": "https://arxiv.org/abs/2510.01514", "authors": ["J. Alexander Curtis", "Sharadha Kasiviswanathan", "Nasir Eisty"], "title": "Deciphering WONTFIX: A Mixed-Method Study on Why GitHub Issues Get Rejected", "comment": null, "summary": "Context: The ``wontfix'' label is a widely used yet narrowly understood tool\nin GitHub repositories, indicating that an issue will not be pursued further.\nDespite its prevalence, the impact of this label on project management and\ncommunity dynamics within open-source software development is not clearly\ndefined. Objective: This study examines the prevalence and reasons behind\nissues being labeled as wontfix across various open-source repositories on\nGitHub. Method: Employing a mixed-method approach, we analyze both quantitative\ndata to assess the prevalence of the wontfix label and qualitative data to\nexplore the reasoning that it was used. Data were collected from 3,132 of\nGitHub's most-popular repositories. Later, we employ open coding and thematic\nanalysis to categorize the reasons behind wontfix labels, providing a\nstructured understanding of the issue management landscape. Results: Our\nfindings show that about 30% of projects on GitHub apply the wontfix label to\nsome issues. These issues most often occur on user-submitted issues for bug\nreports and feature requests. The study identified eight common themes behind\nlabeling issues as wontfix, ranging from user-specific control factors to\nmaintainer-specific decisions. Conclusions: The wontfix label is a critical\ntool for managing resources and guiding contributor efforts in GitHub projects.\nHowever, it can also discourage community involvement and obscure the\ntransparency of project management. Understanding these reasons aids project\nmanagers in making informed decisions and fostering efficient collaboration\nwithin open-source communities.", "AI": {"tldr": "The paper analyzes why and how the 'wontfix' label is used in popular GitHub repositories. It finds that about 30% of projects employ this label, mostly on bug reports and feature requests, with eight main reasons identified. While useful for project management, the label can hinder community participation and transparency.", "motivation": "Despite frequent use, the actual impact and rationale for applying the wontfix label in open-source projects is unclear, affecting both management and community dynamics.", "method": "A mixed-method approach, analyzing both quantitative repository data and qualitative open coding/thematic analysis on the reasoning behind the wontfix label usage.", "result": "About 30% of projects on GitHub use the wontfix label, commonly on user-submitted bug reports and feature requests. Eight main themes for its usage were identified, showing diverse rationale from user-related issues to maintainer decisions.", "conclusion": "The wontfix label is an important resource management tool in GitHub projects but may also discourage community engagement and reduce transparency."}}
{"id": "2510.01635", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.01635", "abs": "https://arxiv.org/abs/2510.01635", "authors": ["Yifei Chen", "Sarra Habchi", "Lili Wei"], "title": "MIMIC: Integrating Diverse Personality Traits for Better Game Testing Using Large Language Model", "comment": "13 pages, 7 figures, 6 tables. This paper is accepted by the 40th\n  IEEE/ACM International Conference on Automated Software Engineering, ASE 2025", "summary": "Modern video games pose significant challenges for traditional automated\ntesting algorithms, yet intensive testing is crucial to ensure game quality. To\naddress these challenges, researchers designed gaming agents using\nReinforcement Learning, Imitation Learning, or Large Language Models. However,\nthese agents often neglect the diverse strategies employed by human players due\nto their different personalities, resulting in repetitive solutions in similar\nsituations. Without mimicking varied gaming strategies, these agents struggle\nto trigger diverse in-game interactions or uncover edge cases.\n  In this paper, we present MIMIC, a novel framework that integrates diverse\npersonality traits into gaming agents, enabling them to adopt different gaming\nstrategies for similar situations. By mimicking different playstyles, MIMIC can\nachieve higher test coverage and richer in-game interactions across different\ngames. It also outperforms state-of-the-art agents in Minecraft by achieving a\nhigher task completion rate and providing more diverse solutions. These results\nhighlight MIMIC's significant potential for effective game testing.", "AI": {"tldr": "MIMIC improves automated game testing by mimicking varied human playstyles, yielding better coverage and diversity of interactions than previous agents.", "motivation": "Traditional automated testing methods in video games are insufficient because they fail to replicate the diverse strategies and playstyles of human players, limiting the ability to uncover edge cases and achieve thorough test coverage.", "method": "The paper introduces MIMIC, a framework that integrates personality traits into gaming agents. These agents can mimic different human playstyles and strategies in similar game scenarios, leading to more varied gameplay behaviors.", "result": "MIMIC demonstrates improved test coverage and richer in-game interactions across multiple games. In Minecraft, it outperforms existing state-of-the-art agents by achieving a higher task completion rate and generating more diverse solutions.", "conclusion": "MIMIC enables gaming agents to better reflect human diversity, thus triggering more game scenarios and edge cases, improving the effectiveness of automated game testing."}}
{"id": "2510.01740", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.01740", "abs": "https://arxiv.org/abs/2510.01740", "authors": ["Kypros Iacovou", "Georgia M. Kapitsaki", "Evangelia Vanezi"], "title": "FOSS-chain: using blockchain for Open Source Software license compliance", "comment": null, "summary": "Open Source Software (OSS) is widely used and carries licenses that indicate\nthe terms under which the software is provided for use, also specifying\nmodification and distribution rules. Ensuring that users are respecting OSS\nlicense terms when creating derivative works is a complex process. Compliance\nissues arising from incompatibilities among licenses may lead to legal\ndisputes. At the same time, the blockchain technology with immutable entries\noffers a mechanism to provide transparency when it comes to licensing and\nensure software changes are recorded. In this work, we are introducing an\nintegration of blockchain and license management when creating derivative\nworks, in order to tackle the issue of OSS license compatibility. We have\ndesigned, implemented and performed a preliminary evaluation of FOSS-chain, a\nweb platform that uses blockchain and automates the license compliance process,\ncovering 14 OSS licenses. We have evaluated the initial prototype version of\nthe FOSS-chain platform via a small scale user study. Our preliminary results\nare promising, demonstrating the potential of the platform for adaptation on\nrealistic software systems.", "AI": {"tldr": "This paper presents FOSS-chain, a blockchain-based web platform to automate open source license compliance for derivative works. Covering 14 OSS licenses, FOSS-chain showed promising results in a small user study, indicating its potential to address license compatibility and transparency issues in OSS development.", "motivation": "Ensuring compliance with OSS license terms in derivative works is complex, with compatibility issues leading to legal risks. Current processes lack transparency and automation.", "method": "The paper introduces FOSS-chain, a web platform integrating blockchain technology to automate and ensure OSS license compliance when creating derivative works. The system covers 14 OSS licenses and logs all actions immutably for transparency. A preliminary evaluation was conducted via a small user study.", "result": "The initial prototype of FOSS-chain was tested in a small-scale user study. The results indicated promise in automating license compliance and transparency, suggesting potential for real-world adaptation.", "conclusion": "Blockchain can improve OSS license management by enabling transparent, automated compliance. FOSS-chain demonstrates feasibility and potential, though further, larger-scale validation is needed."}}
{"id": "2510.01754", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.01754", "abs": "https://arxiv.org/abs/2510.01754", "authors": ["Hina Anwar"], "title": "ARENA: A tool for measuring and analysing the energy efficiency of Android apps", "comment": null, "summary": "To build energy-efficient apps, there is a need to estimate and analyze their\nenergy consumption in typical usage scenarios. The energy consumption of\nAndroid apps could be estimated via software-based and hardware-based\napproaches. Software-based approaches, while easier to implement, are not as\naccurate as hardware-based approaches. The process of measuring the energy\nconsumption of an Android app via a hardware-based approach typically involves\n1) setting up a measurement environment, 2) executing the app under test on a\nmobile device, 3) recording current/voltage data via a hardware device to\nmeasure energy consumption, and 4) cleaning and aggregating data for analyses,\nreports, and visualizations. Specialized scripts are written for selected\nhardware and software components to ensure reliable energy measurements. The\nenergy measurement process is repeated many times and aggregated to remove\nnoise. These steps make the hardware-based energy measurement process\ntime-consuming and not easy to adapt or reproduce. There is a lack of\nopen-source tools available for developers and researchers to take reliable\nenergy measurements via hardware devices. In this paper, we present and\ndemonstrate ARENA, a support tool that enables developers and researchers to\nconnect to a physical measurement device without leaving the comfort of their\nIDE. Developers could use ARENA during development to compare energy\nconsumption between different apps or versions of the same app. ARENA\ncalculates energy consumption on an Android smartphone by executing a test\nscenario on the app under development. Further, ARENA helps aggregate,\nstatistically analyze, report, and visualize the data, allowing developers and\nresearchers to dig into the data directly or visually. We implemented ARENA as\nan IntelliJ and Android Studio plugin.", "AI": {"tldr": "Accurately measuring Android app energy use is hard with current hardware methods. ARENA, a plugin for IntelliJ and Android Studio, streamlines this process by integrating measurement, analysis, and visualization directly into the IDE, making it much easier for developers.", "motivation": "Developers and researchers need to accurately and efficiently measure the energy consumption of Android apps to build energy-efficient applications. Current hardware-based measurement processes are complex, time-consuming, and difficult to reproduce, with a lack of open-source tools that facilitate reliable measurements integrated within development environments.", "method": "The authors designed and implemented ARENA, a tool integrated as a plugin for IntelliJ and Android Studio. ARENA connects to physical energy measurement devices, automates the experimental workflow (setup, execution, data collection, cleaning, aggregation, and visualization), and allows comparative analysis of app energy consumption directly within the IDE.", "result": "ARENA enables developers and researchers to seamlessly perform hardware-based energy measurements, compare different app versions, and efficiently analyze, report, and visualize energy usage data, all from within their familiar development environments.", "conclusion": "ARENA significantly reduces the barrier and effort required for reliable hardware-based energy measurement and analysis of Android apps, making the process easier, more reproducible, and accessible to both developers and researchers."}}
{"id": "2510.01825", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.01825", "abs": "https://arxiv.org/abs/2510.01825", "authors": ["Zhenyu Yang", "Yue Pan", "Zhen Yang", "Zhongxing Yu"], "title": "Towards Speeding up Program Repair with Non-Autoregressive Model", "comment": "30 pages, 8 figures, 7 tables. arXiv admin note: substantial text\n  overlap with arXiv:2406.16526", "summary": "Enlightened by the success of machine learning techniques in various\napplication areas, recent years have witnessed a surge of research efforts on\nautomatic program repair (APR) using machine learning techniques. Previous\nmachine learning-based APR techniques essentially modified bugs in the\nautoregressive (AR) manner, which predicts future values based on past values.\nDue to the manner of token-by-token generation, the AR-based APR technique has\na huge time delay. In particular, the delay of the APR model with a large\nnumber of parameters is more serious. To address the issue, we aim to apply the\nnon-autoregressive (NAR) method to the APR task, which can output target code\nin a parallel manner to avoid huge repair delays. However, the naive use of the\nNAR manner for the APR task suffers from the issue of compromised patch\nquality. To effectively adapt the NAR manner for the APR task, we in this paper\npropose NARRepair, the first customized NAR code generation model for the APR\ntask. The NARRepair model features three major novelties, including 1) the\nrepair action predictor for alleviating the over-correction issue, 2) the\ninter-token dependency extractor for alleviating the issue of lacking\ninter-token dependency information, and 3) the two-stage decoder for\nalleviating the issue of lacking contextual information. We evaluated NARRepair\non three widely used datasets in the APR community, and the results show that\n1) compared to other APR techniques, the NARRepair model has the best\nperformance within the limited repair time, and 2) compared to AR-based APR\ntechniques, the repair speed of NARRepair has been increased by 1.4-6.4 times\nin the GPU environment. Overall, the results show that NARRepair has achieved\nstate-of-the-art comprehensive performance in terms of repair speed and\naccuracy.", "AI": {"tldr": "Traditional machine learning approaches for program repair are slow due to sequential generation. This paper introduces NARRepair, the first non-autoregressive model for APR, which is much faster and matches or beats existing methods on both speed and accuracy thanks to several smart design choices.", "motivation": "Current machine learning-based automatic program repair (APR) methods use autoregressive (AR) models, which suffer from significant delays during the bug fixing process due to their token-by-token generation process. These delays become worse as model size increases.", "method": "The authors propose NARRepair, a novel non-autoregressive (NAR) code generation model specifically customized for APR. It addresses AR limitations using three key innovations: a repair action predictor (reduces over-correction), an inter-token dependency extractor (improves token relationships), and a two-stage decoder (enhances contextual understanding).", "result": "Experiments on three popular APR datasets show that NARRepair dramatically improves repair speed (1.4-6.4x faster than AR-based models) and achieves superior performance in limited repair time. It reaches state-of-the-art results in both repair speed and accuracy.", "conclusion": "NARRepair is a significant advance in machine learning-based APR: by leveraging non-autoregressive modeling and tailored innovations, it delivers faster and more accurate program repairs than prior techniques."}}
{"id": "2510.01960", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.01960", "abs": "https://arxiv.org/abs/2510.01960", "authors": ["Victor Lira", "Paulo Borba", "Rodrigo Bonif\u00e1cio", "Galileu Santos e Matheus barbosa"], "title": "RefFilter: Improving Semantic Conflict Detection via Refactoring-Aware Static Analysis", "comment": null, "summary": "Detecting semantic interference remains a challenge in collaborative software\ndevelopment. Recent lightweight static analysis techniques improve efficiency\nover SDG-based methods, but they still suffer from a high rate of false\npositives. A key cause of these false positives is the presence of\nbehavior-preserving code refactorings, which current techniques cannot\neffectively distinguish from changes that impact behavior and can interfere\nwith others. To handle this problem we present RefFilter, a refactoring-aware\ntool for semantic interference detection. It builds on existing static\ntechniques by incorporating automated refactoring detection to improve\nprecision. RefFilter discards behavior-preserving refactorings from reports,\nreducing false positives while preserving detection coverage. To evaluate\neffectiveness and scalability, use two datasets: a labeled dataset with 99\nscenarios and ground truth, and a novel dataset of 1,087 diverse merge\nscenarios that we have built. Experimental results show that RefFilter reduces\nfalse positives by nearly 32% on the labeled dataset. While this reduction\ncomes with a non significant increase in false negatives, the overall gain in\nprecision significantly outweighs the minor trade-off in recall. These findings\ndemonstrate that refactoring-aware interference detection is a practical and\neffective strategy for improving merge support in modern development workflows.", "AI": {"tldr": "RefFilter is a novel tool that uses automated refactoring detection to filter out harmless code changes, reducing false positives in interference detection by 32%, thus making merge conflict detection more accurate and practical for developers.", "motivation": "Collaborative software development often faces challenges due to semantic interference caused by code changes, with current static analysis methods yielding many false positives, particularly from behavior-preserving code refactorings.", "method": "The paper introduces RefFilter, a static analysis tool that automatically detects refactorings and filters out behavior-preserving code changes to improve accuracy in semantic interference detection.", "result": "RefFilter significantly reduced false positives by almost 32% in the labeled dataset, with only a minor, statistically insignificant rise in false negatives, leading to an overall increase in precision.", "conclusion": "Refactoring-aware semantic interference detection, as implemented in RefFilter, presents an effective approach to enhance merge support processes, offering marked improvements in precision for software development workflows."}}
{"id": "2510.01994", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.01994", "abs": "https://arxiv.org/abs/2510.01994", "authors": ["Chen Yang", "Lin Yang", "Ziqi Wang", "Dong Wang", "Jianyi Zhou", "Junjie Chen"], "title": "Clarifying Semantics of In-Context Examples for Unit Test Generation", "comment": "accepted in the research track of ASE 2025", "summary": "Recent advances in large language models (LLMs) have enabled promising\nperformance in unit test generation through in-context learning (ICL). However,\nthe quality of in-context examples significantly influences the effectiveness\nof generated tests-poorly structured or semantically unclear test examples\noften lead to suboptimal outputs. In this paper, we propose CLAST, a novel\ntechnique that systematically refines unit tests to improve their semantic\nclarity, thereby enhancing their utility as in-context examples. The approach\ndecomposes complex tests into logically clearer ones and improves semantic\nclarity through a combination of program analysis and LLM-based rewriting. We\nevaluated CLAST on four open-source and three industrial projects. The results\ndemonstrate that CLAST largely outperforms UTgen, the state-of-the-art\nrefinement technique, in both preserving test effectiveness and enhancing\nsemantic clarity. Specifically, CLAST fully retains the original effectiveness\nof unit tests, while UTgen reduces compilation success rate (CSR), pass rate\n(PR), test coverage (Cov), and mutation score (MS) by an average of 12.90%,\n35.82%, 4.65%, and 5.07%, respectively. Over 85.33% of participants in our user\nstudy preferred the semantic clarity of CLAST-refined tests. Notably,\nincorporating CLAST-refined tests as examples effectively improves ICL-based\nunit test generation approaches such as RAGGen and TELPA, resulting in an\naverage increase of 25.97% in CSR, 28.22% in PR, and 45.99% in Cov for\ngenerated tests, compared to incorporating UTgen-refined tests. The insights\nfrom the follow-up user study not only reinforce CLAST's potential impact in\nsoftware testing practice but also illuminate avenues for future research.", "AI": {"tldr": "CLAST is a new technique for refining unit tests to boost their clarity, outperforming the current standard (UTgen) and enhancing LLM-driven test generation through better in-context examples. Benchmarks and user studies confirm its effectiveness.", "motivation": "Effective unit test generation with LLMs is heavily dependent on the quality of in-context examples. Poorly structured or unclear tests reduce generation quality; thus, improving semantic clarity of example tests is crucial.", "method": "CLAST leverages program analysis and LLM-based rewriting to decompose and refine complex unit tests, making them more logically clear and semantically precise. Comparative evaluation was conducted against UTgen and through user studies.", "result": "CLAST fully retains original test effectiveness. It outperformed UTgen, which reduced effectiveness metrics significantly. User studies showed over 85% preference for CLAST-refined tests' clarity. When used as examples for ICL-based test generation, CLAST led to substantial improvements in generated tests\u2019 compilation success rate, pass rate, and coverage.", "conclusion": "CLAST significantly improves the semantic clarity of unit tests used as in-context examples, outperforming existing refinement techniques and positively impacting LLM-based test generation."}}
{"id": "2510.02002", "categories": ["cs.SE", "D.2.1; D.2.2; D.2.3; D.3.4; G.1.6"], "pdf": "https://arxiv.org/pdf/2510.02002", "abs": "https://arxiv.org/abs/2510.02002", "authors": ["Maximilian Kratz", "Steffen Zschaler", "Jens Kosiol", "Gabriele Taentzer"], "title": "Automatic Generation of Combinatorial Reoptimisation Problem Specifications: A Vision", "comment": null, "summary": "Once an optimisation problem has been solved, the solution may need\nadaptation when contextual factors change. This challenge, also known as\nreoptimisation, has been addressed in various problem domains, such as railway\ncrew rescheduling, nurse rerostering, or aircraft recovery. This requires a\nmodified problem to be solved again to ensure that the adapted solution is\noptimal in the new context. However, the new optimisation problem differs\nnotably from the original problem: (i) we want to make only minimal changes to\nthe original solution to minimise the impact; (ii) we may be unable to change\nsome parts of the original solution (e.g., because they refer to past\nallocations); and (iii) we need to derive a change script from the original\nsolution to the new solution. In this paper, we argue that Model-Driven\nEngineering (MDE) - in particular, the use of declarative modelling languages\nand model transformations for the high-level specification of optimisation\nproblems - offers new opportunities for the systematic derivation of\nreoptimisation problems from the original optimisation problem specification.\nWe focus on combinatorial reoptimisation problems and provide an initial\ncategorisation of changing problems and strategies for deriving the\ncorresponding reoptimisation specifications. We introduce an initial\nproof-of-concept implementation based on the GIPS (Graph-Based (Mixed) Integer\nLinear Programming Problem Specification) tool and apply it to an example\nresource-allocation problem: the allocation of teaching assistants to teaching\nsessions.", "AI": {"tldr": "The paper addresses the need to efficiently adapt solutions to optimisation problems when circumstances change, introducing a model-driven engineering approach for systematically deriving reoptimisation specifications. They illustrate their method using a tool and a practical example involving resource allocation.", "motivation": "When real-world conditions change, existing solutions to optimisation problems need minimal, targeted updates, rather than complete re-solutions. Current approaches lack systematicity in specifying and solving these reoptimisation tasks. The paper aims to address this gap by leveraging model-driven techniques.", "method": "The authors leverage declarative modelling languages and model transformations to systematically derive reoptimisation specifications. They offer a proof-of-concept implementation using the GIPS tool and demonstrate their approach with a resource allocation case study.", "result": "The paper delivers an initial categorisation framework for reoptimisation problems and strategies, provides a proof-of-concept implementation, and successfully applies the approach to a teaching assistant allocation problem, demonstrating feasibility.", "conclusion": "Model-Driven Engineering can facilitate the structured derivation of reoptimisation problems, making adaptations more systematic and potentially less disruptive. Their implementation shows initial promise for practical applications."}}
{"id": "2510.02007", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02007", "abs": "https://arxiv.org/abs/2510.02007", "authors": ["Justus Bogner", "Roberto Verdecchia"], "title": "ACM SIGSOFT SEN Empirical Software Engineering: Introducing Our New Regular Column", "comment": "Published in ACM SIGSOFT Software Engineering Notes (SIGSOFT-SEN).\n  Volume 50, Issue 4, 2025", "summary": "From its early foundations in the 1970s, empirical software engineering (ESE)\nhas evolved into a mature research discipline that embraces a plethora of\ndifferent topics, methodologies, and industrial practices. Despite its\nremarkable progress, the ESE research field still needs to keep evolving, as\nnew impediments, shortcoming, and technologies emerge. Research\nreproducibility, limited external validity, subjectivity of reviews, and\nporting research results to industrial practices are just some examples of the\ndrivers for improvements to ESE research. Additionally, several facets of ESE\nresearch are not documented very explicitly, which makes it difficult for\nnewcomers to pick them up. With this new regular ACM SIGSOFT SEN column\n(SEN-ESE), we introduce a venue for discussing meta-aspects of ESE research,\nranging from general topics such as the nature and best practices for\nreplication packages, to more nuanced themes such as statistical methods,\ninterview transcription tools, and publishing interdisciplinary research. Our\naim for the column is to be a place where we can regularly spark conversations\non ESE topics that might not often be touched upon or are left implicit.\nContributions to this column will be grounded in expert interviews, focus\ngroups, surveys, and position pieces, with the goal of encouraging reflection\nand improvement in how we conduct, communicate, teach, and ultimately improve\nESE research. Finally, we invite feedback from the ESE community on\nchallenging, controversial, or underexplored topics, as well as suggestions for\nvoices you would like to hear from. While we cannot promise to act on every\nidea, we aim to shape this column around the community interests and are\ngrateful for all contributions.", "AI": {"tldr": "SEN-ESE is a new ACM SIGSOFT SEN column dedicated to discussing overlooked meta-issues in empirical software engineering research, inviting community input and fostering better practices.", "motivation": "Despite advances, ESE research faces ongoing challenges such as reproducibility, external validity, subjective reviews, and industry adoption; documentation gaps make it hard for newcomers to learn the field.", "method": "The column will feature content based on expert interviews, focus groups, surveys, and position papers, covering meta-aspects of ESE such as replication best practices and statistical methods.", "result": "SEN-ESE introduces regular conversations on under-discussed or implicit ESE topics, inviting contributions and feedback to shape the direction of the column according to community interests.", "conclusion": "The new SEN-ESE column aims to foster continuous reflection and improvement in empirical software engineering (ESE) research by providing a forum for meta-discussions and community input."}}
{"id": "2510.02165", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02165", "abs": "https://arxiv.org/abs/2510.02165", "authors": ["Peter Wauyo", "Dalia Bwiza", "Alain Murara", "Edwin Mugume", "Eric Umuhoza"], "title": "Towards fairer public transit: Real-time tensor-based multimodal fare evasion and fraud detection", "comment": "10 pages", "summary": "This research introduces a multimodal system designed to detect fraud and\nfare evasion in public transportation by analyzing closed circuit television\n(CCTV) and audio data. The proposed solution uses the Vision Transformer for\nVideo (ViViT) model for video feature extraction and the Audio Spectrogram\nTransformer (AST) for audio analysis. The system implements a Tensor Fusion\nNetwork (TFN) architecture that explicitly models unimodal and bimodal\ninteractions through a 2-fold Cartesian product. This advanced fusion technique\ncaptures complex cross-modal dynamics between visual behaviors (e.g.,\ntailgating,unauthorized access) and audio cues (e.g., fare transaction sounds).\nThe system was trained and tested on a custom dataset, achieving an accuracy of\n89.5%, precision of 87.2%, and recall of 84.0% in detecting fraudulent\nactivities, significantly outperforming early fusion baselines and exceeding\nthe 75% recall rates typically reported in state-of-the-art transportation\nfraud detection systems. Our ablation studies demonstrate that the tensor\nfusion approach provides a 7.0% improvement in the F1 score and an 8.8% boost\nin recall compared to traditional concatenation methods. The solution supports\nreal-time detection, enabling public transport operators to reduce revenue\nloss, improve passenger safety, and ensure operational compliance.", "AI": {"tldr": "This paper presents a multimodal system that fuses video and audio data using advanced tensor fusion techniques to significantly improve real-time detection of fare evasion and fraud in public transport, outperforming previous approaches in accuracy and recall.", "motivation": "Current public transportation systems face significant revenue loss and operational challenges due to fraud and fare evasion, which are difficult to automatically detect using unimodal approaches.", "method": "The researchers developed a multimodal detection system combining CCTV video data (using ViViT) and audio data (using AST). These features are fused using a Tensor Fusion Network (TFN) that models complex unimodal and bimodal interactions, achieving more nuanced detection of fraudulent activity.", "result": "The system achieved 89.5% accuracy, 87.2% precision, and 84.0% recall on a custom dataset, outperforming typical recall rates (75%) in prior work and showing significant improvements in F1 score and recall over simpler fusion methods.", "conclusion": "Tensor fusion of video and audio data enables real-time, robust detection of public transportation fraud and fare evasion, offering clear benefits in operational compliance, safety, and revenue protection."}}
{"id": "2510.02166", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.02166", "abs": "https://arxiv.org/abs/2510.02166", "authors": ["Fatou Ndiaye Mbodji", "El-hacen Diallo", "Jordan Samhi", "Kui Liu", "Jacques Klein", "Tegawend\u00e9 F. Bissyande"], "title": "SIEVE: Towards Verifiable Certification for Code-datasets", "comment": "5", "summary": "Code agents and empirical software engineering rely on public code datasets,\nyet these datasets lack verifiable quality guarantees. Static 'dataset cards'\ninform, but they are neither auditable nor do they offer statistical\nguarantees, making it difficult to attest to dataset quality. Teams build\nisolated, ad-hoc cleaning pipelines. This fragments effort and raises cost. We\npresent SIEVE, a community-driven framework. It turns per-property checks into\nConfidence Cards-machine-readable, verifiable certificates with anytime-valid\nstatistical bounds. We outline a research plan to bring SIEVE to maturity,\nreplacing narrative cards with anytime-verifiable certification. This shift is\nexpected to lower quality-assurance costs and increase trust in code-datasets.", "AI": {"tldr": "Current code dataset quality assurance is fragmented and costly. SIEVE is proposed as a community-driven framework offering machine-verifiable, statistically bounded certificates (Confidence Cards) to improve dataset quality assurance, reduce costs, and increase trust.", "motivation": "Code agents and empirical software engineering heavily rely on public code datasets, but there is currently no verifiable guarantee of the quality of these datasets. Existing methods like static dataset cards lack statistical and auditable assurance, causing reliability and cost issues.", "method": "The authors propose SIEVE, a community-driven framework that transforms property checks into 'Confidence Cards,' which are machine-readable, verifiable certificates offering statistical guarantees that are valid at any time.", "result": "SIEVE introduces statistical bounds and verifiable certification for code datasets, aiming to reduce fragmentation, lower quality-assurance costs, and increase dataset reliability.", "conclusion": "Transitioning from narrative dataset cards to SIEVE's verifiable Confidence Cards will enhance the trustworthiness and accessibility of quality data, benefiting teams in terms of effectiveness and cost."}}
{"id": "2510.02169", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2510.02169", "abs": "https://arxiv.org/abs/2510.02169", "authors": ["Vadim Safronov", "Anthony McCaigue", "Nicholas Allott", "Andrew Martin"], "title": "TAIBOM: Bringing Trustworthiness to AI-Enabled Systems", "comment": "This paper has been accepted at the First International Workshop on\n  Security and Privacy-Preserving AI/ML (SPAIML 2025), co-located with the 28th\n  European Conference on Artificial Intelligence (ECAI 2025)", "summary": "The growing integration of open-source software and AI-driven technologies\nhas introduced new layers of complexity into the software supply chain,\nchallenging existing methods for dependency management and system assurance.\nWhile Software Bills of Materials (SBOMs) have become critical for enhancing\ntransparency and traceability, current frameworks fall short in capturing the\nunique characteristics of AI systems -- namely, their dynamic, data-driven\nnature and the loosely coupled dependencies across datasets, models, and\nsoftware components. These challenges are compounded by fragmented governance\nstructures and the lack of robust tools for ensuring integrity, trust, and\ncompliance in AI-enabled environments.\n  In this paper, we introduce Trusted AI Bill of Materials (TAIBOM) -- a novel\nframework extending SBOM principles to the AI domain. TAIBOM provides (i) a\nstructured dependency model tailored for AI components, (ii) mechanisms for\npropagating integrity statements across heterogeneous AI pipelines, and (iii) a\ntrust attestation process for verifying component provenance. We demonstrate\nhow TAIBOM supports assurance, security, and compliance across AI workflows,\nhighlighting its advantages over existing standards such as SPDX and CycloneDX.\nThis work lays the foundation for trustworthy and verifiable AI systems through\nstructured software transparency.", "AI": {"tldr": "Existing SBOM frameworks aren't equipped for the unique dependency and trust challenges of AI systems. TAIBOM extends SBOM principles with AI-specific features for dependency modeling, integrity propagation, and provenance attestation, leading to more secure, compliant, and transparent AI workflows.", "motivation": "Traditional Software Bills of Materials (SBOMs) are insufficient for capturing the complexity and characteristics of AI-driven software systems, which often involve dynamic, loosely coupled dependencies across datasets, models, and code. Fragmented governance and a lack of robust verification tools further exacerbate trust and compliance challenges.", "method": "The authors present TAIBOM\u2014Trusted AI Bill of Materials\u2014a framework that extends the principles of SBOMs to the AI domain. TAIBOM introduces a tailored dependency model for AI components, propagates integrity statements across diverse AI pipelines, and establishes a trust attestation process for verifying provenance of components.", "result": "TAIBOM is shown to support improved assurance, security, and compliance in AI workflows and demonstrates advantages over existing standards such as SPDX and CycloneDX. The framework provides structured transparency and traceability specific to AI-enabled environments.", "conclusion": "TAIBOM lays the groundwork for trustworthy and verifiable AI systems through enhanced transparency, integrity, and trust verification in software supply chains."}}
{"id": "2510.02185", "categories": ["cs.SE", "cs.CR", "cs.MA", "D.2.4; F.3.1"], "pdf": "https://arxiv.org/pdf/2510.02185", "abs": "https://arxiv.org/abs/2510.02185", "authors": ["Paschal C. Amusuo", "Dongge Liu", "Ricardo Andres Calvo Mendez", "Jonathan Metzman", "Oliver Chang", "James C. Davis"], "title": "FalseCrashReducer: Mitigating False Positive Crashes in OSS-Fuzz-Gen Using Agentic AI", "comment": "12 pages, 2 figures", "summary": "Fuzz testing has become a cornerstone technique for identifying software bugs\nand security vulnerabilities, with broad adoption in both industry and\nopen-source communities. Directly fuzzing a function requires fuzz drivers,\nwhich translate random fuzzer inputs into valid arguments for the target\nfunction. Given the cost and expertise required to manually develop fuzz\ndrivers, methods exist that leverage program analysis and Large Language Models\nto automatically generate these drivers. However, the generated fuzz drivers\nfrequently lead to false positive crashes, especially in functions highly\nstructured input and complex state requirements. This problem is especially\ncrucial in industry-scale fuzz driver generation efforts like OSS-Fuzz-en, as\nreporting false positive crashes to maintainers impede trust in both the system\nand the team.\n  This paper presents two AI-driven strategies to reduce false positives in\nOSS-Fuzz-Gen, a multi-agent system for automated fuzz driver generation. First,\nconstraint-based fuzz driver generation proactively enforces constraints on a\nfunction's inputs and state to guide driver creation. Second, context-based\ncrash validation reactively analyzes function callers to determine whether\nreported crashes are feasible from program entry points. Using 1,500 benchmark\nfunctions from OSS-Fuzz, we show that these strategies reduce spurious crashes\nby up to 8%, cut reported crashes by more than half, and demonstrate that\nfrontier LLMs can serve as reliable program analysis agents. Our results\nhighlight the promise and challenges of integrating AI into large-scale fuzzing\npipelines.", "AI": {"tldr": "AI-driven strategies that enforce input constraints and validate crashes contextually can effectively reduce false positives in automated fuzz driver generation, halving reported crashes and increasing trust in large-scale fuzzing efforts like OSS-Fuzz-Gen.", "motivation": "Fuzz testing is widely used to find software bugs and security vulnerabilities, but manually creating fuzz drivers for each function is costly and requires expertise. Automated methods exist, but often lead to false positive crashes, which is a significant problem, especially on large-scale projects like OSS-Fuzz-Gen.", "method": "The paper introduces two AI-driven strategies within OSS-Fuzz-Gen: (1) constraint-based fuzz driver generation, which proactively enforces input and state constraints during driver creation, and (2) context-based crash validation, which reactively analyzes function callers to determine real feasibility of reported crashes from entry points.", "result": "On a benchmark of 1,500 OSS-Fuzz functions, the strategies reduced spurious (false positive) crashes by up to 8%, decreased total reported crashes by over 50%, and illustrated the effectiveness of advanced language models as program analysis agents.", "conclusion": "Integrating AI, particularly with constraint enforcement and context-aware crash validation, can significantly reduce false positives in automated fuzz driver generation and reporting. This improves the reliability and trust in large-scale fuzzing pipelines, though challenges remain."}}
