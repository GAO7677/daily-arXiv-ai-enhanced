{"id": "2509.25196", "categories": ["cs.SE", "cs.AI", "cs.LG", "cs.PL"], "pdf": "https://arxiv.org/pdf/2509.25196", "abs": "https://arxiv.org/abs/2509.25196", "authors": ["Hua Zhong", "Shan Jiang", "Sarfraz Khurshid"], "title": "APRIL: API Synthesis with Automatic Prompt Optimization and Reinforcement Learning", "comment": null, "summary": "APIs are central to modern software development, yet composing new APIs from\nlarge libraries is difficult due to the exponential search space; traditional\ncomponent-based synthesis relies on costly exploration and hand-crafted\nspecifications. While large language models (LLMs) can generate implementations\nfrom natural language, hallucinations and limited access to up-to-date\ncontextual information often yield incorrect code. In this paper, we present\nAPRIL, an approach that combines LLM-based synthesis with Automatic Prompt\nOptimization (APO) and Reinforcement Learning from Verifiable Rewards (RLVR):\nAPO iteratively refines prompts for a frozen model, while RLVR fine-tunes the\npolicy toward functional correctness, producing an efficient synthesis\npipeline. Evaluated on 81 real-world APIs from widely used scientific Python\nlibraries and benchmarked against instruction-tuned but unfine-tuned LLMs\nguided by expert prompts, APRIL achieves substantial improvements. These\nresults indicate that integrating APO and RLVR provides a robust, scalable path\nfor component-based API synthesis in large libraries.", "AI": {"tldr": "APRIL combines prompt optimization and reinforcement learning to boost LLM-driven API synthesis, greatly improving code correctness and scalability for big Python libraries over traditional methods.", "motivation": "Composing new APIs from large libraries is challenging due to the exponential search space and the limitations of existing synthesis methods, which involve costly exploration and manual specifications. LLMs offer potential for code generation but struggle with hallucinations and lack contextual relevance.", "method": "APRIL is introduced as a synthesis approach that synergizes LLM-based code generation with two techniques: Automatic Prompt Optimization (APO), which iteratively improves prompts for a fixed (frozen) LLM model, and Reinforcement Learning from Verifiable Rewards (RLVR), which fine-tunes the policy to favor functionally correct outputs.", "result": "APRIL is evaluated on 81 real-world APIs from popular scientific Python libraries. Against instruction-tuned but unfine-tuned LLMs with expert guidance, APRIL demonstrates significant improvements in synthesis quality and correctness.", "conclusion": "Incorporating APO and RLVR yields a robust and scalable solution for component-based API synthesis across large software libraries, outperforming standard LLM prompting approaches."}}
{"id": "2509.25197", "categories": ["cs.SE", "cs.AI", "cs.PL"], "pdf": "https://arxiv.org/pdf/2509.25197", "abs": "https://arxiv.org/abs/2509.25197", "authors": ["Si Cheng Zhong", "Xujie Si"], "title": "Towards Repository-Level Program Verification with Large Language Models", "comment": "Accepted to LMPL 2025", "summary": "Recent advancements in large language models (LLMs) suggest great promises in\ncode and proof generations. However, scaling automated formal verification to\nreal-world projects requires resolving cross-module dependencies and global\ncontexts, which are crucial challenges overlooked by existing LLM-based methods\nwith a special focus on targeting isolated, function-level verification tasks.\nTo systematically explore and address the significant challenges of verifying\nentire software repositories, we introduce RVBench, the first verification\nbenchmark explicitly designed for repository-level evaluation, constructed from\nfour diverse and complex open-source Verus projects.\n  We further introduce RagVerus, an extensible framework that synergizes\nretrieval-augmented generation with context-aware prompting to automate proof\nsynthesis for multi-module repositories. RagVerus triples proof pass rates on\nexisting benchmarks under constrained model inference budgets, and achieves a\n27% relative improvement on the more challenging RVBench benchmark,\ndemonstrating a scalable and sample-efficient verification solution.", "AI": {"tldr": "The paper presents RVBench, the first repository-level verification benchmark, and RagVerus, a novel framework combining retrieval and context-aware prompting, which significantly improves the scalability and effectiveness of automated formal verification on large, real-world codebases.", "motivation": "Scaling automated formal verification to real-world software projects is challenging due to cross-module dependencies and global contexts. Existing LLM-based approaches focus mostly on isolated, function-level tasks, leaving repository-level verification unexplored.", "method": "The authors introduce two main contributions: (1) RVBench, a new benchmark specifically created to evaluate repository-level formal verification using four complex Verus projects; and (2) RagVerus, a context-aware retrieval-augmented generation framework to automate proof synthesis across multiple modules in software repositories.", "result": "RagVerus significantly outperforms baseline models, tripling proof pass rates on current benchmarks within a constrained inference budget. It achieves a 27% relative improvement on the newly proposed RVBench benchmark, establishing itself as both scalable and sample-efficient.", "conclusion": "The study demonstrates that integrating retrieval-augmented generation and context-aware prompting via RagVerus effectively addresses previously overlooked repository-level verification challenges, marking a step forward in scalable automated formal verification."}}
{"id": "2509.25248", "categories": ["cs.SE", "cs.AI", "cs.PL"], "pdf": "https://arxiv.org/pdf/2509.25248", "abs": "https://arxiv.org/abs/2509.25248", "authors": ["Zehua Zhang", "Ati Priya Bajaj", "Divij Handa", "Siyu Liu", "Arvind S Raj", "Hongkai Chen", "Hulin Wang", "Yibo Liu", "Zion Leonahenahe Basque", "Souradip Nath", "Vishal Juneja", "Nikhil Chapre", "Yan Shoshitaishvili", "Adam Doup\u00e9", "Chitta Baral", "Ruoyu Wang"], "title": "BuildBench: Benchmarking LLM Agents on Compiling Real-World Open-Source Software", "comment": null, "summary": "Automatically compiling open-source software (OSS) projects is a vital,\nlabor-intensive, and complex task, which makes it a good challenge for LLM\nAgents. Existing methods rely on manually curated rules and workflows, which\ncannot adapt to OSS that requires customized configuration or environment\nsetup. Recent attempts using Large Language Models (LLMs) used selective\nevaluation on a subset of highly rated OSS, a practice that underestimates the\nrealistic challenges of OSS compilation. In practice, compilation instructions\nare often absent, dependencies are undocumented, and successful builds may even\nrequire patching source files or modifying build scripts. We propose a more\nchallenging and realistic benchmark, BUILD-BENCH, comprising OSS that are more\ndiverse in quality, scale, and characteristics. Furthermore, we propose a\nstrong baseline LLM-based agent, OSS-BUILD-AGENT, an effective system with\nenhanced build instruction retrieval module that achieves state-of-the-art\nperformance on BUILD-BENCH and is adaptable to heterogeneous OSS\ncharacteristics. We also provide detailed analysis regarding different\ncompilation method design choices and their influence to the whole task,\noffering insights to guide future advances. We believe performance on\nBUILD-BENCH can faithfully reflect an agent's ability to tackle compilation as\na complex software engineering tasks, and, as such, our benchmark will spur\ninnovation with a significant impact on downstream applications in the fields\nof software development and software security.", "AI": {"tldr": "The authors present BUILD-BENCH, a more realistic OSS compilation benchmark, and OSS-BUILD-AGENT, a powerful LLM agent that excels at compiling diverse OSS projects. The research pushes the field forward by enhancing evaluation rigor and providing actionable analysis for future developments.", "motivation": "Automatically compiling OSS is labor-intensive and complex, with existing methods unable to adapt to projects requiring custom setups or configurations. Recent LLM-driven approaches do not fully capture real-world challenges due to selective benchmarking.", "method": "Introduce BUILD-BENCH, a new benchmark with more diverse and realistic OSS projects. Propose OSS-BUILD-AGENT, a baseline LLM-based agent with improved build instruction retrieval, and offer analytical insights regarding compilation method choices.", "result": "OSS-BUILD-AGENT achieves state-of-the-art performance on BUILD-BENCH, demonstrating adaptability to heterogeneous OSS characteristics. Detailed design analysis clarifies what impacts compilation success.", "conclusion": "BUILD-BENCH provides a more challenging and accurate benchmark for OSS compilation, and the proposed agent sets a strong baseline. This work will drive advances in software development and security applications."}}
{"id": "2509.26616", "categories": ["cs.SE", "cs.FL", "cs.PL", "68Q42, 68Q45 (Primary), 68T50 (Secondary)", "D.2.5; F.4.2"], "pdf": "https://arxiv.org/pdf/2509.26616", "abs": "https://arxiv.org/abs/2509.26616", "authors": ["Mohammad Rifat Arefin", "Shanto Rahman", "Christoph Csallner"], "title": "Black-box Context-free Grammar Inference for Readable & Natural Grammars", "comment": "20 pages", "summary": "Black-box context-free grammar inference is crucial for program analysis,\nreverse engineering, and security, yet existing tools such as Arvada, TreeVada,\nand Kedavra struggle with scalability, readability, and accuracy on large,\ncomplex languages. We present NatGI, a novel LLM-guided grammar inference\nframework that extends TreeVada's parse tree recovery with three key\ninnovations: bracket-guided bubble exploration, LLM-driven bubble generation\nand non-terminal labeling, and hierarchical delta debugging (HDD) for\nsystematic tree simplification. Bracket-guided exploration leverages syntactic\ncues such as parentheses to propose well-structured grammar fragments, while\nLLM guidance produces meaningful non-terminal names and selects more promising\nmerges. Finally, HDD incrementally reduces unnecessary rules, which makes the\ngrammars both compact and interpretable. In our experiments, we evaluate NatGI\non a comprehensive benchmark suite ranging from small languages to larger ones\nsuch as lua, c, and mysql. Our results show that NatGI consistently outperforms\nstrong baselines in terms of F1 score. On average, NatGI achieves an F1 score\nof 0.57, which is 25pp (percentage points) higher than the best-performing\nbaseline, TreeVada. In the case of interpretability, our generated grammars\nperform significantly better than those produced by existing approaches.\nLeveraging LLM-based node renaming and bubble exploration, NatGI produces rules\nwith meaningful non-terminal names and compact structures that align more\nclosely with human intuition. As a result, developers and researchers can\nachieve higher accuracy while still being able to easily inspect, verify, and\nreason about the structure and semantics of the induced grammars.", "AI": {"tldr": "NatGI is a new grammar inference framework that uses large language models and syntactic structure cues to generate accurate, readable, and compact grammars, outperforming existing approaches on both accuracy (F1 score) and interpretability for a wide range of programming languages.", "motivation": "Existing context-free grammar inference tools (like Arvada, TreeVada, Kedavra) cannot scale to large, complex languages and produce grammars that are hard to read and less accurate. There's a need for a framework that is both scalable and yields interpretable, accurate grammars for critical tasks in program analysis, reverse engineering, and security.", "method": "NatGI, a new framework, extends TreeVada's parse tree recovery via three innovations: bracket-guided bubble exploration (using syntactic cues), LLM-driven bubble generation and non-terminal labeling (using large language models for meaningful names and merges), and hierarchical delta debugging (HDD) for systematic grammar simplification and removal of unnecessary rules.", "result": "NatGI is tested on benchmarks covering both small and large languages (including lua, c, mysql). It achieves a higher average F1 score (0.57, 25 percentage points better than the best baseline), and results in more interpretable grammars with meaningful structure and names. The grammars are more compact and align better with human intuition than existing methods.", "conclusion": "NatGI provides a scalable, accurate, and interpretable solution to grammar inference. Its integration of LLM guidance and syntactic cues enables researchers and developers to generate high-quality grammars that are easier to inspect and reason about, outperforming existing tools."}}
{"id": "2509.25192", "categories": ["cs.SE", "68T07"], "pdf": "https://arxiv.org/pdf/2509.25192", "abs": "https://arxiv.org/abs/2509.25192", "authors": ["Anderson de Lima Luiz"], "title": "WARP -- Web-Augmented Real-time Program Repairer: A Real-Time Compilation Error Resolution using LLMs and Web-Augmented Synthesis", "comment": "5 pages, 2 figures", "summary": "Compilation errors represent a significant bottleneck in software development\nproductivity. This paper introduces WARP (Web-Augmented Real-time Program\nRepairer), a novel system that leverages Large Language Models (LLMs) and\ndynamic web-augmented synthesis for real-time resolution of these errors. WARP\nactively monitors developer terminals, intelligently detects compilation\nerrors, and synergistically combines the understanding of a fine-tuned Code-LLM\nwith relevant solutions, explanations, and code snippets retrieved from\nup-to-date web sources like developer forums and official documentation.\nExperimental results on our curated benchmark, CGP (featuring C/C++, Python,\nand Go errors), demonstrate WARP achieves a superior fix rate (72.5 % Compiles\ncorrectly) and higher semantic correctness compared to baseline LLM-only\napproaches and traditional IDE quick-fixes. Key technical challenges in\nachieving high-accuracy synthesis from noisy web data.", "AI": {"tldr": "WARP, a system combining Code-LLMs and real-time web data, surpasses traditional and LLM-only methods in fixing compilation errors, substantially improving developer productivity.", "motivation": "Compilation errors are a major productivity bottleneck for developers, slowing down software development and necessitating smarter tools for faster error resolution.", "method": "The authors propose WARP, a system that uses Large Language Models (LLMs) fine-tuned on code and supplements them with dynamic, web-augmented synthesis. WARP monitors developer terminals, detects compilation errors, and provides solutions by combining LLM understanding with real-time retrieval of relevant web resources (forums, documentation, etc.).", "result": "Experiments on the CGP benchmark (with C/C++, Python, and Go errors) show WARP achieves a 72.5% correct compilation rate and higher semantic accuracy compared to LLM-only and traditional IDE fixes.", "conclusion": "WARP outperforms existing approaches by effectively synthesizing high-accuracy fixes via LLM and web data, demonstrating that integrating up-to-date web information notably improves compilation error resolution. The approach addresses challenges in extracting reliable code remedies from noisy web sources."}}
{"id": "2509.25193", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.25193", "abs": "https://arxiv.org/abs/2509.25193", "authors": ["Abhinav Rastogi", "Adam Yang", "Albert Q. Jiang", "Alexander H. Liu", "Alexandre Sablayrolles", "Am\u00e9lie H\u00e9liou", "Am\u00e9lie Martin", "Anmol Agarwal", "Andy Ehrenberg", "Andy Lo", "Antoine Roux", "Arthur Darcet", "Arthur Mensch", "Baptiste Bout", "Baptiste Rozi\u00e8re", "Baudouin De Monicault", "Chris Bamford", "Christian Wallenwein", "Christophe Renaudin", "Cl\u00e9mence Lanfranchi", "Cl\u00e9ment Denoix", "Corentin Barreau", "Darius Dabert Devon Mizelle", "Diego de las Casas", "Elliot Chane-Sane", "Emilien Fugier", "Emma Bou Hanna", "Gabrielle Berrada", "Gauthier Delerce", "Gauthier Guinet", "Georgii Novikov", "Graham Neubig", "Guillaume Lample", "Guillaume Martin", "Himanshu Jaju", "Jan Ludziejewski", "Jason Rute", "Jean-Malo Delignon", "JeanHadrien Chabran", "Joachim Studnia", "Joep Barmentlo", "Jonas Amar", "Josselin Somerville Roberts", "Julien Denize", "Karan Saxena", "Karmesh Yadav", "Kartik Khandelwal", "Khyathi Raghavi Chandu", "Kush Jain", "L\u00e9lio Renard Lavaud", "L\u00e9onard Blier", "Lingxiao Zhao", "Louis Martin", "Lucile Saulnier", "Luyu Gao", "Marie Pellat", "Mathilde Guillaumin", "Mathis Felardos", "Matthieu Dinot", "Maxime Darrin", "Maximilian Augustin", "Micka\u00ebl Seznec", "Neha Gupta", "Nikhil Raghuraman", "Olivier Duchenne", "Patricia Wang", "Patrick von Platen", "Patryk Saffer", "Paul Jacob", "Paul Wambergue", "Paula Kurylowicz", "Philom\u00e8ne Chagniot", "Pierre Stock", "Pravesh Agrawal", "R\u00e9mi Delacourt", "Roman Soletskyi", "Romain Sauvestre", "Sagar Vaze", "Sanchit Gandhi", "Sandeep Subramanian", "Shashwat Dalal", "Siddharth Gandhi", "Soham Ghosh", "Srijan Mishra", "Sumukh Aithal", "Szymon Antoniak", "Teven Le Scao", "Thibaut Lavril", "Thibault Schueller", "Thomas Foubert", "Thomas Robert", "Thomas Wang", "Timoth\u00e9e Lacroix", "Tom Bewley", "Valeriia Nemychnikova", "Victor Paltz", "Virgile Richard", "Wen-Ding Li", "William Marshall", "Xingyao Wang", "Xuanyu Zhang", "Yihan Wan", "Yunhao Tang"], "title": "Devstral: Fine-tuning Language Models for Coding Agent Applications", "comment": null, "summary": "We introduce Devstral-Small, a lightweight open source model for code agents\nwith the best performance among models below 100B size. In this technical\nreport, we give an overview of how we design and develop a model and craft\nspecializations in agentic software development. The resulting model,\nDevstral-Small is a small 24B model, fast and easy to serve. Despite its size,\nDevstral-Small still attains competitive performance compared to models more\nthan an order of magnitude larger.", "AI": {"tldr": "Devstral-Small is a highly efficient and competitive open-source code agent model, offering fast deployment and strong performance despite being much smaller than leading alternatives.", "motivation": "There is a need for small, efficient models for code agents that deliver strong performance and are easy to deploy, especially in scenarios where large models are impractical.", "method": "The authors designed and specialized a 24B parameter open-source model specifically for agentic software development tasks. Performance was benchmarked against larger models.", "result": "Devstral-Small, a 24B parameter model, matches or surpasses the performance of models larger than 100B parameters in relevant tasks.", "conclusion": "Devstral-Small achieves competitive performance compared to much larger models while being lightweight and easy to deploy."}}
{"id": "2509.25194", "categories": ["cs.SE", "physics.comp-ph"], "pdf": "https://arxiv.org/pdf/2509.25194", "abs": "https://arxiv.org/abs/2509.25194", "authors": ["Haoyang Wu", "Xinxin Zhang", "Lailai Zhu"], "title": "Automated Code Development for PDE Solvers Using Large Language Models", "comment": null, "summary": "Foundation models -- large language models (LLMs) in particular -- have\nbecome ubiquitous, shaping daily life and driving breakthroughs across science,\nengineering, and technology. Harnessing their broad cross-domain knowledge,\ntext-processing, and reasoning abilities for software development, e.g.,\nnumerical libraries for solving partial differential equations (PDEs), is\ntherefore attracting growing interest. Yet existing studies mainly automate\ncase setup and execution for end users. We introduce LLM-PDEveloper, a\nzero-shot, multi-agent LLM framework that automates code development for PDE\nlibraries, specifically targeting secondary developers. By translating\nmathematical and algorithmic descriptions directly into source code,\nLLM-PDEveloper generates new solvers/modules and adapts existing ones. This\nend-to-end math-to-code approach enables a self-augmenting pipeline that\ncontinuously expands the codebase of a library, extends its capacities, and\nbroadens its scope. We demonstrate LLM-PDEveloper on three tasks: 1) build a\nsolver for a new PDE, 2) implement new BCs for a given PDE, and 3) modify an\nexisting solver to incorporate additional terms, achieving moderate success\nrates. Failures due to syntactic errors made by LLMs are analyzed and we\npropose effective fixes. We also identify the mechanisms underlying certain\nsemantic errors, guiding future research.", "AI": {"tldr": "LLM-PDEveloper leverages large language models to automate the development of PDE library codebases, showing moderate success and offering guidance to mitigate common errors, thereby advancing LLM applications in computational science.", "motivation": "Existing applications of large language models in software development for PDE libraries mainly focus on automating routine aspects for end users, while there is a growing need to automate more sophisticated code development tasks for secondary developers.", "method": "The paper introduces LLM-PDEveloper, a zero-shot, multi-agent LLM-based framework that translates mathematical and algorithmic descriptions directly into source code, enabling end-to-end automation of code generation for PDE libraries.", "result": "LLM-PDEveloper is demonstrated in three scenarios: building a new PDE solver, implementing new boundary conditions, and modifying existing solvers. It achieved moderate success rates. The study also analyzed failures due to syntactic and semantic errors, proposing practical solutions and identifying error mechanisms for future improvement.", "conclusion": "LLM-PDEveloper can effectively expand PDE libraries by automating code development tasks, despite existing challenges related to syntactic and semantic errors. The insights and solutions provided pave the way for more robust LLM-powered tools in scientific computing."}}
{"id": "2509.25195", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.25195", "abs": "https://arxiv.org/abs/2509.25195", "authors": ["Hira Naveed", "John Grundy", "Chetan Arora", "Hourieh Khalajzadeh", "Omar Haggag"], "title": "Understanding Practitioners Perspectives on Monitoring Machine Learning Systems", "comment": null, "summary": "Given the inherent non-deterministic nature of machine learning (ML) systems,\ntheir behavior in production environments can lead to unforeseen and\npotentially dangerous outcomes. For a timely detection of unwanted behavior and\nto prevent organizations from financial and reputational damage, monitoring\nthese systems is essential. This paper explores the strategies, challenges, and\nimprovement opportunities for monitoring ML systems from the practitioners\nperspective. We conducted a global survey of 91 ML practitioners to collect\ndiverse insights into current monitoring practices for ML systems. We aim to\ncomplement existing research through our qualitative and quantitative analyses,\nfocusing on prevalent runtime issues, industrial monitoring and mitigation\npractices, key challenges, and desired enhancements in future monitoring tools.\nOur findings reveal that practitioners frequently struggle with runtime issues\nrelated to declining model performance, exceeding latency, and security\nviolations. While most prefer automated monitoring for its increased\nefficiency, many still rely on manual approaches due to the complexity or lack\nof appropriate automation solutions. Practitioners report that the initial\nsetup and configuration of monitoring tools is often complicated and\nchallenging, particularly when integrating with ML systems and setting alert\nthresholds. Moreover, practitioners find that monitoring adds extra workload,\nstrains resources, and causes alert fatigue. The desired improvements from the\npractitioners perspective are: automated generation and deployment of monitors,\nimproved support for performance and fairness monitoring, and recommendations\nfor resolving runtime issues. These insights offer valuable guidance for the\nfuture development of ML monitoring tools that are better aligned with\npractitioners needs.", "AI": {"tldr": "Monitoring ML systems in production is essential but difficult. Practitioners struggle with technical challenges, complexity, and alert fatigue. They want easier, more automated monitoring tools that help address declining performance, latency, security, and fairness concerns.", "motivation": "Machine learning systems in production can behave unpredictably due to their non-deterministic nature, potentially causing serious issues and damages for organizations. Effective monitoring is necessary to detect and mitigate unwanted behavior early.", "method": "The authors conducted a global survey of 91 ML practitioners to gather both qualitative and quantitative insights about current monitoring practices, challenges, and improvement needs for ML systems in production.", "result": "The study found that practitioners commonly encounter runtime problems such as declining model performance, excessive latency, and security breaches. Although automated monitoring is preferred, manual checks are still widespread due to integration difficulties and tool complexity. Setting up monitoring and alert systems is especially challenging, leading to extra workload and alert fatigue for practitioners. Key improvements desired include automated monitor deployment, better tools for fairness and performance monitoring, and actionable recommendations for runtime issues.", "conclusion": "Practitioners face notable challenges in monitoring ML systems, including integration difficulty, high workload, and insufficient automation. There is a strong demand for user-friendly, automated, and actionable monitoring tools that address performance and fairness while reducing operational burdens."}}
{"id": "2509.25199", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.25199", "abs": "https://arxiv.org/abs/2509.25199", "authors": ["Mushahid Khan", "Prashant J. Nair", "Olivia Di Matteo"], "title": "CircInspect: Integrating Visual Circuit Analysis, Abstraction, and Real-Time Development in Quantum Debugging", "comment": null, "summary": "Software bugs typically result from errors in specifications or code\ntranslation. While classical software engineering has evolved with various\ntools and methodologies to tackle such bugs, the emergence of quantum computing\npresents unique challenges. Quantum software development introduces\ncomplexities due to the probabilistic nature of quantum computing, distinct\nalgorithmic primitives, and potential hardware noise. In this paper, we\nintroduce CircInspect, an interactive tool tailored for debugging quantum\nprograms in Python and PennyLane. By leveraging breakpoints and real-time\nsoftware development features, \\toolname~empowers users to analyze isolated\nquantum circuit components, monitor program output, visualize structural\nchanges, and abstract information to enhance comprehension.", "AI": {"tldr": "CircInspect is a new Python debugging tool for quantum programs. It brings breakpoints, real-time monitoring, and visualization to PennyLane-based code, making it easier to analyze, debug, and understand quantum software, addressing challenges unique to quantum computing.", "motivation": "Quantum software development poses unique debugging challenges due to the probabilistic nature and hardware-specific issues not found in classical computing. Existing software engineering tools do not directly address these quantum-specific complexities.", "method": "The authors introduce CircInspect, an interactive Python-based tool for debugging quantum programs (specifically those using PennyLane). It provides breakpoints, real-time feedback, circuit visualization, output monitoring, and information abstraction.", "result": "CircInspect enables users to analyze quantum circuit components in isolation, visualize changes in structure, track program outputs, and better understand complex quantum software behavior.", "conclusion": "CircInspect bridges the gap in quantum program debugging, offering essential features to assist developers in comprehending and resolving issues unique to quantum computing."}}
{"id": "2509.25203", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.25203", "abs": "https://arxiv.org/abs/2509.25203", "authors": ["Zekai Zhang", "Mingwei Liu", "Zhenxi Chen", "Linxi Liang", "Yuxuan Chen", "Guangsheng Ou", "Yanlin Wang", "Dan Li", "Xin Peng", "Zibin Zheng"], "title": "Generating High-Quality Datasets for Code Editing via Open-Source Language Models", "comment": "23 pages, 8 figures", "summary": "Code editing plays a vital role in software engineering, requiring developers\nto adjust existing code according to natural language instructions while\nkeeping functionality intact and avoiding unnecessary modifications. However,\ncommit-based datasets commonly used for this task are often noisy, lack\ndiversity, and fail to reflect the style of real-world edit instructions. To\naddress this, we introduce CanItEdit, an open-source pipeline that leverages\nmultiple LLMs to synthesize realistic code-edit triplets. The pipeline produces\nboth concise \"lazy\" instructions and more detailed \"descriptive\" ones, and\napplies filtering based on diffs and topics to guarantee data quality and\nvariety. Using this process, we construct OCEDataFT, a curated dataset of 20K\nsamples. Fine-tuning three advanced base models on OCEDataFT leads to\nsignificant performance boosts on the CanItEdit benchmark, with relative pass@1\nimprovements ranging from 4.50% to 20.79%. Notably, the resulting models\nachieve performance close to closed-source systems, narrowing the gap to GPT-4\nto just 3.54%, without relying on proprietary resources or manual annotation.", "AI": {"tldr": "CanItEdit is an open-source pipeline that creates high-quality, diverse, and realistic code-editing data using multiple LLMs. The resulting OCEDataFT dataset significantly boosts model performance and almost matches closed-source systems like GPT-4 without proprietary resources or manual annotation.", "motivation": "Existing commit-based datasets for code editing are noisy, lack diversity, and do not reflect real-world edit instruction styles, limiting model effectiveness.", "method": "The authors introduce CanItEdit, an open-source pipeline that uses multiple LLMs to generate realistic code-edit triplets with both concise and detailed instructions. The pipeline includes filtering techniques to ensure high data quality and diversity. This process produces OCEDataFT, a curated dataset of 20,000 samples.", "result": "Fine-tuning advanced base models on OCEDataFT delivers significant performance improvements on the CanItEdit benchmark, with relative pass@1 gains between 4.50% and 20.79%. The fine-tuned models nearly match closed-source system performance, trailing GPT-4 by only 3.54%, and do so without proprietary data or manual annotation.", "conclusion": "The paper demonstrates that a carefully constructed, openly available dataset combined with multi-LLM synthesis and filtering can substantially improve code-editing model performance, narrowing the gap to leading proprietary models while maintaining transparency and reproducibility."}}
{"id": "2509.25242", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.25242", "abs": "https://arxiv.org/abs/2509.25242", "authors": ["Zejun Zhang", "Jian Wang", "Qingyun Yang", "Yifan Pan", "Yi Tang", "Yi Li", "Zhenchang Xing", "Tian Zhang", "Xuandong Li", "Guoan Zhang"], "title": "A Benchmark for Localizing Code and Non-Code Issues in Software Projects", "comment": null, "summary": "Accurate project localization (e.g., files and functions) for issue\nresolution is a critical first step in software maintenance. However, existing\nbenchmarks for issue localization, such as SWE-Bench and LocBench, are limited.\nThey focus predominantly on pull-request issues and code locations, ignoring\nother evidence and non-code files such as commits, comments, configurations,\nand documentation. To address this gap, we introduce MULocBench, a\ncomprehensive dataset of 1,100 issues from 46 popular GitHub Python projects.\nComparing with existing benchmarks, MULocBench offers greater diversity in\nissue types, root causes, location scopes, and file types, providing a more\nrealistic testbed for evaluation. Using this benchmark, we assess the\nperformance of state-of-the-art localization methods and five LLM-based\nprompting strategies. Our results reveal significant limitations in current\ntechniques: even at the file level, performance metrics (Acc@5, F1) remain\nbelow 40%. This underscores the challenge of generalizing to realistic,\nmulti-faceted issue resolution. To enable future research on project\nlocalization for issue resolution, we publicly release MULocBench at\nhttps://huggingface.co/datasets/somethingone/MULocBench.", "AI": {"tldr": "MULocBench is a new dataset for issue localization that exposes weaknesses in current methods, showing they struggle to generalize to real-world scenarios. The dataset is available for research use.", "motivation": "Existing issue localization benchmarks focus mainly on pull-request issues and code files, neglecting other types of evidence and non-code files, resulting in unrealistic evaluations for software maintenance tasks.", "method": "The authors introduce MULocBench, a comprehensive dataset consisting of 1,100 issues from 46 popular GitHub Python projects, covering diverse issue types, root causes, location scopes, and file types. They use MULocBench to evaluate state-of-the-art localization methods and five LLM-based prompting strategies.", "result": "Current techniques for project localization perform poorly on MULocBench, with performance metrics staying below 40% (Acc@5, F1), even at the file level. This highlights the difficulty in generalizing existing methods to realistic, multifaceted issue resolution scenarios.", "conclusion": "MULocBench provides a more holistic benchmark for project localization, exposing significant limitations of current approaches and facilitating future research."}}
{"id": "2509.25243", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.25243", "abs": "https://arxiv.org/abs/2509.25243", "authors": ["Xunzhu Tang", "Iyiola Emmanuel Olatunji", "Tiezhu Sun", "Jacques Klein", "Tegawende F. Bissyande"], "title": "Reinforcement Learning-Guided Chain-of-Draft for Token-Efficient Code Generation", "comment": null, "summary": "LLMs demonstrate surface-level fluency in code generation but struggle with\nstructured reasoning tasks requiring correctness and semantic alignment. While\nChain-of-Thought (CoT) prompting enhances reasoning through intermediate steps,\nit suffers from verbosity and inefficiency. Chain-of-Draft (CoD) prompting\noffers more concise reasoning, but the stochastic nature of LLMs produces\nvarying solution quality, making optimal selection challenging. We propose\n\\multicod, a reinforcement learning framework that learns to select the most\npromising candidate from CoD-generated solutions. Our approach uses\nstrategy-guided prompting to encourage diverse reasoning styles and models\nsolution selection as a contextual bandit problem. The framework optimizes\ninterpretable features including code complexity, reasoning structure, and\nstrategic metadata through a reward function balancing correctness, efficiency,\nand clarity. Experiments on MBPP, BigCodeBench, SWE-bench Verified, and\nDefects4J show \\multicod~outperforms and in some cases, on par with standard\nprompting, CoT, and CoD baselines while achieving cost and token efficiency\nfrom the user's perspective through a multi-candidate design that charges only\nfor the selected output, reducing user billing by over 50\\% and improving LLM\nresponse quality, making \\multicod~more sustainable and scalable for real-world\ndeployment. Our code is available: https://anonymous.4open.science/r/MultiCoD.", "AI": {"tldr": "Multicod uses reinforcement learning to select the best solution from multiple LLM code generation drafts, enhancing quality, efficiency, and cost-effectiveness compared to current methods.", "motivation": "Existing large language models (LLMs) show fluency in code generation but struggle with tasks that require structured reasoning and correctness. Chain-of-Thought (CoT) and Chain-of-Draft (CoD) prompting methods address this but have trade-offs in verbosity and inconsistent quality, and optimal solution selection remains challenging.", "method": "This paper proposes 'multicod', a reinforcement learning framework. It learns to select the best candidate solution from those generated by CoD prompting. The approach uses strategy-guided prompting for diverse reasoning styles and models the solution selection task as a contextual bandit problem, optimizing interpretable features with a reward function that balances correctness, efficiency, and clarity.", "result": "Experiments on MBPP, BigCodeBench, SWE-bench Verified, and Defects4J benchmarks show that multicod outperforms or matches the performance of standard prompting, CoT, and CoD baselines. The framework improves cost and token efficiency by charging only for the selected output, reducing user billing by over 50%, and enhancing response quality.", "conclusion": "Multicod provides a scalable and sustainable solution for real-world LLM code generation. It delivers higher efficiency and quality, with substantial cost reductions compared to existing approaches."}}
{"id": "2509.25247", "categories": ["cs.SE", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.25247", "abs": "https://arxiv.org/abs/2509.25247", "authors": ["Krishna Vamshi Bodla", "Haizhao Yang"], "title": "Protocode: Prototype-Driven Interpretability for Code Generation in LLMs", "comment": null, "summary": "Since the introduction of Large Language Models (LLMs), they have been widely\nadopted for various tasks such as text summarization, question answering,\nspeech-to-text translation, and more. In recent times, the use of LLMs for code\ngeneration has gained significant attention, with tools such as Cursor and\nWindsurf demonstrating the ability to analyze massive code repositories and\nrecommend relevant changes. Big tech companies have also acknowledged the\ngrowing reliance on LLMs for code generation within their codebases. Although\nthese advances significantly improve developer productivity, increasing\nreliance on automated code generation can proportionally increase the risk of\nsuboptimal solutions and insecure code. Our work focuses on automatically\nsampling In-Context Learning (ICL) demonstrations which can improve model\nperformance and enhance the interpretability of the generated code. Using\nAST-based analysis on outputs from the MBPP test set, we identify regions of\ncode most influenced by the chosen demonstrations. In our experiments, we show\nthat high-quality ICL demonstrations not only make outputs easier to interpret\nbut also yield a positive performance improvement on the pass@10 metric.\nConversely, poorly chosen ICL demonstrations affected the LLM performance on\nthe pass@10 metric negatively compared to the base model. Overall, our approach\nhighlights the importance of efficient sampling strategies for ICL, which can\naffect the performance of the model on any given task.", "AI": {"tldr": "Carefully selecting high-quality in-context examples for LLM-based code generation leads to better, more interpretable outputs and improved pass@10 results, while poor selections reduce performance. AST-based analysis helps in understanding this influence.", "motivation": "With growing reliance on LLMs for code generation, there is an increased risk of suboptimal and insecure code due to potentially unsuitable training examples. Improving both performance and interpretability of code generated by LLMs is an urgent need.", "method": "The authors propose an automatic sampling strategy for In-Context Learning (ICL) demonstrations. They use AST-based analysis on outputs from the MBPP test set to identify code regions most influenced by the chosen demonstrations and evaluate the impact of demonstration quality on LLM performance.", "result": "High-quality ICL demonstrations improve both interpretability and performance (pass@10 metric) of LLM-generated code. Poorly chosen demonstrations negatively affect model performance, underscoring the importance of careful selection.", "conclusion": "Efficient sampling and selection of ICL demonstrations are critical for maximizing the performance and interpretability of LLMs in code generation tasks. The study demonstrates measurable gains from this strategy, but also highlights risks of careless demonstration choice."}}
{"id": "2509.25257", "categories": ["cs.SE", "cs.IR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.25257", "abs": "https://arxiv.org/abs/2509.25257", "authors": ["Pratik Shah", "Rajat Ghosh", "Aryan Singhal", "Debojyoti Dutta"], "title": "RANGER -- Repository-Level Agent for Graph-Enhanced Retrieval", "comment": "24 pages, 4 figures", "summary": "General-purpose automated software engineering (ASE) includes tasks such as\ncode completion, retrieval, repair, QA, and summarization. These tasks require\na code retrieval system that can handle specific queries about code entities,\nor code entity queries (for example, locating a specific class or retrieving\nthe dependencies of a function), as well as general queries without explicit\ncode entities, or natural language queries (for example, describing a task and\nretrieving the corresponding code). We present RANGER, a repository-level code\nretrieval agent designed to address both query types, filling a gap in recent\nworks that have focused primarily on code-entity queries. We first present a\ntool that constructs a comprehensive knowledge graph of the entire repository,\ncapturing hierarchical and cross-file dependencies down to the variable level,\nand augments graph nodes with textual descriptions and embeddings to bridge the\ngap between code and natural language. RANGER then operates on this graph\nthrough a dual-stage retrieval pipeline. Entity-based queries are answered\nthrough fast Cypher lookups, while natural language queries are handled by\nMCTS-guided graph exploration. We evaluate RANGER across four diverse\nbenchmarks that represent core ASE tasks including code search, question\nanswering, cross-file dependency retrieval, and repository-level code\ncompletion. On CodeSearchNet and RepoQA it outperforms retrieval baselines that\nuse embeddings from strong models such as Qwen3-8B. On RepoBench, it achieves\nsuperior cross-file dependency retrieval over baselines, and on CrossCodeEval,\npairing RANGER with BM25 delivers the highest exact match rate in code\ncompletion compared to other RAG methods.", "AI": {"tldr": "RANGER is a unified code retrieval agent that handles both entity-specific and natural language queries across a codebase, using a knowledge graph. It beats previous state-of-the-art methods on diverse automated software engineering benchmarks.", "motivation": "Current automated software engineering tasks need code retrieval systems that can handle both specific code entity queries and general natural language queries. Existing methods often focus mainly on code-entity queries, leaving a gap for handling more flexible, repository-wide tasks.", "method": "RANGER constructs a comprehensive knowledge graph representing an entire code repository, with hierarchical and cross-file dependencies, and augments nodes with textual descriptions and embeddings. RANGER utilizes a dual-stage retrieval pipeline: Cypher queries for entity-based searches, and MCTS-guided graph exploration for natural language queries.", "result": "RANGER is evaluated on four benchmarks (CodeSearchNet, RepoQA, RepoBench, CrossCodeEval), outperforming state-of-the-art baseline models in tasks like code search, QA, dependency retrieval, and repository-level code completion. Pairing RANGER with BM25 achieves the highest exact match rate in code completion relative to other retrieval-augmented generation methods.", "conclusion": "RANGER effectively bridges the gap between code entity and natural language queries for repository-level code retrieval, outperforming strong baseline approaches and establishing a more general solution for automated software engineering tasks."}}
{"id": "2509.25297", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.25297", "abs": "https://arxiv.org/abs/2509.25297", "authors": ["Yuxuan Wan", "Tingshuo Liang", "Jiakai Xu", "Jingyu Xiao", "Yintong Huo", "Michael R. Lyu"], "title": "Automatically Generating Web Applications from Requirements Via Multi-Agent Test-Driven Development", "comment": null, "summary": "Developing full-stack web applications is complex and time-intensive,\ndemanding proficiency across diverse technologies and frameworks. Although\nrecent advances in multimodal large language models (MLLMs) enable automated\nwebpage generation from visual inputs, current solutions remain limited to\nfront-end tasks and fail to deliver fully functional applications. In this\nwork, we introduce TDDev, the first test-driven development (TDD)-enabled\nLLM-agent framework for end-to-end full-stack web application generation. Given\na natural language description or design image, TDDev automatically derives\nexecutable test cases, generates front-end and back-end code, simulates user\ninteractions, and iteratively refines the implementation until all requirements\nare satisfied. Our framework addresses key challenges in full-stack automation,\nincluding underspecified user requirements, complex interdependencies among\nmultiple files, and the need for both functional correctness and visual\nfidelity. Through extensive experiments on diverse application scenarios, TDDev\nachieves a 14.4% improvement on overall accuracy compared to state-of-the-art\nbaselines, demonstrating its effectiveness in producing reliable, high-quality\nweb applications without requiring manual intervention.", "AI": {"tldr": "TDDev is a novel AI framework that uses test-driven development and language models to automatically build and refine complete, reliable full-stack web apps from a text or image description, improving accuracy and automation over existing tools.", "motivation": "Developing full-stack web applications is a complex, time-consuming process requiring expertise in multiple technologies. While MLLMs can generate front-end web pages from images or descriptions, they cannot yet create fully functional, end-to-end applications automatically.", "method": "The authors propose TDDev, a novel framework that combines test-driven development (TDD) with a large language model agent. TDDev takes natural language or visual input, automatically generates test cases, creates front-end and back-end code, simulates user behaviors, and iteratively refines code until all tests pass.", "result": "TDDev outperforms existing systems by 14.4% in overall accuracy on diverse application tasks. It successfully addresses challenges such as vague requirements, file interdependencies, and demands for functional and visual correctness, producing reliable full-stack applications autonomously.", "conclusion": "TDDev represents the first end-to-end, TDD-enabled LLM framework for automated full-stack web development. It advances the state of the art by delivering higher quality, more reliable, fully functional web applications without human intervention."}}
{"id": "2509.25378", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.25378", "abs": "https://arxiv.org/abs/2509.25378", "authors": ["Akalanka Galappaththi", "Francisco Ribeiro", "Sarah Nadi"], "title": "Detecting and Fixing API Misuses of Data Science Libraries Using Large Language Models", "comment": "10 pages, 3 figures, accepted in CASCON 25", "summary": "Data science libraries, such as scikit-learn and pandas, specialize in\nprocessing and manipulating data. The data-centric nature of these libraries\nmakes the detection of API misuse in them more challenging. This paper\nintroduces DSCHECKER, an LLM-based approach designed for detecting and fixing\nAPI misuses of data science libraries. We identify two key pieces of\ninformation, API directives and data information, that may be beneficial for\nAPI misuse detection and fixing. Using three LLMs and misuses from five data\nscience libraries, we experiment with various prompts. We find that\nincorporating API directives and data-specific details enhances Dschecker's\nability to detect and fix API misuses, with the best-performing model achieving\na detection F1-score of 61.18 percent and fixing 51.28 percent of the misuses.\nBuilding on these results, we implement Dschecker agent which includes an\nadaptive function calling mechanism to access information on demand, simulating\na real-world setting where information about the misuse is unknown in advance.\nWe find that Dschecker agent achieves 48.65 percent detection F1-score and\nfixes 39.47 percent of the misuses, demonstrating the promise of LLM-based API\nmisuse detection and fixing in real-world scenarios.", "AI": {"tldr": "This paper presents DSCHECKER, an LLM-powered tool for detecting and fixing API misuses in data science libraries like pandas and scikit-learn. By combining API directives and data details, DSCHECKER significantly improves misuse detection and correction rates. In real-world settings, its agent variant shows practical effectiveness, highlighting the potential of LLMs in this field.", "motivation": "Detecting and fixing API misuses in data science libraries is challenging due to their data-centric nature, and traditional methods may be insufficient. Libraries like scikit-learn and pandas are widely used, so misuse can have significant impact.", "method": "DSCHECKER is introduced as an LLM-based approach that leverages both API directives and data information to detect and fix API misuse. The researchers tested prompts using three LLMs and conducted experiments on misuses from five data science libraries. Furthermore, they developed the Dschecker agent, which uses adaptive function calling to dynamically access information, mimicking practical scenarios.", "result": "Incorporating API directives and data-specific information leads to improved detection and fixing performance. The best model achieved an F1-score of 61.18% in detection and fixed 51.28% of misuses. The Dschecker agent, simulating real-world conditions, achieved an F1-score of 48.65% and fixed 39.47% of misuses.", "conclusion": "LLM-based approaches, particularly when integrating directive and data information, show strong promise for detecting and fixing API misuse in data science libraries, and can be adapted to real-world environments for practical utility."}}
{"id": "2509.25397", "categories": ["cs.SE", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.25397", "abs": "https://arxiv.org/abs/2509.25397", "authors": ["Johan Lin\u00e5ker", "Cailean Osborne", "Jennifer Ding", "Ben Burtenshaw"], "title": "A Cartography of Open Collaboration in Open Source AI: Mapping Practices, Motivations, and Governance in 14 Open Large Language Model Projects", "comment": "In submission", "summary": "The proliferation of open large language models (LLMs) is fostering a vibrant\necosystem of research and innovation in artificial intelligence (AI). However,\nthe methods of collaboration used to develop open LLMs both before and after\ntheir public release have not yet been comprehensively studied, limiting our\nunderstanding of how open LLM projects are initiated, organized, and governed\nas well as what opportunities there are to foster this ecosystem even further.\nWe address this gap through an exploratory analysis of open collaboration\nthroughout the development and reuse lifecycle of open LLMs, drawing on\nsemi-structured interviews with the developers of 14 open LLMs from grassroots\nprojects, research institutes, startups, and Big Tech companies in North\nAmerica, Europe, Africa, and Asia. We make three key contributions to research\nand practice. First, collaboration in open LLM projects extends far beyond the\nLLMs themselves, encompassing datasets, benchmarks, open source frameworks,\nleaderboards, knowledge sharing and discussion forums, and compute\npartnerships, among others. Second, open LLM developers have a variety of\nsocial, economic, and technological motivations, from democratizing AI access\nand promoting open science to building regional ecosystems and expanding\nlanguage representation. Third, the sampled open LLM projects exhibit five\ndistinct organizational models, ranging from single company projects to\nnon-profit-sponsored grassroots projects, which vary in their centralization of\ncontrol and community engagement strategies used throughout the open LLM\nlifecycle. We conclude with practical recommendations for stakeholders seeking\nto support the global community building a more open future for AI.", "AI": {"tldr": "This paper explores how developers collaborate on open LLM projects via interviews, revealing varied organizational models and motivations, and provides actionable recommendations for supporting openness in AI development.", "motivation": "The motivation is to understand the methods of collaboration in developing open large language models (LLMs), which have not been comprehensively studied. This would help identify ways to foster the ecosystem of open AI research and innovation.", "method": "The authors conducted an exploratory analysis using semi-structured interviews with developers from 14 open LLM projects across various regions and organizational types.", "result": "They found that collaboration spans not just the models themselves but also datasets, benchmarks, frameworks, forums, and compute partnerships. Developer motivations are diverse, including democratizing AI, promoting open science, building regional ecosystems, and expanding language representation. Five distinct organizational models of open LLM projects were identified, differing in centralization and community engagement strategies.", "conclusion": "The paper recommends practical strategies for stakeholders to further support and develop the global community working towards a more open AI ecosystem."}}
{"id": "2509.25455", "categories": ["cs.SE", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.25455", "abs": "https://arxiv.org/abs/2509.25455", "authors": ["Alexander Kovrigin", "Aleksandra Eliseeva", "Konstantin Grotov", "Egor Bogomolov", "Yaroslav Zharov"], "title": "PIPer: On-Device Environment Setup via Online Reinforcement Learning", "comment": "Under review", "summary": "Environment setup-the process of configuring the system to work with a\nspecific software project-represents a persistent challenge in Software\nEngineering (SE). Automated environment setup methods could assist developers\nby providing fully configured environments for arbitrary repositories without\nmanual effort. This also helps SE researchers to scale execution-based\nbenchmarks. However, recent studies reveal that even state-of-the-art Large\nLanguage Models (LLMs) achieve limited success in automating this task. To\naddress this limitation, we tune a specialized model for environment setup. We\ncombine supervised fine-tuning for generating correct Bash scripts and\nReinforcement Learning with Verifiable Rewards (RLVR) to adapt it to the task\nof environment setup. On EnvBench-Python, our method enables Qwen3-8B (a model\nrunnable on consumer hardware) to perform on par with larger models-Qwen3-32B\nand GPT-4o. The training code and model checkpoints are available online:\nhttps://github.com/JetBrains-Research/PIPer.", "AI": {"tldr": "The paper tackles the challenge of automated environment setup in software engineering. By combining fine-tuning for script generation and reinforcement learning, they boost a small model (Qwen3-8B) to match much larger models, making robust automation accessible and aiding both developers and researchers.", "motivation": "Environment setup is a persistent bottleneck in Software Engineering, complicating the development process and research scalability. Despite advances, even cutting-edge Large Language Models (LLMs) struggle to reliably automate environment configuration.", "method": "The authors fine-tune a specialized language model using supervised learning to generate correct Bash scripts for environment setup, and leverage Reinforcement Learning with Verifiable Rewards (RLVR) to further adapt the model to the task.", "result": "Their approach empowers the relatively small Qwen3-8B model to match the performance of much larger models like Qwen3-32B and GPT-4o on the EnvBench-Python benchmark.", "conclusion": "With their combined method, automated environment setup becomes viable on consumer hardware, thus reducing manual effort for developers and enabling SE researchers to scale benchmarks more easily. Code and models are made publicly available."}}
{"id": "2509.25465", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.25465", "abs": "https://arxiv.org/abs/2509.25465", "authors": ["Yinghang Ma", "Jiho Shin", "Leuson Da Silva", "Zhen Ming", "Jiang", "Song Wang", "Foutse Khomh", "Shin Hwei Tan"], "title": "BloomAPR: A Bloom's Taxonomy-based Framework for Assessing the Capabilities of LLM-Powered APR Solutions", "comment": "22 pages, 7 figures, Manuscript submitted to ACM Transactions on\n  Software Engineering and Methodology", "summary": "Recent advances in large language models (LLMs) have accelerated the\ndevelopment of AI-driven automated program repair (APR) solutions. However,\nthese solutions are typically evaluated using static benchmarks such as\nDefects4J and SWE-bench, which suffer from two key limitations: (1) the risk of\ndata contamination, potentially inflating evaluation results due to overlap\nwith LLM training data, and (2) limited ability to assess the APR capabilities\nin dynamic and diverse contexts. In this paper, we introduced BloomAPR, a novel\ndynamic evaluation framework grounded in Bloom's Taxonomy. Our framework offers\na structured approach to assess the cognitive capabilities of LLM-powered APR\nsolutions across progressively complex reasoning levels. Using Defects4J as a\ncase study, we evaluated two state-of-the-art LLM-powered APR solutions,\nChatRepair and CigaR, under three different LLMs: GPT-3.5-Turbo, Llama-3.1, and\nStarCoder-2. Our findings show that while these solutions exhibit basic\nreasoning skills and effectively memorize bug-fixing patterns (fixing up to\n81.57% of bugs at the Remember layer), their performance increases with\nsynthetically generated bugs (up to 60.66% increase at the Understand layer).\nHowever, they perform worse on minor syntactic changes (fixing up to 43.32% at\nthe Apply layer), and they struggle to repair similar bugs when injected into\nreal-world projects (solving only 13.46% to 41.34% bugs at the Analyze layer).\nThese results underscore the urgent need for evolving benchmarks and provide a\nfoundation for more trustworthy evaluation of LLM-powered software engineering\nsolutions.", "AI": {"tldr": "This paper presents BloomAPR, a dynamic framework to evaluate LLM-powered automatic program repair across different reasoning levels, revealing that while current tools excel at memorized patterns, they lag in real-world and complex repair tasks, demanding improved benchmarks.", "motivation": "Existing APR solutions powered by LLMs are mainly evaluated with static benchmarks, which pose risks of data contamination and fail to represent dynamic, diverse real-world scenarios. There's a need for better frameworks to measure LLM-based APR capabilities.", "method": "The paper introduces BloomAPR, a dynamic evaluation framework based on Bloom's Taxonomy to measure LLM-powered APR solution performance across various reasoning levels. Using Defects4J as a case study, it evaluates ChatRepair and CigaR on different LLM bases (GPT-3.5-Turbo, Llama-3.1, and StarCoder-2) under synthetic and real-world bug scenarios.", "result": "LLM-powered APRs perform well on recognizing and fixing memorized bug patterns (up to 81.57% on the Remember layer), improve with synthetic bugs (up to 60.66% at the Understand layer), but struggle with minor syntactic changes (43.32% at the Apply layer) and analyzing/solving bugs in real projects (only 13.46% to 41.34% at the Analyze layer).", "conclusion": "Current LLM-powered APR tools exhibit basic reasoning skills and memorization, but their performance diminishes in more complex and realistic bug-fixing scenarios. Better evaluation frameworks are needed to trust APR capabilities and evolve benchmarks for LLM-based software engineering."}}
{"id": "2509.25514", "categories": ["cs.SE", "cs.CR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.25514", "abs": "https://arxiv.org/abs/2509.25514", "authors": ["Yonatan Gizachew Achamyeleh", "Tongtao Zhang", "Joshua Hyunki Kim", "Gabriel Garcia", "Shih-Yuan Yu", "Anton Kocheturov", "Mohammad Abdullah Al Faruque"], "title": "AGNOMIN -- Architecture Agnostic Multi-Label Function Name Prediction", "comment": null, "summary": "Function name prediction is crucial for understanding stripped binaries in\nsoftware reverse engineering, a key step for \\textbf{enabling subsequent\nvulnerability analysis and patching}. However, existing approaches often\nstruggle with architecture-specific limitations, data scarcity, and diverse\nnaming conventions. We present AGNOMIN, a novel architecture-agnostic approach\nfor multi-label function name prediction in stripped binaries. AGNOMIN builds\nFeature-Enriched Hierarchical Graphs (FEHGs), combining Control Flow Graphs,\nFunction Call Graphs, and dynamically learned \\texttt{PCode} features. A\nhierarchical graph neural network processes this enriched structure to generate\nconsistent function representations across architectures, vital for\n\\textbf{scalable security assessments}. For function name prediction, AGNOMIN\nemploys a Ren\\'ee-inspired decoder, enhanced with an attention-based head layer\nand algorithmic improvements.\n  We evaluate AGNOMIN on a comprehensive dataset of 9,000 ELF executable\nbinaries across three architectures, demonstrating its superior performance\ncompared to state-of-the-art approaches, with improvements of up to 27.17\\% in\nprecision and 55.86\\% in recall across the testing dataset. Moreover, AGNOMIN\ngeneralizes well to unseen architectures, achieving 5.89\\% higher recall than\nthe closest baseline. AGNOMIN's practical utility has been validated through\nsecurity hackathons, where it successfully aided reverse engineers in analyzing\nand patching vulnerable binaries across different architectures.", "AI": {"tldr": "AGNOMIN is a new architecture-agnostic function name prediction system for stripped binaries, combining multiple graph features and deep learning. It achieves significant improvements over existing methods in precision and recall, generalizes to unseen architectures, and has been validated in security hackathons.", "motivation": "Function name prediction in stripped binaries is essential for software reverse engineering, which facilitates vulnerability analysis and patching. Current methods struggle with architecture-specific issues, data scarcity, and inconsistent naming conventions.", "method": "AGNOMIN introduces an architecture-agnostic approach using Feature-Enriched Hierarchical Graphs (FEHGs) that combine Control Flow Graphs, Function Call Graphs, and dynamically learned PCode features. A hierarchical graph neural network processes these graphs. The function name prediction leverages a Ren\u00e9e-inspired decoder with an attention-based head and algorithmic improvements.", "result": "Experimentation on 9,000 ELF binaries across three architectures shows AGNOMIN outperforms state-of-the-art methods, achieving up to 27.17% higher precision and 55.86% higher recall. It generalizes well to unseen architectures, with a 5.89% recall improvement over the closest baseline. AGNOMIN was also effective in real-world security hackathons.", "conclusion": "AGNOMIN is a robust and scalable solution for function name prediction in stripped binaries, effective across multiple architectures and directly aiding vulnerability analysis and patching."}}
{"id": "2509.25625", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.25625", "abs": "https://arxiv.org/abs/2509.25625", "authors": ["Luiza Martins de Freitas Cintra", "Philipp Zech", "Mohamad Kassab", "Eliomar Ara\u00fajo Lima", "Sofia Larissa da Costa Paiva", "Valdemar Vicente Graciano Neto"], "title": "M&SCheck: Towards a Checklist to Support Software Engineering Newcomers to the Modeling and Simulation Area", "comment": null, "summary": "The advent of increasingly complex and dynamic ecosystems, such as digital\ntwins (DT), smart cities and Industry 4.0 and 5.0, has made evident the need to\ninclude modeling and simulation (M&S) in the software development life cycle.\nSuch disruptive systems include simulation models in their own architecture\n(such as DT) or require the use of simulation models to represent the high\ndegree of movement and the multiplicity of interactions that occur between the\ninvolved systems. However, when software engineers (particularly the newcomers)\nneed to use M&S in their projects, they often pose themselves an important\nquestion: which formalism should I use? In this direction, the main\ncontribution of this paper is the establishment of a preliminary checklist with\nquestions to assist beginners in M&S in choosing the most appropriate paradigm\nto solve their problems. The checklist is based on three main formalisms: DEVS,\nSystem Dynamics and Agent-Based Simulation. A pilot study was carried out and\nan expert was consulted. The preliminary results show (i) conformance between\nthe suggestion given by the checklist and the formalism selected in the\noriginal studies used as input for evaluating the checklist, and (ii) a\npositive feedback from the expert.", "AI": {"tldr": "This paper presents a beginner-friendly checklist to help choose between DEVS, System Dynamics, and Agent-Based Simulation for modeling and simulation tasks in complex systems. Initial evaluation shows the checklist is accurate and well-received by experts.", "motivation": "With the growing complexity of ecosystems like digital twins, smart cities, and Industry 4.0/5.0, there is a pressing need for integrating modeling and simulation (M&S) into software development. Developers, especially newcomers, often struggle to choose the right M&S formalism for their projects.", "method": "The authors developed a preliminary checklist aimed at guiding beginners in selecting the appropriate M&S paradigm. This checklist focuses on three main formalisms: DEVS, System Dynamics, and Agent-Based Simulation. Its efficacy was assessed through a pilot study and consultation with an expert.", "result": "The checklist's suggestion matched the formalism selected in original studies used for evaluation, demonstrating its usefulness. Additionally, the expert provided positive feedback regarding the checklist.", "conclusion": "A checklist was established to help beginners select an M&S formalism. Preliminary results show high alignment with choices made in previous studies and favorable expert feedback, indicating the checklist's promise."}}
{"id": "2509.25676", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.25676", "abs": "https://arxiv.org/abs/2509.25676", "authors": ["Fang Liu", "Tianze Wang", "Li Zhang", "Zheyu Yang", "Jing Jiang", "Zian Sun"], "title": "Explainable Fault Localization for Programming Assignments via LLM-Guided Annotation", "comment": "Accepted by ASE'2025", "summary": "Providing timely and personalized guidance for students' programming\nassignments, offers significant practical value for helping students complete\nassignments and enhance their learning. In recent years, various automated\nFault Localization (FL) techniques have demonstrated promising results in\nidentifying errors in programs. However, existing FL techniques face challenges\nwhen applied to educational contexts. Most approaches operate at the method\nlevel without explanatory feedback, resulting in granularity too coarse for\nstudents who need actionable insights to identify and fix their errors. While\nsome approaches attempt line-level fault localization, they often depend on\npredicting line numbers directly in numerical form, which is ill-suited to\nLLMs. To address these challenges, we propose FLAME, a fine-grained,\nexplainable Fault Localization method tailored for programming assignments via\nLLM-guided Annotation and Model Ensemble. FLAME leverages rich contextual\ninformation specific to programming assignments to guide LLMs in identifying\nfaulty code lines. Instead of directly predicting line numbers, we prompt the\nLLM to annotate faulty code lines with detailed explanations, enhancing both\nlocalization accuracy and educational value. To further improve reliability, we\nintroduce a weighted multi-model voting strategy that aggregates results from\nmultiple LLMs to determine the suspiciousness of each code line. Extensive\nexperimental results demonstrate that FLAME outperforms state-of-the-art fault\nlocalization baselines on programming assignments, successfully localizing 207\nmore faults at top-1 over the best-performing baseline. Beyond educational\ncontexts, FLAME also generalizes effectively to general-purpose software\ncodebases, outperforming all baselines on the Defects4J benchmark.", "AI": {"tldr": "FLAME is a novel LLM-powered, fine-grained fault localization system for programming assignments, delivering more localized, explanatory, and accurate results than current methods, as shown by substantial improvements across educational and general code datasets.", "motivation": "The motivation comes from the need to provide fine-grained and explanatory guidance to students working on programming assignments. Existing automated fault localization techniques are either too coarse in granularity or lack actionable, explanatory feedback, making them less effective in educational contexts.", "method": "The proposed method, FLAME, uses LLM-guided annotation and model ensemble to achieve fine-grained and explainable fault localization. Instead of predicting line numbers, FLAME prompts LLMs to annotate faulty code lines with detailed explanations. The method further aggregates results using a weighted multi-model voting strategy to enhance reliability.", "result": "FLAME significantly improves the granularity and explanatory nature of fault localization. It outperforms state-of-the-art baselines by localizing 207 more faults at top-1 in programming assignments. It also generalizes well to general-purpose codebases, surpassing all baselines on the Defects4J benchmark.", "conclusion": "FLAME provides more accurate and helpful fault localization for programming assignments and general software code, offering detailed explanations and surpassing existing approaches both in educational and broader contexts."}}
{"id": "2509.25716", "categories": ["cs.SE", "cs.AI", "cs.IR"], "pdf": "https://arxiv.org/pdf/2509.25716", "abs": "https://arxiv.org/abs/2509.25716", "authors": ["Esakkivel Esakkiraja", "Denis Akhiyarov", "Aditya Shanmugham", "Chitra Ganapathy"], "title": "DeepCodeSeek: Real-Time API Retrieval for Context-Aware Code Generation", "comment": "Retrieval-Augmented Generation, API Prediction, Context-Aware Code\n  Generation, Enterprise Code Completion, Reinforcement Learning, ServiceNow,\n  Real-Time Code Search, Query Enhancement, Fine-Tuning, Embedding, Reranker", "summary": "Current search techniques are limited to standard RAG query-document\napplications. In this paper, we propose a novel technique to expand the code\nand index for predicting the required APIs, directly enabling high-quality,\nend-to-end code generation for auto-completion and agentic AI applications. We\naddress the problem of API leaks in current code-to-code benchmark datasets by\nintroducing a new dataset built from real-world ServiceNow Script Includes that\ncapture the challenge of unclear API usage intent in the code. Our evaluation\nmetrics show that this method achieves 87.86% top-40 retrieval accuracy,\nallowing the critical context with APIs needed for successful downstream code\ngeneration. To enable real-time predictions, we develop a comprehensive\npost-training pipeline that optimizes a compact 0.6B reranker through synthetic\ndataset generation, supervised fine-tuning, and reinforcement learning. This\napproach enables our compact reranker to outperform a much larger 8B model\nwhile maintaining 2.5x reduced latency, effectively addressing the nuances of\nenterprise-specific code without the computational overhead of larger models.", "AI": {"tldr": "The paper presents a new dataset and a compact reranker pipeline for high-quality API prediction and code generation, achieving strong accuracy and efficiency over larger models, addressing key issues in enterprise code applications.", "motivation": "Existing search techniques for code applications, particularly standard RAG query-document approaches, struggle with high-quality code generation, API prediction, and suffer from API leaks in benchmark datasets.", "method": "The authors introduce a new dataset sourced from real-world ServiceNow Script Includes, designed to reflect challenges in API usage. They build a retrieval and ranking system that includes expanding code and index for API prediction, and develop a post-training pipeline for a compact 0.6B reranker model using synthetic data generation, supervised fine-tuning, and reinforcement learning.", "result": "The proposed technique achieves 87.86% top-40 retrieval accuracy for APIs, and the compact 0.6B reranker not only outperforms a much larger 8B baseline model but also reduces latency by 2.5x.", "conclusion": "Their approach substantially improves code generation by enabling accurate API prediction and efficient retrieval with a small yet effective model, solving real-world problems like unclear API intent and latency in enterprise settings."}}
{"id": "2509.25754", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.25754", "abs": "https://arxiv.org/abs/2509.25754", "authors": ["Ajmain Inqiad Alam", "Palash Roy", "Farouq Al-omari", "Chanchal Roy", "Banani Roy", "Kevin Schneider"], "title": "Are Classical Clone Detectors Good Enough For the AI Era?", "comment": null, "summary": "The increasing adoption of AI-generated code has reshaped modern software\ndevelopment, introducing syntactic and semantic variations in cloned code.\nUnlike traditional human-written clones, AI-generated clones exhibit systematic\nsyntactic patterns and semantic differences learned from large-scale training\ndata. This shift presents new challenges for classical code clone detection\n(CCD) tools, which have historically been validated primarily on human-authored\ncodebases and optimized to detect syntactic (Type 1-3) and limited semantic\nclones. Given that AI-generated code can produce both syntactic and complex\nsemantic clones, it is essential to evaluate the effectiveness of classical CCD\ntools within this new paradigm. In this paper, we systematically evaluate nine\nwidely used CCD tools using GPTCloneBench, a benchmark containing\nGPT-3-generated clones. To contextualize and validate our results, we further\ntest these detectors on established human-authored benchmarks, BigCloneBench\nand SemanticCloneBench, to measure differences in performance between\ntraditional and AI-generated clones. Our analysis demonstrates that classical\nCCD tools, particularly those enhanced by effective normalization techniques,\nretain considerable effectiveness against AI-generated clones, while some\nexhibit notable performance variation compared to traditional benchmarks. This\npaper contributes by (1) evaluating classical CCD tools against AI-generated\nclones, providing critical insights into their current strengths and\nlimitations; (2) highlighting the role of normalization techniques in improving\ndetection accuracy; and (3) delivering detailed scalability and execution-time\nanalyses to support practical CCD tool selection.", "AI": {"tldr": "As AI-generated code becomes common, traditional code clone detection tools face new challenges with distinct syntactic and semantic clone patterns. This paper evaluates nine CCD tools on both AI-generated and human-written code benchmarks, finding that normalization enhances detection accuracy and that classical tools are still generally effective, though some show varied performance depending on the clone source. The study helps guide selection and use of CCD tools for AI-era software development.", "motivation": "The paper is motivated by the rise of AI-generated code in software development. This introduces new syntactic and semantic patterns in code clones that may not be adequately addressed by traditional code clone detection (CCD) tools, which were built and tested mostly for human-authored clones.", "method": "The authors systematically evaluate nine widely used CCD tools on GPTCloneBench, a benchmark of GPT-3-generated clones. They further compare performance on established human-authored clone benchmarks (BigCloneBench and SemanticCloneBench) to understand the effectiveness and limitations of CCD tools in detecting both AI-generated and traditional clones. The study includes analysis of the impact of normalization techniques and examines scalability and execution-time.", "result": "The results show that many classical CCD tools, especially those using effective normalization, still perform well on AI-generated clones. However, there are significant variations in performance among the tools when comparing results on AI-generated versus traditional human-written clones.", "conclusion": "Classical CCD tools remain effective to a considerable degree for AI-generated code clones, but their performance isn't uniform and can vary depending on the type of clones and the normalization techniques used. The paper highlights the importance of normalization for improved accuracy and offers practical guidance for tool selection based on scalability and execution-time analysis."}}
{"id": "2509.25874", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.25874", "abs": "https://arxiv.org/abs/2509.25874", "authors": ["Zhihan Jiang", "Jinyang Liu", "Yichen Li", "Haiyu Huang", "Xiao He", "Tieying Zhang", "Jianjun Chen", "Yi Li", "Rui Shi", "Michael R. Lyu"], "title": "LogPilot: Intent-aware and Scalable Alert Diagnosis for Large-scale Online Service Systems", "comment": "Accepted by the 40th IEEE/ACM International Conference on Automated\n  Software Engineering (ASE 2025)", "summary": "Effective alert diagnosis is essential for ensuring the reliability of\nlarge-scale online service systems. However, on-call engineers are often\nburdened with manually inspecting massive volumes of logs to identify root\ncauses. While various automated tools have been proposed, they struggle in\npractice due to alert-agnostic log scoping and the inability to organize\ncomplex data effectively for reasoning. To overcome these limitations, we\nintroduce LogPilot, an intent-aware and scalable framework powered by Large\nLanguage Models (LLMs) for automated log-based alert diagnosis. LogPilot\nintroduces an intent-aware approach, interpreting the logic in alert\ndefinitions (e.g., PromQL) to precisely identify causally related logs and\nrequests. To achieve scalability, it reconstructs each request's execution into\na spatiotemporal log chain, clusters similar chains to identify recurring\nexecution patterns, and provides representative samples to the LLMs for\ndiagnosis. This clustering-based approach ensures the input is both rich in\ndiagnostic detail and compact enough to fit within the LLM's context window.\nEvaluated on real-world alerts from Volcano Engine Cloud, LogPilot improves the\nusefulness of root cause summarization by 50.34% and exact localization\naccuracy by 54.79% over state-of-the-art methods. With a diagnosis time under\none minute and a cost of only $0.074 per alert, LogPilot has been successfully\ndeployed in production, offering an automated and practical solution for\nservice alert diagnosis.", "AI": {"tldr": "LogPilot is a scalable LLM-powered framework that makes alert diagnosis in large-scale services much more effective and efficient by smartly selecting and organizing logs. It significantly outperforms current solutions in accuracy, speed, and cost, and is already deployed in production.", "motivation": "On-call engineers face the time-consuming challenge of manually analyzing huge volumes of logs to diagnose alerts and identify root causes in large-scale online systems. Existing automated tools are limited, struggling with generic log selection and organizing complex data efficiently for reasoning.", "method": "The paper presents LogPilot, a novel framework leveraging Large Language Models (LLMs) for automated log-based alert diagnosis. LogPilot interprets alert definitions to recognize intent, accurately scopes relevant logs, reconstructs request execution into log chains, clusters similar chains to identify patterns, and presents compact, rich inputs to LLMs for diagnosis.", "result": "LogPilot was evaluated on real-world data from Volcano Engine Cloud and demonstrated substantial improvements: root cause summarization usefulness increased by 50.34%, exact localization accuracy improved by 54.79% compared with previous methods. Diagnosis is performed in under one minute at a low cost per alert.", "conclusion": "By making log scoping intent-aware and optimizing data organization, LogPilot enables scalable, efficient, and accurate automated diagnosis of service alerts. Its proven improvements in accuracy and speed, along with production deployment, establish it as a practical solution for modern online services."}}
{"id": "2509.25894", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.25894", "abs": "https://arxiv.org/abs/2509.25894", "authors": ["Simin Chen", "Yixin He", "Suman Jana", "Baishakhi Ray"], "title": "Red Teaming Program Repair Agents: When Correct Patches can Hide Vulnerabilities", "comment": null, "summary": "LLM-based agents are increasingly deployed for software maintenance tasks\nsuch as automated program repair (APR). APR agents automatically fetch GitHub\nissues and use backend LLMs to generate patches that fix the reported bugs.\nHowever, existing work primarily focuses on the functional correctness of\nAPR-generated patches, whether they pass hidden or regression tests, while\nlargely ignoring potential security risks. Given the openness of platforms like\nGitHub, where any user can raise issues and participate in discussions, an\nimportant question arises: Can an adversarial user submit a valid issue on\nGitHub that misleads an LLM-based agent into generating a functionally correct\nbut vulnerable patch? To answer this question, we propose SWExploit, which\ngenerates adversarial issue statements designed to make APR agents produce\npatches that are functionally correct yet vulnerable. SWExploit operates in\nthree main steps: (1) program analysis to identify potential injection points\nfor vulnerable payloads; (2) adversarial issue generation to provide misleading\nreproduction and error information while preserving the original issue\nsemantics; and (3) iterative refinement of the adversarial issue statements\nbased on the outputs of the APR agents. Empirical evaluation on three agent\npipelines and five backend LLMs shows that SWExploit can produce patches that\nare both functionally correct and vulnerable (the attack success rate on the\ncorrect patch could reach 0.91, whereas the baseline ASRs are all below 0.20).\nBased on our evaluation, we are the first to challenge the traditional\nassumption that a patch passing all tests is inherently reliable and secure,\nhighlighting critical limitations in the current evaluation paradigm for APR\nagents.", "AI": {"tldr": "Even patches generated by LLM-based program repair agents that pass all tests can still be vulnerable if adversarial users craft misleading GitHub issues. SWExploit, an adversarial issue generator, successfully causes APR agents to make functionally correct yet insecure patches, revealing critical security gaps in current agent evaluation standards.", "motivation": "The paper is motivated by the increasing use of LLM-based agents in automated program repair (APR), particularly their lack of consideration for security risks when generating functionally correct patches. It questions whether adversarial users can manipulate these agents via valid GitHub issues to produce vulnerable patches.", "method": "The authors propose SWExploit, a framework that generates adversarial issue statements aimed at inducing APR agents to produce patches that are functionally correct but contain vulnerabilities. SWExploit works through three steps: (1) program analysis to find vulnerability injection points, (2) crafting misleading yet semantically valid issue statements, and (3) iterative refinement based on agent outputs.", "result": "Empirical evaluation on three agent pipelines and five backend LLMs demonstrates that SWExploit can reliably produce vulnerable yet functionally correct patches, achieving an attack success rate as high as 0.91 (compared to baselines below 0.20).", "conclusion": "The study challenges the standard assumption that functionally correct patches passing all tests are secure, exposing major weaknesses in current APR agent evaluation practices."}}
{"id": "2509.25987", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.25987", "abs": "https://arxiv.org/abs/2509.25987", "authors": ["Yilun Liu", "Ziang Chen", "Song Xu", "Minggui He", "Shimin Tao", "Weibin Meng", "Yuming Xie", "Tao Han", "Chunguang Zhao", "Jingzhou Du", "Daimeng Wei", "Shenglin Zhang", "Yongqian Sun"], "title": "R-Log: Incentivizing Log Analysis Capability in LLMs via Reasoning-based Reinforcement Learning", "comment": null, "summary": "The growing complexity of log data in modern software systems has prompted\nthe use of Large Language Models (LLMs) for automated log analysis. Current\napproaches typically rely on direct supervised fine-tuning (SFT) on log-label\npairs. However, this exacerbates the domain discrepancy between general-purpose\nLLMs and specialized log data, causing overfitting. Furthermore, SFT's\nimbalanced loss computation often allows lengthy contexts to overwhelm\ncritical, concise details in model answers, leading to hallucinations. To\naddress these limitations, we propose R-Log, a novel reasoning-based paradigm\nthat mirrors the structured, step-by-step analytical process of human\nengineers. This approach enhances generalizability by learning the underlying\nrules behind conclusions. We further employ Reinforcement Learning (RL) to\noptimize the model within a simulated O&M environment, thereby reducing\nhallucinations by directly rewarding correct outcomes. R-Log is first\ncold-started on a curated dataset of 2k+ reasoning trajectories, guided by 13\nstrategies from manual O&M practices, to establish an initial reasoning\ncapability. This ability is then refined via RL using a joint reward function.\nEmpirical evaluations on real-world logs show that R-Log outperforms existing\nmethods across five log analysis tasks, particularly in unseen scenarios (by\n228.05%). We also designed R-Log-fast with 5x speedup while keeping 93% of the\nefficacy.", "AI": {"tldr": "R-Log is a new framework for log analysis in software systems, combining step-by-step reasoning with reinforcement learning to prevent overfitting and hallucinations found in standard LLM approaches. It outperforms previous methods, especially in unfamiliar settings, and a faster version retains most of its effectiveness.", "motivation": "Modern software systems produce complex log data, making automated analysis challenging. Existing LLM-based methods use supervised fine-tuning on log-label pairs but suffer from overfitting and hallucinations due to domain mismatch and imbalanced loss calculations.", "method": "R-Log is proposed as a reasoning-based framework that replicates human engineers' analytical processes. It leverages structured step-by-step reasoning and incorporates reinforcement learning (RL) in a simulated operations & maintenance (O&M) environment to reward correct outcomes and reduce hallucinations. R-Log is initially trained with a curated dataset of 2k+ reasoning trajectories based on 13 O&M strategies, then refined via RL with a joint reward function. Additionally, R-Log-fast offers significant speedup with minimal efficacy loss.", "result": "Empirical tests on real-world logs show that R-Log surpasses existing methods in five log analysis tasks, excelling especially in unseen scenarios (improving results by 228.05%). R-Log-fast delivers a 5x speedup while retaining 93% of the original efficacy.", "conclusion": "R-Log effectively boosts generalizability and accuracy in log analysis, particularly for novel scenarios, by mimicking human reasoning and employing reinforcement learning. The fast variant maintains high efficiency and speed."}}
{"id": "2509.26014", "categories": ["cs.SE", "cs.IR"], "pdf": "https://arxiv.org/pdf/2509.26014", "abs": "https://arxiv.org/abs/2509.26014", "authors": ["Joel Garcia-Escribano", "Arkaitz Carbajo", "Mikel Ega\u00f1a Aranguren", "Unai Lopez-Novoa"], "title": "Using GPT to build a Project Management assistant for Jira environments", "comment": null, "summary": "In the domain of Project Management, the sheer volume of data is a challenge\nthat project managers continually have to deal with. Effectively steering\nprojects from inception to completion requires handling of diverse information\nstreams, including timelines, budgetary considerations, and task dependencies.\nTo navigate this data-driven landscape with precision and agility, project\nmanagers must rely on efficient and sophisticated tools. These tools have\nbecome essential, as they enable project managers to streamline communication,\noptimize resource allocation, and make informed decisions in real-time.\nHowever, many of these tools have steep learning curves and require using\ncomplex programming languages to retrieve the exact data that project managers\nneed. In this work we present JiraGPT Next, a software that uses the GPT Large\nLanguage Model to ease the process by which project managers deal with large\namounts of data. It is conceived as an add-on for Jira, one of the most popular\nProject Management tools, and provides a natural language interface to retrieve\ninformation. This work presents the design decisions behind JiraGPT Next and an\nevaluation of the accuracy of GPT in this context, including the effects of\nproviding different prompts to complete a particular task.", "AI": {"tldr": "JiraGPT Next integrates GPT with Jira, enabling project managers to retrieve project data via natural language, improving accessibility and efficiency over traditional methods.", "motivation": "Project managers struggle with the complexity and volume of project data and the difficulty of using traditional tools with steep learning curves to retrieve needed information.", "method": "The authors designed JiraGPT Next as a natural language add-on for Jira, leveraging GPT LLM to interpret user queries, and evaluated the accuracy of GPT responses and prompt effects.", "result": "JiraGPT Next allows project managers to interact with Jira data using natural language, eases data management, and prompt variations can impact accuracy.", "conclusion": "JiraGPT Next improves data retrieval for project managers using natural language, making data interactions more accessible and efficient."}}
{"id": "2509.26031", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.26031", "abs": "https://arxiv.org/abs/2509.26031", "authors": ["Hina Anwar", "Dietmar Pfahl", "Satish N. Srirama"], "title": "Evaluating the impact of code smell refactoring on the energy consumption of Android applications", "comment": null, "summary": "Energy consumption of mobile apps is a domain that is receiving a lot of\nattention from researchers. Recent studies indicate that the energy consumption\nof mobile devices could be improved by improving the quality of mobile apps.\nFrequent refactoring is one way of achieving this goal. In this paper, we\nexplore the performance and energy impact of several common code refactorings\nin Android apps. Experimental results indicate that some code smell\nrefactorings positively impact the energy consumption of Android apps.\nRefactoring of the code smells \"Duplicated code\" and \"Type checking\" reduce\nenergy consumption by up to 10.8%. Significant reduction in energy consumption,\nhowever, does not seem to be directly related to the increase or decrease of\nexecution time. In addition, the energy impact over permutations of code smell\nrefactorings in the selected Android apps was small. When analyzing the order\nin which refactorings were made across code smell types, it turned out that\nsome permutations resulted in a reduction and some in an increase of energy\nconsumption for the analyzed apps. More research needs to be done to\ninvestigate how factors like size and age of software apps, experience, and\nnumber of contributors to app development correlate with (a) the number and\ntype of code smells found and (b) the impact of energy consumption and\nperformance after refactoring.", "AI": {"tldr": "Refactoring some code smells in Android apps, especially duplicated code and type checking, can reduce energy use by up to 10.8%. However, benefits vary depending on the refactoring type and order. More research is needed on how app features influence refactoring's energy impact.", "motivation": "There is growing concern about the energy consumption of mobile apps, as improving their energy efficiency could significantly benefit device battery life. Researchers are interested in how frequent code refactoring might help optimize energy usage in Android apps.", "method": "The authors experimentally analyzed Android apps by applying several common code refactorings targeting code smells (e.g. duplicated code and type checking). They measured both performance and energy consumption, including assessments of refactoring order and permutations.", "result": "Refactoring code smells such as duplicated code and type checking reduced energy consumption by up to 10.8%. However, changes in energy use were not directly linked to execution time changes. The effect of refactoring order was mixed\u2014some permutations decreased energy consumption, others increased it. Generally, the overall energy impact of permutations was small.", "conclusion": "Certain code smell refactorings can positively impact energy consumption in Android apps. The relationship between refactoring and energy savings is complex and not fully determined by execution time. Further study is needed to examine how app characteristics (size, age, development team experience) affect code smells and energy outcomes after refactoring."}}
{"id": "2509.26110", "categories": ["cs.SE", "astro-ph.IM"], "pdf": "https://arxiv.org/pdf/2509.26110", "abs": "https://arxiv.org/abs/2509.26110", "authors": ["Dmitriy Kostunin", "Vladimir Sotnikov", "Sergo Golovachev", "Abhay Mehta", "Tim Lukas Holch", "Elisa Jones"], "title": "Agent-based code generation for the Gammapy framework", "comment": "ICRC2025 proceedings PoS(ICRC2025)753", "summary": "Software code generation using Large Language Models (LLMs) is one of the\nmost successful applications of modern artificial intelligence. Foundational\nmodels are very effective for popular frameworks that benefit from\ndocumentation, examples, and strong community support. In contrast, specialized\nscientific libraries often lack these resources and may expose unstable APIs\nunder active development, making it difficult for models trained on limited or\noutdated data. We address these issues for the Gammapy library by developing an\nagent capable of writing, executing, and validating code in a controlled\nenvironment. We present a minimal web demo and an accompanying benchmarking\nsuite. This contribution summarizes the design, reports our current status, and\noutlines next steps.", "AI": {"tldr": "This paper introduces an agent that assists code generation for the Gammapy scientific library, addressing challenges from limited documentation and unstable APIs. It features a demo and benchmarking suite, demonstrating improved support for specialized libraries using LLMs.", "motivation": "The motivation is to improve code generation capabilities for specialized scientific libraries, which often lack sufficient documentation, examples, and community support, making it challenging for LLMs to handle them effectively.", "method": "The authors develop an agent designed to write, execute, and validate code for the Gammapy library within a controlled environment. They provide a minimal web demo and a benchmarking suite to evaluate the agent's performance.", "result": "The paper presents the design of the agent, reports its current status, and offers next steps for further development. A minimal demo and benchmarking suite accompany the agent to showcase its capabilities.", "conclusion": "Developing specialized agents tailored for scientific libraries can overcome limitations faced by LLMs trained on general data, making code generation and validation more feasible for niche or evolving libraries."}}
{"id": "2509.26111", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.26111", "abs": "https://arxiv.org/abs/2509.26111", "authors": ["Shuai Wang", "Liang Ding", "Li Shen", "Yong Luo", "Han Hu", "Lefei Zhang", "Fu Lin"], "title": "A Multi-Language Object-Oriented Programming Benchmark for Large Language Models", "comment": "20 pages, 12 figures", "summary": "Establishing fair and robust benchmarks is essential for evaluating\nintelligent code generation by large language models (LLMs). Our survey of 35\nexisting benchmarks uncovers three major imbalances: 85.7% focus on a single\nprogramming language; 94.3% target only function-level or statement-level\ntasks; and over 80% include fewer than ten test cases on average. To address\nthese gaps, we propose MultiOOP, a multi-language object-oriented programming\nbenchmark covering six popular languages (Python, PHP, C++, C#, Java,\nJavaScript) with 267 tasks per language. We design a translator that extends an\nexisting single-language OOP benchmark and the pass@o metric to a multilingual\nsetting. Moreover, we propose an automated framework for augmenting test cases\nto ensure the reliability of the evaluation results. We evaluate 14 mainstream\nLLMs under zero-shot prompting and report three key findings: 1) Substantial\nperformance degradation: pass@1 scores on MultiOOP drop by up to 65.6\npercentage points compared to function-level tasks (e.g., HumanEval). 2)\nCross-language variability: GPT-4o mini achieves pass@1 of 48.06% in Python but\nonly 0.12%-15.26% in other languages, indicating limited multilingual\ngeneralization. 3) Conceptual gaps: pass@o scores are consistently 1.1-19.2\npoints lower than pass@k, demonstrating that LLMs often generate executable\ncode without fully capturing core OOP concepts. Our benchmark, metric\nextensions, and evaluation scripts will be publicly released to foster a more\nbalanced and comprehensive assessment of LLMs in object-oriented code\ngeneration. Our code and data will be released at\nhttps://github.com/alphadl/OOP-eval and\nhttps://huggingface.co/datasets/codeai-dteam/MultiOOP respectively.", "AI": {"tldr": "Current code generation benchmarks for LLMs lack multi-language coverage and depth. MultiOOP introduces 267 OOP tasks across six languages, showing that LLMs struggle with multilingual generalization and deep OOP concepts. The study offers new metrics and tools for fairer evaluation and will release all resources publicly.", "motivation": "Existing benchmarks for evaluating code generation by large language models (LLMs) are overly narrow: most focus on a single language, simple tasks, and have few test cases. These limitations hinder robust, fair assessment of LLMs' abilities, especially for object-oriented programming (OOP) and multilingual scenarios.", "method": "The authors create MultiOOP, a new benchmark with 267 object-oriented programming tasks in each of six major programming languages. They translate and extend an existing OOP benchmark, adapt the pass@o metric for multilingual use, and offer automated augmentation of test cases to improve evaluation reliability. Fourteen LLMs are evaluated under zero-shot prompting, comparing their performance across languages and task types.", "result": "The LLMs show significant performance drop on MultiOOP compared to simpler benchmarks (up to 65.6 percentage points lower pass@1). Performance varies greatly between languages (e.g., GPT-4o mini gets 48.06% in Python vs. as low as 0.12% elsewhere). LLMs often generate code that runs but fails to fully capture OOP concepts, as shown by lower pass@o scores compared to pass@k.", "conclusion": "MultiOOP exposes major gaps in LLMs' capabilities for multilingual, object-oriented code generation, highlighting the need for better benchmarks and evaluation metrics. The authors' contributions\u2014benchmark, metrics, and scripts\u2014will support more comprehensive, balanced assessments going forward."}}
{"id": "2509.26173", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.26173", "abs": "https://arxiv.org/abs/2509.26173", "authors": ["Lisi Qarkaxhija", "Maximilian Carparo", "Stefan Menzel", "Bernhard Sendhoff", "Ingo Scholtes"], "title": "Understanding Collective Social Behavior in OSS Communities: A Co-editing Network Analysis of Activity Cascades", "comment": null, "summary": "Understanding the collective social behavior of software developers is\ncrucial to model and predict the long-term dynamics and sustainability of Open\nSource Software (OSS) communities. To this end, we analyze temporal activity\npatterns of developers, revealing an inherently ``bursty'' nature of commit\ncontributions. To investigate the social mechanisms behind this phenomenon, we\nadopt a network-based modelling framework that captures developer interactions\nthrough co-editing networks. Our framework models social interactions, where a\ndeveloper editing the code of other developers triggers accelerated activity\namong collaborators. Using a large data set on 50 major OSS communities, we\nfurther develop a method that identifies activity cascades, i.e. the\npropagation of developer activity in the underlying co-editing network. Our\nresults suggest that activity cascades are a statistically significant\nphenomenon in more than half of the studied projects. We further show that our\ninsights can be used to develop a simple yet practical churn prediction method\nthat forecasts which developers are likely to leave a project. Our work sheds\nlight on the emergent collective social dynamics in OSS communities and\nhighlights the importance of activity cascades to understand developer churn\nand retention in collaborative software projects.", "AI": {"tldr": "The paper models OSS developer interactions and finds that bursts of collaborative activity ('activity cascades') help predict which developers may leave. This new understanding supports improved retention strategies.", "motivation": "Understanding the collective social behavior of software developers is essential for modeling and predicting the long-term dynamics and sustainability of OSS communities.", "method": "The paper analyzes temporal activity patterns of developers and uses a network-based modelling framework to capture developer interactions via co-editing networks. It further develops a method to identify activity cascades\u2014propagation of developer activity within these networks.", "result": "Activity cascades are found to be statistically significant in over half of the studied OSS projects. These insights enable the development of a practical churn prediction method to forecast which developers may leave a project.", "conclusion": "Activity cascades are fundamental to understanding developer churn and retention, highlighting their importance for sustaining OSS communities."}}
{"id": "2509.26204", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.26204", "abs": "https://arxiv.org/abs/2509.26204", "authors": ["Rangeet Pan", "Tyler Stennett", "Raju Pavuluri", "Nate Levin", "Alessandro Orso", "Saurabh Sinha"], "title": "Hamster: A Large-Scale Study and Characterization of Developer-Written Tests", "comment": null, "summary": "Automated test generation (ATG), which aims to reduce the cost of manual test\nsuite development, has been investigated for decades and has produced countless\ntechniques based on a variety of approaches: symbolic analysis, search-based,\nrandom and adaptive-random, learning-based, and, most recently,\nlarge-language-model-based approaches. However, despite this large body of\nresearch, there is still a gap in our understanding of the characteristics of\ndeveloper-written tests and, consequently, in our assessment of how well ATG\ntechniques and tools can generate realistic and representative tests. To bridge\nthis gap, we conducted an extensive empirical study of developer-written tests\nfor Java applications, covering 1.7 million test cases from open-source\nrepositories. Our study is the first of its kind in studying aspects of\ndeveloper-written tests that are mostly neglected in the existing literature,\nsuch as test scope, test fixtures and assertions, types of inputs, and use of\nmocking. Based on the characterization, we then compare existing tests with\nthose generated by two state-of-the-art ATG tools. Our results highlight that a\nvast majority of developer-written tests exhibit characteristics that are\nbeyond the capabilities of current ATG tools. Finally, based on the insights\ngained from the study, we identify promising research directions that can help\nbridge the gap between current tool capabilities and more effective tool\nsupport for developer testing practices. We hope that this work can set the\nstage for new advances in the field and bring ATG tools closer to generating\nthe types of tests developers write.", "AI": {"tldr": "This paper analyzes 1.7 million Java test cases to reveal how developer-written tests differ from those generated by state-of-the-art ATG tools. Many characteristics of real developer tests are still beyond the reach of automation, suggesting a need for improved tools and new research directions.", "motivation": "There is a lack of understanding about the specific characteristics of developer-written tests, which hinders accurate assessment and improvement of automated test generation (ATG) tools.", "method": "An extensive empirical study analyzing 1.7 million developer-written test cases from open-source Java applications, focusing on aspects often neglected such as test scope, fixtures and assertions, input types, and mocking. The study further compares these tests to those generated by two state-of-the-art ATG tools.", "result": "The majority of developer-written tests possess characteristics not captured by current ATG tools, revealing significant limitations of automated approaches in matching real-world developer testing practices.", "conclusion": "Current ATG tools fall short in generating realistic and representative tests akin to those written by developers. The study identifies the gap and proposes future research directions to enhance tool support and make ATG outputs more useful for developers."}}
{"id": "2509.26336", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.26336", "abs": "https://arxiv.org/abs/2509.26336", "authors": ["Zhouruixing Zhu", "Zhihan Jiang", "Tianyi Yang", "Pinjia He"], "title": "UniSage: A Unified and Post-Analysis-Aware Sampling for Microservices", "comment": null, "summary": "Traces and logs are essential for observability and fault diagnosis in modern\ndistributed systems. However, their ever-growing volume introduces substantial\nstorage overhead and complicates troubleshooting. Existing approaches typically\nadopt a sample-before-analysis paradigm: even when guided by data heuristics,\nthey inevitably discard failure-related information and hinder transparency in\ndiagnosing system behavior. To address this, we introduce UniSage, the first\nunified framework to sample both traces and logs using a post-analysis-aware\nparadigm. Instead of discarding data upfront, UniSagefirst performs lightweight\nand multi-modal anomaly detection and root cause analysis (RCA) on the complete\ndata stream. This process yields fine-grained, service-level diagnostic\ninsights that guide a dual-pillar sampling strategy for handling both normal\nand anomalous scenarios: an analysis-guided sampler prioritizes data implicated\nby RCA, while an edge-case-based sampler ensures rare but critical behaviors\nare captured. Together, these pillars ensure comprehensive coverage of critical\nsignals without excessive redundancy. Extensive experiments demonstrate that\nUniSage significantly outperforms state-of-the-art baselines. At a 2.5%\nsampling rate, it captures 56.5% of critical traces and 96.25% of relevant\nlogs, while improving the accuracy (AC@1) of downstream root cause analysis by\n42.45%. Furthermore, its efficient pipeline processes 10 minutes of telemetry\ndata in under 5 seconds, demonstrating its practicality for production\nenvironments.", "AI": {"tldr": "UniSage is a novel framework that samples observability data after performing fast whole-stream analysis, capturing vital system traces and logs with minimal storage and high accuracy, outperforming prior methods for distributed systems monitoring and diagnosis.", "motivation": "The rapid increase in the volume of traces and logs in distributed systems creates major storage constraints and complicates troubleshooting, as existing sampling methods often discard important failure-related data.", "method": "UniSage is a unified framework that samples both traces and logs using a post-analysis-aware paradigm. It first performs lightweight, multi-modal anomaly detection and root cause analysis on the entire data stream, then employs a dual-pillar sampling strategy: an analysis-guided sampler for RCA-implicated data, and an edge-case-based sampler for rare events.", "result": "At just a 2.5% sampling rate, UniSage captures 56.5% of critical traces and 96.25% of relevant logs. It also improves the accuracy (AC@1) of downstream root cause analysis by 42.45%. The pipeline processes 10 minutes of telemetry data in less than 5 seconds, proving practical for real-world deployment.", "conclusion": "UniSage achieves efficient, effective, and comprehensive sampling for observability data. It delivers significant improvements over existing baselines in capturing critical information while reducing storage overhead and supporting accurate failure diagnosis."}}
{"id": "2509.26422", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.26422", "abs": "https://arxiv.org/abs/2509.26422", "authors": ["Michelle Barker", "Jeremy Cohen", "Pedro Hern\u00e1ndez Serrano", "Daniel S. Katz", "Kim Martin", "Dan Rudmann", "Hugh Shanahan"], "title": "Institutional Policy Pathways for Supporting Research Software: Global Trends and Local Practices", "comment": null, "summary": "As research software becomes increasingly central to modern science,\nresearch-performing organisations (RPOs) need to ensure that their investment\nin people, skills and infrastructure around research software produces\nsustainable and maintainable software that improves the research they perform,\nwhich in turn improves the overall institution and its reputation and funding,\nfor example, by competing with peers who lack this approach. However, research\ninstitution management and recognition of research software and its personnel\nhas mostly often developed in an ad hoc manner. RPO training infrastructures,\nrecognition and reward structures, have not developed at a sufficient rate to\nsupport and encourage both the widespread use of research software best\npractices and the long-term support for technical roles that is required. To\nbegin to address this fundamental problem for modern research environments,\nRPOs must implement and adopt robust policies to support research software\ndevelopment, use, and sustainability. Despite growing momentum from funders and\npublishers around FAIR and open science principles, research\ninstitutional-level policies specifically addressing research software remain\nlimited or lacking in breadth.\n  This article outlines the work of the Policies in Research Organisations for\nResearch Software (PRO4RS) Working Group (WG), a joint initiative of the\nResearch Software Alliance (ReSA) and the Research Data Alliance (RDA), which\nexamined and advanced research software policy development across institutions\nworldwide. After consideration of the rationale for institutional policies on\nresearch software, the PRO4RS WG outputs and analysis are utilised to highlight\ncritical policy gaps, particularly related to consideration of research\nsoftware personnel in policy work focused on reform of research assessment.", "AI": {"tldr": "As research software becomes more essential, institutions have not kept pace with policy and support structures. The PRO4RS WG analyzed global policies, found substantial gaps, especially around personnel recognition, and stresses the need for robust, institution-wide approaches to support research software sustainability.", "motivation": "Research software has become essential in modern science, but institutions lack adequate policies, training, and recognition structures to support sustainable development and maintenance.", "method": "The PRO4RS Working Group (WG), a joint effort by ReSA and RDA, examined institutional research software policy development worldwide, analyzed existing policies, and highlighted gaps using their outputs.", "result": "The analysis identified significant gaps in institutional policies, especially regarding the support and recognition of research software personnel in research assessment reforms.", "conclusion": "Robust institutional policies focused on research software and its personnel are crucial for sustainable research environments and are currently insufficient, hampering long-term advancement."}}
{"id": "2509.26458", "categories": ["cs.SE", "68Q60, 03B70", "D.2.5"], "pdf": "https://arxiv.org/pdf/2509.26458", "abs": "https://arxiv.org/abs/2509.26458", "authors": ["Robin Lee", "Youngho Nam"], "title": "EQ-Robin: Generating Multiple Minimal Unique-Cause MC/DC Test Suites", "comment": "5 pages", "summary": "Modified Condition/Decision Coverage (MC/DC), particularly its strict\nUnique-Cause form, is a cornerstone of safety-critical software verification. A\nrecent algorithm, \"Robin's Rule,\" introduced a deterministic method to\nconstruct the theoretical minimum of N+1 test cases for Singular Boolean\nExpressions (SBEs). However, this approach yields only a single test suite,\nintroducing a critical risk: if a test case forming a required 'independence\npair' is an illegal input forbidden by system constraints, the suite fails to\nachieve 100% coverage. This paper proposes EQ-Robin, a lightweight pipeline\nthat systematically generates a family of minimal Unique-Cause MC/DC suites to\nmitigate this risk. We introduce a method for systematically generating\nsemantically equivalent SBEs by applying algebraic rearrangements to an\nAbstract Syntax Tree (AST) representation of the expression. By applying\nRobin's Rule to each structural variant, a diverse set of test suites can be\nproduced. This provides a resilient path to discovering a valid test suite that\npreserves the N+1 minimality guarantee while navigating real-world constraints.\nWe outline an evaluation plan on TCAS-II-derived SBEs to demonstrate how\nEQ-Robin offers a practical solution for ensuring robust MC/DC coverage.", "AI": {"tldr": "Robin's Rule generates only one minimal MC/DC test suite, which can fail when system constraints make some tests illegal. EQ-Robin creates many semantically equivalent test suites using algebraic transformations, ensuring robust, minimal coverage in safety-critical contexts despite constraints.", "motivation": "The motivation arises from a limitation in the Robin's Rule algorithm for generating minimal Unique-Cause MC/DC test suites for Singular Boolean Expressions (SBEs); specifically, if a required 'independence pair' contains an illegal input, the minimal suite cannot achieve full coverage and fails in safety-critical verification.", "method": "The paper proposes EQ-Robin, a pipeline that generates multiple minimal MC/DC test suites by systematically creating semantically equivalent variants of SBEs using algebraic rearrangements of their AST representations. Robin's Rule is applied to each variant, producing varied minimal suites.", "result": "EQ-Robin can construct diverse minimal test suites, increasing the likelihood of obtaining a valid suite that meets system constraints without sacrificing coverage or minimality. The evaluation plan involves applying the method to TCAS-II-derived SBEs.", "conclusion": "EQ-Robin addresses the risk of incomplete MC/DC coverage associated with Robin's Rule by generating multiple minimal Unique-Cause MC/DC suites, allowing robust coverage even when constraints prohibit specific test cases."}}
{"id": "2509.26463", "categories": ["cs.SE", "D.2.5"], "pdf": "https://arxiv.org/pdf/2509.26463", "abs": "https://arxiv.org/abs/2509.26463", "authors": ["Junsong Pu", "Yichen Li", "Zhuangbin Chen", "Jinyang Liu", "Zhihan Jiang", "Jianjun Chen", "Rui Shi", "Zibin Zheng", "Tieying Zhang"], "title": "ErrorPrism: Reconstructing Error Propagation Paths in Cloud Service Systems", "comment": "12 pages, 6 figures, 1 table, this paper has been accepted by the\n  40th IEEE/ACM International Conference on Automated Software Engineering, ASE\n  2025", "summary": "Reliability management in cloud service systems is challenging due to the\ncascading effect of failures. Error wrapping, a practice prevalent in modern\nmicroservice development, enriches errors with context at each layer of the\nfunction call stack, constructing an error chain that describes a failure from\nits technical origin to its business impact. However, this also presents a\nsignificant traceability problem when recovering the complete error propagation\npath from the final log message back to its source. Existing approaches are\nineffective at addressing this problem. To fill this gap, we present ErrorPrism\nin this work for automated reconstruction of error propagation paths in\nproduction microservice systems. ErrorPrism first performs static analysis on\nservice code repositories to build a function call graph and map log strings to\nrelevant candidate functions. This significantly reduces the path search space\nfor subsequent analysis. Then, ErrorPrism employs an LLM agent to perform an\niterative backward search to accurately reconstruct the complete, multi-hop\nerror path. Evaluated on 67 production microservices at ByteDance, ErrorPrism\nachieves 97.0% accuracy in reconstructing paths for 102 real-world errors,\noutperforming existing static analysis and LLM-based approaches. ErrorPrism\nprovides an effective and practical tool for root cause analysis in industrial\nmicroservice systems.", "AI": {"tldr": "ErrorPrism is a novel tool that combines static code analysis and LLM-based reasoning to accurately trace error propagation paths in microservice systems, achieving high accuracy and outperforming existing methods in production environments.", "motivation": "Cloud service systems, especially those using microservices, face reliability challenges due to failures that can cascade through complex error chains. Error wrapping, while helpful for context, makes tracing these chains back to their source difficult and existing solutions do not solve this traceability problem effectively.", "method": "The paper introduces ErrorPrism, a tool that first uses static analysis of service code to construct a function call graph and map log strings to candidate functions, reducing the path search space. It then uses an LLM agent for iterative backward search on this graph to accurately reconstruct error propagation paths.", "result": "ErrorPrism was evaluated on 67 production microservices at ByteDance and demonstrated 97.0% accuracy in reconstructing error paths for 102 real-world errors. It outperformed traditional static analysis and other LLM-based solutions.", "conclusion": "ErrorPrism provides an accurate, automated, and practical method for reconstructing error propagation paths in microservices, significantly aiding root cause analysis and surpassing prior approaches."}}
{"id": "2509.26546", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.26546", "abs": "https://arxiv.org/abs/2509.26546", "authors": ["Meghana Sistla", "Gogul Balakrishnan", "Pat Rondon", "Jos\u00e9 Cambronero", "Michele Tufano", "Satish Chandra"], "title": "Towards Verified Code Reasoning by LLMs", "comment": "43 pages", "summary": "While LLM-based agents are able to tackle a wide variety of code reasoning\nquestions, the answers are not always correct. This prevents the agent from\nbeing useful in situations where high precision is desired: (1) helping a\nsoftware engineer understand a new code base, (2) helping a software engineer\nduring code review sessions, and (3) ensuring that the code generated by an\nautomated code generation system meets certain requirements (e.g. fixes a bug,\nimproves readability, implements a feature).\n  As a result of this lack of trustworthiness, the agent's answers need to be\nmanually verified before they can be trusted. Manually confirming responses\nfrom a code reasoning agent requires human effort and can result in slower\ndeveloper productivity, which weakens the assistance benefits of the agent. In\nthis paper, we describe a method to automatically validate the answers provided\nby a code reasoning agent by verifying its reasoning steps. At a very high\nlevel, the method consists of extracting a formal representation of the agent's\nresponse and, subsequently, using formal verification and program analysis\ntools to verify the agent's reasoning steps.\n  We applied this approach to a benchmark set of 20 uninitialized variable\nerrors detected by sanitizers and 20 program equivalence queries. For the\nuninitialized variable errors, the formal verification step was able to\nvalidate the agent's reasoning on 13/20 examples, and for the program\nequivalence queries, the formal verification step successfully caught 6/8\nincorrect judgments made by the agent.", "AI": {"tldr": "The paper introduces a method to automatically validate the responses of code reasoning agents using formal verification tools. Experiments show it can successfully confirm correct answers and catch incorrect ones, improving reliability while highlighting remaining limitations.", "motivation": "LLM-based agents can answer many code reasoning questions, but their answers aren't always correct. This unreliability is problematic, especially when high precision is necessary, such as in code understanding, code reviews, or evaluating automatically generated code. The lack of trust in these agents means human engineers must verify their responses, consuming time and reducing productivity.", "method": "The paper proposes an automatic method to validate answers from a code reasoning agent. This is done by extracting a formal representation of the agent's response and using formal verification and program analysis tools to check the reasoning steps for correctness.", "result": "The method was evaluated with 20 uninitialized variable error cases and 20 program equivalence queries. For the uninitialized variable cases, 13 out of 20 agent responses were validated successfully. For the program equivalence queries, the system detected 6 out of 8 incorrect agent judgments.", "conclusion": "Automatically validating code reasoning agent responses using formal verification can improve trustworthiness and reduce manual effort, though there are still gaps in coverage and accuracy."}}
