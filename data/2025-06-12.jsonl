{"id": "2506.09230", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2506.09230", "abs": "https://arxiv.org/abs/2506.09230", "authors": ["Juan Carlos Recio Abad", "Ruben Saborido", "Francisco Chicano"], "title": "Formal Methods Meets Readability: Auto-Documenting JML Java Code", "comment": null, "summary": "This paper investigates whether formal specifications using Java Modeling\nLanguage (JML) can enhance the quality of Large Language Model (LLM)-generated\nJavadocs. While LLMs excel at producing documentation from code alone, we\nhypothesize that incorporating formally verified invariants yields more\ncomplete and accurate results. We present a systematic comparison of\ndocumentation generated from JML-annotated and non-annotated Java classes,\nevaluating quality through both automated metrics and expert analysis. Our\nfindings demonstrate that JML significantly improves class-level documentation\ncompleteness, with more moderate gains at the method level. Formal\nspecifications prove particularly effective in capturing complex class\ninvariants and design contracts that are frequently overlooked in code-only\ndocumentation. A threshold effect emerges, where the benefits of JML become\nmore pronounced for classes with richer sets of invariants. While JML enhances\nspecification coverage, its impact on core descriptive quality is limited,\nsuggesting that formal specifications primarily ensure comprehensive coverage\nrather than fundamentally altering implementation descriptions. These results\noffer actionable insights for software teams adopting formal methods in\ndocumentation workflows, highlighting scenarios where JML provides clear\nadvantages. The study contributes to AI-assisted software documentation\nresearch by demonstrating how formal methods and LLMs can synergistically\nimprove documentation quality."}
{"id": "2506.09289", "categories": ["cs.SE", "cs.CL", "D.0; I.2"], "pdf": "https://arxiv.org/pdf/2506.09289", "abs": "https://arxiv.org/abs/2506.09289", "authors": ["Boxi Yu", "Yuxuan Zhu", "Pinjia He", "Daniel Kang"], "title": "UTBoost: Rigorous Evaluation of Coding Agents on SWE-Bench", "comment": null, "summary": "The advent of Large Language Models (LLMs) has spurred the development of\ncoding agents for real-world code generation. As a widely used benchmark for\nevaluating the code generation capabilities of these agents, SWE-Bench uses\nreal-world problems based on GitHub issues and their corresponding pull\nrequests. However, the manually written test cases included in these pull\nrequests are often insufficient, allowing generated patches to pass the tests\nwithout resolving the underlying issue. To address this challenge, we introduce\nUTGenerator, an LLM-driven test case generator that automatically analyzes\ncodebases and dependencies to generate test cases for real-world Python\nprojects. Building on UTGenerator, we propose UTBoost, a comprehensive\nframework for test case augmentation. In our evaluation, we identified 36 task\ninstances with insufficient test cases and uncovered 345 erroneous patches\nincorrectly labeled as passed in the original SWE Bench. These corrections,\nimpacting 40.9% of SWE-Bench Lite and 24.4% of SWE-Bench Verified leaderboard\nentries, yield 18 and 11 ranking changes, respectively."}
{"id": "2506.09370", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2506.09370", "abs": "https://arxiv.org/abs/2506.09370", "authors": ["Rohit Mehra", "Priyavanshi Pathania", "Vibhu Saujanya Sharma", "Vikrant Kaulgud", "Sanjay Podder", "Adam P. Burden"], "title": "Assessing the Impact of Refactoring Energy-Inefficient Code Patterns on Software Sustainability: An Industry Case Study", "comment": "3 pages. To be published in the proceedings of 38th IEEE/ACM\n  International Conference on Automated Software Engineering (ASE 2023),\n  Kirchberg, Luxembourg", "summary": "Advances in technologies like artificial intelligence and metaverse have led\nto a proliferation of software systems in business and everyday life. With this\nwidespread penetration, the carbon emissions of software are rapidly growing as\nwell, thereby negatively impacting the long-term sustainability of our\nenvironment. Hence, optimizing software from a sustainability standpoint\nbecomes more crucial than ever. We believe that the adoption of automated tools\nthat can identify energy-inefficient patterns in the code and guide appropriate\nrefactoring can significantly assist in this optimization. In this extended\nabstract, we present an industry case study that evaluates the sustainability\nimpact of refactoring energy-inefficient code patterns identified by automated\nsoftware sustainability assessment tools for a large application. Preliminary\nresults highlight a positive impact on the application's sustainability\npost-refactoring, leading to a 29% decrease in per-user per-month energy\nconsumption."}
{"id": "2506.09396", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2506.09396", "abs": "https://arxiv.org/abs/2506.09396", "authors": ["Zongjie Li", "Shuai Wang"], "title": "Reasoning as a Resource: Optimizing Fast and Slow Thinking in Code Generation Models", "comment": null, "summary": "This position paper proposes a fundamental shift in designing code generation\nmodels: treating reasoning depth as a controllable resource. Rather than being\nan incidental byproduct of prompting, we argue that the trade-off between\nrapid, direct answers (\"fast thinking\") and elaborate, chain-of-thought\ndeliberation (\"slow thinking\") must be explicitly managed. We contend that\noptimizing reasoning budgets across the entire model lifecycle - from synthetic\ndata creation and benchmarking to real-world deploymen - can unlock superior\ntrade-offs among accuracy, latency, and cost. This paper outlines how adaptive\ncontrol over reasoning can enrich supervision signals, motivate new\nmulti-dimensional benchmarks, and inform cost-aware, security-conscious\ndeployment policies. By viewing fast and slow thinking as complementary modes\nto be scheduled, we envision coding agents that think deep when necessary and\nact fast when possible."}
{"id": "2506.09550", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2506.09550", "abs": "https://arxiv.org/abs/2506.09550", "authors": ["Fanpeng Yang", "Xu Ma", "Shuling Wang", "Xiong Xu", "Qinxiang Cao", "Naijun Zhan", "Xiaofeng Li", "Bin Gu"], "title": "Automated Synthesis of Formally Verified Multi-Abstraction Function Summaries", "comment": null, "summary": "Function summaries, which characterize the behavior of code segments\n(typically functions) through preconditions and postconditions, are essential\nfor understanding, reusing, and verifying software, particularly in\nsafety-critical domains like aerospace embedded systems. However, these\nmission-critical legacy code serving as a valuable reused asset often lacks\nformal specifications. It is challenging to automatically generate function\nsummaries for C programs, due to the existence of complex features such as\nloops, nested function calls, pointer aliasing, and so on. Moreover, function\nsummaries should support multiple abstraction levels to meet diverse\nrequirements, e.g. precise summaries capturing full functionality for formal\nverification and intuitive summaries for human understanding.\n  To address these challenges, we first propose a novel framework that combines\nsymbolic execution, large language models (LLMs), and formal verification to\ngenerate Relatively Strongest Postconditions (RSPs) and build function\nsummaries that fully capture program behavior. Our approach leverages VST-A's\nsymbolic execution to precisely track program execution paths and state\ntransitions, employs LLMs to infer loop invariants based on predefined\ntemplates, and uses Frama-C to guarantee soundness of generated summaries in an\niterative refinement loop. Furthermore, from generated RSPs, we automatically\nsynthesize strongest non-redundant postconditions expressed within given domain\nspecific language. We compare our approach with existing work through extensive\nexperiments."}
{"id": "2506.09601", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2506.09601", "abs": "https://arxiv.org/abs/2506.09601", "authors": ["Sota Nakashima", "Yuta Ishimoto", "Masanari Kondo", "Tao Xiao", "Yasutaka Kamei"], "title": "ASTAGEN: Empirical Evaluation of Automated SATD Taxonomy Generation with LLMs", "comment": null, "summary": "Technical debt refers to suboptimal code that degrades software quality. When\ndevelopers intentionally introduce such debt, it is called self-admitted\ntechnical debt (SATD). Since SATD hinders maintenance, identifying its\ncategories is key to uncovering quality issues. Traditionally, constructing\nsuch taxonomies requires manually inspecting SATD comments and surrounding\ncode, which is time-consuming, labor-intensive, and often inconsistent due to\nannotator subjectivity. This study presents ASTAGEN, an initial step toward\nautomating SATD taxonomy generation using large language models (LLMs). Given a\ncomment and its surrounding code, ASTAGEN first generates a concise explanation\nfor each SATD comment, then incrementally generates and updates categories to\nconstruct a taxonomy. We evaluate ASTAGEN on SATD datasets from three domains:\nquantum software, smart contracts, and machine learning. It successfully\nrecovers domain-specific categories reported in prior work, such as Layer\nConfiguration in machine learning. Compared to a naive use of an LLM, ASTAGEN\nproduces more consistent category assignments due to its explanation-driven,\niterative design. It also completes taxonomy generation in under two hours and\nfor less than one USD, even on the largest dataset. These results suggest that\nwhile full automation remains challenging, ASTAGEN is able to support\nsemi-automated taxonomy construction. Furthermore, our work opens up avenues\nfor future work, such as automatic taxonomy generation in other areas."}
{"id": "2506.09636", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2506.09636", "abs": "https://arxiv.org/abs/2506.09636", "authors": ["Joe Hare", "Leo Freitas", "Ken Pierce"], "title": "Translating a VDM Model of a Medical Device into Kapture", "comment": "Presented at the 23rd Overture workshop, June 2025\n  (arXiv:cs/2506.08680)", "summary": "As the complexity of safety-critical medical devices increases, so does the\nneed for clear, verifiable, software requirements. This paper explores the use\nof Kapture, a formal modelling tool developed by D-RisQ, to translate an\nexisting formal VDM model of a medical implant for treating focal epilepsy\ncalled CANDO. The work was undertaken without prior experience in formal\nmethods. The paper assess Kapture's usability, the challenges of formal\nmodelling, and the effectiveness of the translated model. The result is a model\nin Kapture which covers over 90% of the original VDM model, and produces\nmatching traces of results. While several issues were encountered during design\nand implementation, mainly due to the initial learning curve, this paper\ndemonstrates that complex systems can be effectively modelled in Kapture by\ninexperienced users and highlights some difficulties in translating VDM\nspecifications to Kapture."}
{"id": "2506.09683", "categories": ["cs.SE", "cs.CY"], "pdf": "https://arxiv.org/pdf/2506.09683", "abs": "https://arxiv.org/abs/2506.09683", "authors": ["Priyavanshi Pathania", "Nikhil Bamby", "Rohit Mehra", "Samarth Sikand", "Vibhu Saujanya Sharma", "Vikrant Kaulgud", "Sanjay Podder", "Adam P. Burden"], "title": "Calculating Software's Energy Use and Carbon Emissions: A Survey of the State of Art, Challenges, and the Way Ahead", "comment": "8 pages. To be published in the proceedings of 9th International\n  Workshop on Green and Sustainable Software (GREENS '25), April 29, 2025,\n  Ottawa, Canada (Co-located with ICSE 2025)", "summary": "The proliferation of software and AI comes with a hidden risk: its growing\nenergy and carbon footprint. As concerns regarding environmental sustainability\ncome to the forefront, understanding and optimizing how software impacts the\nenvironment becomes paramount. In this paper, we present a state-of-the-art\nreview of methods and tools that enable the measurement of software and\nAI-related energy and/or carbon emissions. We introduce a taxonomy to\ncategorize the existing work as Monitoring, Estimation, or Black-Box\napproaches. We delve deeper into the tools and compare them across different\ndimensions and granularity - for example, whether their measurement encompasses\nenergy and carbon emissions and the components considered (like CPU, GPU, RAM,\netc.). We present our observations on the practical use (component wise\nconsolidation of approaches) as well as the challenges that we have identified\nacross the current state-of-the-art. As we start an initiative to address these\nchallenges, we emphasize active collaboration across the community in this\nimportant field."}
{"id": "2506.09702", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2506.09702", "abs": "https://arxiv.org/abs/2506.09702", "authors": ["Huu Hung Nguyen", "Duc Manh Tran", "Yiran Cheng", "Thanh Le-Cong", "Hong Jin Kang", "Ratnadira Widyasari", "Shar Lwin Khin", "Ouh Eng Lieh", "Ting Zhang", "David Lo"], "title": "Mapping NVD Records to Their VFCs: How Hard is it?", "comment": null, "summary": "Mapping National Vulnerability Database (NVD) records to vulnerability-fixing\ncommits (VFCs) is crucial for vulnerability analysis but challenging due to\nsparse explicit links in NVD references.This study explores this mapping's\nfeasibility through an empirical approach. Manual analysis of NVD references\nshowed Git references enable over 86% success, while non-Git references achieve\nunder 14%. Using these findings, we built an automated pipeline extracting\n31,942 VFCs from 20,360 NVD records (8.7% of 235,341) with 87% precision,\nmainly from Git references. To fill gaps, we mined six external security\ndatabases, yielding 29,254 VFCs for 18,985 records (8.1%) at 88.4% precision,\nand GitHub repositories, adding 3,686 VFCs for 2,795 records (1.2%) at 73%\nprecision. Combining these, we mapped 26,710 unique records (11.3% coverage)\nfrom 7,634 projects, with overlap between NVD and external databases, plus\nunique GitHub contributions. Despite success with Git references, 88.7% of\nrecords remain unmapped, highlighting the difficulty without Git links. This\nstudy offers insights for enhancing vulnerability datasets and guiding future\nautomated security research."}
{"id": "2506.09713", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2506.09713", "abs": "https://arxiv.org/abs/2506.09713", "authors": ["Mugeng Liu", "Siqi Zhong", "Weichen Bi", "Yixuan Zhang", "Zhiyang Chen", "Zhenpeng Chen", "Xuanzhe Liu", "Yun Ma"], "title": "A First Look at Bugs in LLM Inference Engines", "comment": "Under review", "summary": "Large language model-specific inference engines (in short as \\emph{LLM\ninference engines}) have become a fundamental component of modern AI\ninfrastructure, enabling the deployment of LLM-powered applications (LLM apps)\nacross cloud and local devices. Despite their critical role, LLM inference\nengines are prone to bugs due to the immense resource demands of LLMs and the\ncomplexities of cross-platform compatibility. However, a systematic\nunderstanding of these bugs remains lacking. To bridge this gap, we present the\nfirst empirical study on bugs in LLM inference engines. We mine official\nrepositories of 5 widely adopted LLM inference engines, constructing a\ncomprehensive dataset of 929 real-world bugs. Through a rigorous open coding\nprocess, we analyze these bugs to uncover their symptoms, root causes, and\ncommonality. Our findings reveal six major bug symptoms and a taxonomy of 28\nroot causes, shedding light on the key challenges in bug detection and location\nwithin LLM inference engines. Based on these insights, we propose a series of\nactionable implications for researchers, inference engine vendors, and LLM app\ndevelopers."}
{"id": "2506.09759", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2506.09759", "abs": "https://arxiv.org/abs/2506.09759", "authors": ["Abhijit Paul", "Proma Chowdhury", "Kazi Sakib"], "title": "Towards Bridging Formal Methods and Human Interpretability", "comment": "Need to improve data annotation process in methodology section", "summary": "Labeled Transition Systems (LTS) are integral to model checking and design\nrepair tools. System engineers frequently examine LTS designs during model\nchecking or design repair to debug, identify inconsistencies, and validate\nsystem behavior. Despite LTS's significance, no prior research has examined\nhuman comprehension of these designs. To address this, we draw on traditional\nsoftware engineering and graph theory, identifying 7 key metrics: cyclomatic\ncomplexity, state space size, average branching factor, maximum depth, Albin\ncomplexity, modularity, and redundancy. We created a dataset of 148 LTS\ndesigns, sampling 48 for 324 paired comparisons, and ranked them using the\nBradley-Terry model. Through Kendall's Tau correlation analysis, we found that\nAlbin complexity ($\\tau = 0.444$), state space size ($\\tau = 0.420$),\ncyclomatic complexity ($\\tau = 0.366$), and redundancy ($\\tau = 0.315$) most\naccurately reflect human comprehension of LTS designs. To showcase the metrics'\nutility, we applied the Albin complexity metric within the Fortis design repair\ntool, ranking system redesigns. This ranking reduced annotators' comprehension\ntime by 39\\%, suggesting that metrics emphasizing human factors can enhance\nformal design interpretability."}
{"id": "2506.09845", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2506.09845", "abs": "https://arxiv.org/abs/2506.09845", "authors": ["Tobias Heß", "Lukas Ostheimer", "Tobias Betz", "Simon Karrer", "Tim Jannik Schmidt", "Pierre Coquet", "Sean Semmler", "Thomas Thüm"], "title": "variability.dev: Towards an Online Toolbox for Feature Modeling", "comment": "Presented at 6th International Workshop on Languages for Modelling\n  Variability (MODEVAR'24) (arXiv:cs/2402.15511). 5 pages, 3 figures", "summary": "The emergence of feature models as the default to model the variability in\nconfigurable systems fosters a rich diversity in applications, application\ndomains, and perspectives. Independent of their domain, modelers require to\nopen, view, edit, transform, save, and configure models as well as to\ncollaborate with others. However, at the time of writing, the top five results\nwhen googling ``Online Editor Feature Model'' point to editors that either have\nminimal functionality, are unmaintained or defunct, or require an offline\ninstallation, such as FeatureIDE. In this work we present a preview of our\nin-development online toolbox for feature modeling, variability.dev. In\nparticular, we showcase our collaborative feature-model editor and our online\nconfigurator both of which are built on top of the FeatureIDE library."}
{"id": "2506.09873", "categories": ["cs.SE", "cs.AI", "cs.HC"], "pdf": "https://arxiv.org/pdf/2506.09873", "abs": "https://arxiv.org/abs/2506.09873", "authors": ["Emma Kallina", "Thomas Bohné", "Jat Singh"], "title": "Stakeholder Participation for Responsible AI Development: Disconnects Between Guidance and Current Practice", "comment": "Published at the 2025 ACM Conference on Fairness, Accountability, and\n  Transparency FAccT'25", "summary": "Responsible AI (rAI) guidance increasingly promotes stakeholder involvement\n(SHI) during AI development. At the same time, SHI is already common in\ncommercial software development, but with potentially different foci. This\nstudy clarifies the extent to which established SHI practices are able to\ncontribute to rAI efforts as well as potential disconnects -- essential\ninsights to inform and tailor future interventions that further shift industry\npractice towards rAI efforts. First, we analysed 56 rAI guidance documents to\nidentify why SHI is recommended (i.e. its expected benefits for rAI) and\nuncovered goals such as redistributing power, improving socio-technical\nunderstandings, anticipating risks, and enhancing public oversight. To\nunderstand why and how SHI is currently practised in commercial settings, we\nthen conducted an online survey (n=130) and semi-structured interviews (n=10)\nwith AI practitioners. Our findings reveal that SHI in practice is primarily\ndriven by commercial priorities (e.g. customer value, compliance) and several\nfactors currently discourage more rAI-aligned SHI practices. This suggests that\nestablished SHI practices are largely not contributing to rAI efforts. To\naddress this disconnect, we propose interventions and research opportunities to\nadvance rAI development in practice."}
{"id": "2506.09929", "categories": ["cs.SE", "cs.CY"], "pdf": "https://arxiv.org/pdf/2506.09929", "abs": "https://arxiv.org/abs/2506.09929", "authors": ["Scott Schnelle", "Francesca Favaro", "Laura Fraade-Blanar", "David Wichner", "Holland Broce", "Justin Miranda"], "title": "Assessing a Safety Case: Bottom-up Guidance for Claims and Evidence Evaluation", "comment": null, "summary": "As Automated Driving Systems (ADS) technology advances, ensuring safety and\npublic trust requires robust assurance frameworks, with safety cases emerging\nas a critical tool toward such a goal. This paper explores an approach to\nassess how a safety case is supported by its claims and evidence, toward\nestablishing credibility for the overall case. Starting from a description of\nthe building blocks of a safety case (claims, evidence, and optional\nformat-dependent entries), this paper delves into the assessment of support of\neach claim through the provided evidence. Two domains of assessment are\noutlined for each claim: procedural support (formalizing process specification)\nand implementation support (demonstrating process application). Additionally,\nan assessment of evidence status is also undertaken, independently from the\nclaims support. Scoring strategies and evaluation guidelines are provided,\nincluding detailed scoring tables for claim support and evidence status\nassessment. The paper further discusses governance, continual improvement, and\ntiming considerations for safety case assessments. Reporting of results and\nfindings is contextualized within its primary use for internal decision-making\non continual improvement efforts. The presented approach builds on state of the\nart auditing practices, but specifically tackles the question of judging the\ncredibility of a safety case. While not conclusive on its own, it provides a\nstarting point toward a comprehensive \"Case Credibility Assessment\" (CCA),\nstarting from the evaluation of the support for each claim (individually and in\naggregate), as well as every piece of evidence provided. By delving into the\ntechnical intricacies of ADS safety cases, this work contributes to the ongoing\ndiscourse on safety assurance and aims to facilitate the responsible\nintegration of ADS technology into society."}
{"id": "2506.09938", "categories": ["cs.SE", "cs.DB"], "pdf": "https://arxiv.org/pdf/2506.09938", "abs": "https://arxiv.org/abs/2506.09938", "authors": ["Aaditaa Vashisht", "Rekha B S"], "title": "Microservices and Real-Time Processing in Retail IT: A Review of Open-Source Toolchains and Deployment Strategies", "comment": null, "summary": "With the rapid pace of digital transformation, the retail industry is\nincreasingly depending on real-time, scalable, and resilient systems to manage\nfinancial transactions, analyze customer behavior, and streamline order\nprocessing. This literature review explores how modern event-driven and\nmicroservices-based architectures, particularly those leveraging Apache Kafka,\nSpring Boot, MongoDB, and Kubernetes are transforming retail and financial\nsystems. By systematically reviewing academic publications, technical white\npapers, and industry reports from recent years, this study synthesizes key\nthemes and implementation strategies. The analysis reveals that technologies\nlike Kafka and Spring Boot are instrumental in building low-latency,\nevent-driven applications that support real-time analytics and fraud detection,\nwhile MongoDB, when deployed on Kubernetes, ensures fault tolerance and high\navailability in inventory and transaction systems. Kubernetes itself plays a\ncrucial role in automating deployment and scaling of microservices. These\nfindings provide valuable insights for industry practitioners aiming to design\nscalable infrastructures, identify research opportunities in hybrid deployment\nmodels, and offer educators a foundation to integrate modern system\narchitectures into professional and technical communication training."}
