{"id": "2509.12593", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2509.12593", "abs": "https://arxiv.org/abs/2509.12593", "authors": ["Yimin Zhang", "Mario de Sousa"], "title": "Converting IEC 61131-3 LD into SFC Using Large Language Model: Dataset and Testing", "comment": null, "summary": "In the domain of Programmable Logic Controller (PLC) programming, converting\na Ladder Diagram (LD) into a Sequential Function Chart (SFC) is an inherently\nchallenging problem, primarily due to the lack of domain-specific knowledge and\nthe issue of state explosion in existing algorithms. However, the rapid\ndevelopment of Artificial Intelligence (AI) - especially Large Language Model\n(LLM) - offers a promising new approach.\n  Despite this potential, data-driven approaches in this field have been\nhindered by a lack of suitable datasets. To address this gap, we constructed\nseveral datasets consisting of paired textual representations of SFC and LD\nprograms that conform to the IEC 61131-3 standard.\n  Based on these datasets, we explored the feasibility of automating the LD-SFC\nconversion using LLM. Our preliminary experiments show that a fine-tuned LLM\nmodel achieves up to 91% accuracy on certain dataset, with the lowest observed\naccuracy being 79%, suggesting that with proper training and representation,\nLLMs can effectively support LD-SFC conversion. These early results highlight\nthe viability and future potential of this approach.", "AI": {"tldr": "The paper tackles the challenge of converting Ladder Diagram to Sequential Function Chart in PLC programming using AI, specifically LLMs. After creating relevant datasets, they find that fine-tuned LLMs perform this task with high accuracy, demonstrating the approach's potential.", "motivation": "Converting Ladder Diagram (LD) into Sequential Function Chart (SFC) in PLC programming is challenging due to the lack of domain-specific knowledge and state explosion, while previous algorithms struggle with these issues.", "method": "The authors constructed several paired datasets of LD and SFC programs based on the IEC 61131-3 standard and explored using fine-tuned Large Language Models (LLMs) to automate the conversion process.", "result": "Preliminary experiments showed that a fine-tuned LLM model could achieve up to 91% accuracy for LD-SFC conversion, with a minimum observed accuracy of 79%.", "conclusion": "These results indicate that, with appropriate training and data representation, LLMs can effectively support automated LD-SFC conversion and present a promising future direction for this field."}}
{"id": "2509.13006", "categories": ["cs.PL", "cs.MS", "math.OC", "90C05, 90c06, 90c10", "D.3.4; G.4"], "pdf": "https://arxiv.org/pdf/2509.13006", "abs": "https://arxiv.org/abs/2509.13006", "authors": ["Shermin Khosravi", "David Bremner"], "title": "Efficient Compilation of Algorithms into Compact Linear Programs", "comment": "Preliminary version will appear in CASCON 2025", "summary": "Linear Programming (LP) is widely applied in industry and is a key component\nof various other mathematical problem-solving techniques. Recent work\nintroduced an LP compiler translating polynomial-time, polynomial-space\nalgorithms into polynomial-size LPs using intuitive high-level programming\nlanguages, offering a promising alternative to manually specifying each set of\nconstraints through Algebraic Modeling Languages (AMLs). However, the resulting\nLPs, while polynomial in size, are often extremely large, posing challenges for\nexisting LP solvers. In this paper, we propose a novel approach for generating\nsubstantially smaller LPs from algorithms. Our goal is to establish\nminimum-size compact LP formulations for problems in P having natural\nformulations with exponential extension complexities. Our broader vision is to\nenable the systematic generation of Compact Integer Programming (CIP)\nformulations for problems with exponential-size IPs having polynomial-time\nseparation oracles. To this end, we introduce a hierarchical linear pipelining\ntechnique that decomposes nested program structures into synchronized regions\nwith well-defined execution transitions -- functions of compile-time\nparameters. This decomposition allows us to localize LP constraints and\nvariables within each region, significantly reducing LP size without the loss\nof generality, ensuring the resulting LP remains valid for all inputs of size\n$n$. We demonstrate the effectiveness of our method on two benchmark problems\n-- the makespan problem, which has exponential extension complexity, and the\nweighted minimum spanning tree problem -- both of which have exponential-size\nnatural LPs. Our results show up to a $25$-fold reduction in LP size and\nsubstantial improvements in solver performance across both commercial and\nnon-commercial LP solvers.", "AI": {"tldr": "This paper proposes a new compiler technique that generates much smaller LP formulations from algorithms, using hierarchical pipelining. Tested on benchmark problems, the method yields up to 25 times smaller LPs and faster solver performance, potentially transforming how LP-based models are created and solved.", "motivation": "Existing methods for compiling algorithms into LPs generate formulations that, while polynomial in size, are often far too large for practical LP solvers. There is a need for approaches that produce much more compact LPs to improve solver performance and efficiency.", "method": "The paper introduces a hierarchical linear pipelining technique, which decomposes nested program structures into synchronized regions with well-defined execution transitions. This allows constraints and variables to be localized within each region, effectively lowering overall LP size while maintaining generality and validity for all input sizes.", "result": "The proposed technique was applied to the makespan problem (which is known for its exponential extension complexity) and the weighted minimum spanning tree problem (which also has large natural LPs). The approach achieved up to a 25-fold reduction in LP size and notable improvements in solver performance using both commercial and open-source LP solvers.", "conclusion": "The novel hierarchical pipelining approach enables the systematic generation of substantially smaller and more efficient LP formulations from high-level algorithmic descriptions, making it feasible to solve instances previously intractable due to LP size."}}
{"id": "2509.13019", "categories": ["cs.PL", "cs.LO"], "pdf": "https://arxiv.org/pdf/2509.13019", "abs": "https://arxiv.org/abs/2509.13019", "authors": ["Fr\u00e9d\u00e9ric Fort", "David Nowak", "Vlad Rusu"], "title": "Pleasant Imperative Program Proofs with GallinaC", "comment": "In Proceedings FROM 2025, arXiv:2509.11877", "summary": "Even with the increase of popularity of functional programming, imperative\nprogramming remains a key programming paradigm, especially for programs\noperating at lower levels of abstraction. When such software offers key\ncomponents of a Trusted Computing Base (TCB), e.g. an operating system kernel,\nit becomes desirable to provide mathematical correctness proofs.\n  However, current real-world imperative programming languages possess\n\"expressive\", i.e. overly permissive, semantics. Thus, producing correctness\nproofs of such programs becomes tedious and error-prone, requiring to take care\nof numerous \"administrative\" details. Ideally, a proof-oriented imperative\nlanguage should feature well-behaved semantics while allowing imperative\nidioms.\n  To obtain a high-degree of confidence in the correctness of such a language,\nits tools should be developed inside a proof-assistant such that program proofs\nare machine checked.\n  We present GallinaC, a shallow embedding of a Turing-complete imperative\nlanguage directly inside the functional programming language of the Rocq proof\nassistant, Gallina. In particular, it features a truly generic and unbounded\nwhile loop. Having a functional core means proofs about GallinaC programs may\nuse the same tactics as proofs about pure functional ones.\n  Work on GallinaC is still under progress, but we present first promising\nresults. A prototype implementation has shown the viability of GallinaC with\nthe correctness proof of a list reversal procedure for linked-lists of unknown\nsize. We currently focus on the forward simulation between the GallinaC\nintermediate representation (IR) and Cminor, the entry language of the CompCert\nback-end.", "AI": {"tldr": "GallinaC embeds a Turing-complete imperative language in the Gallina proof assistant, simplifying mathematical correctness proofs for imperative programs. It has shown promising initial results with machine-checked proofs, focusing next on integration with CompCert.", "motivation": "Imperative programming is crucial for low-level trusted components, but mathematically proving correctness in current imperative languages is difficult due to permissive semantics. There is a need for a proof-oriented imperative language with well-behaved semantics that can be machine-checked.", "method": "The authors introduce GallinaC, a shallow embedding of an imperative language within Gallina (the Rocq proof assistant\u2019s functional programming language). It supports Turing-completeness with unbounded loops, allowing use of proof tactics from functional programming for imperative programs.", "result": "A prototype of GallinaC has been implemented, demonstrating its viability by proving the correctness of a list reversal procedure for unbounded linked lists. The current focus is on establishing a forward simulation between GallinaC's IR and Cminor, CompCert\u2019s intermediate language.", "conclusion": "GallinaC provides a promising approach for proof-oriented imperative programming inside a proof assistant, enabling rigorous correctness proofs for low-level software components while retaining imperative idioms."}}
{"id": "2509.13022", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2509.13022", "abs": "https://arxiv.org/abs/2509.13022", "authors": ["Andrei Nacu", "Dorel Lucanu"], "title": "Navigating the Python Type Jungle", "comment": "In Proceedings FROM 2025, arXiv:2509.11877", "summary": "Python's typing system has evolved pragmatically into a powerful but\ntheoretically fragmented system, with scattered specifications. This paper\nproposes a formalization to address this fragmentation. The central\ncontribution is a formal foundation that uses concepts from type theory to\ndemonstrate that Python's type system can be elegantly described. This work\naims to serve as a crucial first step toward the future development of type\ninference tools.", "AI": {"tldr": "The paper addresses fragmentation in Python's typing system by developing a rigorous type-theoretical framework, paving the way for better type inference and more consistent specifications.", "motivation": "Python's typing system, while powerful, suffers from a lack of unified theoretical foundation and fragmented specifications, motivating a need for formalization.", "method": "The paper proposes a formal framework using type theory concepts to systematically describe Python's type system.", "result": "The authors provide a formal foundation demonstrating that Python's type system can be described elegantly and consistently.", "conclusion": "This formalization serves as an essential starting point for designing advanced type inference tools for Python."}}
{"id": "2509.13128", "categories": ["cs.PL", "cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13128", "abs": "https://arxiv.org/abs/2509.13128", "authors": ["Rapha\u00ebl Monat"], "title": "Try-Mopsa: Relational Static Analysis in Your Pocket", "comment": null, "summary": "Static analyzers are complex pieces of software with large dependencies. They\ncan be difficult to install, which hinders adoption and creates barriers for\nstudents learning static analysis. This work introduces Try-Mopsa: a\nscaled-down version of the Mopsa static analysis platform, compiled into\nJavaScript to run purely as a client-side application in web browsers.\nTry-Mopsa provides a responsive interface that works on both desktop and mobile\ndevices. Try-Mopsa features all the core components of Mopsa. In particular, it\nsupports relational numerical domains. We present the interface, changes and\nadaptations required to have a pure JavaScript version of Mopsa. We envision\nTry-Mopsa as a convenient platform for onboarding or teaching purposes.", "AI": {"tldr": "Try-Mopsa is a browser-based, JavaScript implementation of the Mopsa static analysis tool that preserves its core functionality while enabling easy access for users and students, addressing installation and adoption challenges.", "motivation": "Static analyzers are often difficult to install due to their complexity and large dependencies, creating barriers for both adoption and for students learning static analysis.", "method": "Development of Try-Mopsa, a client-side JavaScript version of the Mopsa static analysis platform, requiring modifications and adaptations to support web browsers and maintain core analysis features, including relational numerical domains.", "result": "Try-Mopsa successfully offers the essential features of Mopsa as a responsive web application that works on both desktop and mobile devices, overcoming installation challenges.", "conclusion": "Try-Mopsa serves as a convenient and accessible tool for onboarding and teaching static analysis, lowering barriers to use."}}
{"id": "2509.12395", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.12395", "abs": "https://arxiv.org/abs/2509.12395", "authors": ["Yash Mundhra", "Max Valk", "Maliheh Izadi"], "title": "Evaluating Large Language Models for Functional and Maintainable Code in Industrial Settings: A Case Study at ASML", "comment": "Accepted in the 40th IEEE/ACM International Conference on Automated\n  Software Engineering, ASE 2025 (Industry track)", "summary": "Large language models have shown impressive performance in various domains,\nincluding code generation across diverse open-source domains. However, their\napplicability in proprietary industrial settings, where domain-specific\nconstraints and code interdependencies are prevalent, remains largely\nunexplored. We present a case study conducted in collaboration with the\nleveling department at ASML to investigate the performance of LLMs in\ngenerating functional, maintainable code within a closed, highly specialized\nsoftware environment.\n  We developed an evaluation framework tailored to ASML's proprietary codebase\nand introduced a new benchmark. Additionally, we proposed a new evaluation\nmetric, build@k, to assess whether LLM-generated code successfully compiles and\nintegrates within real industrial repositories. We investigate various\nprompting techniques, compare the performance of generic and code-specific\nLLMs, and examine the impact of model size on code generation capabilities,\nusing both match-based and execution-based metrics. The findings reveal that\nprompting techniques and model size have a significant impact on output\nquality, with few-shot and chain-of-thought prompting yielding the highest\nbuild success rates. The difference in performance between the code-specific\nLLMs and generic LLMs was less pronounced and varied substantially across\ndifferent model families.", "AI": {"tldr": "LLMs can generate maintainable code for proprietary industrial environments if properly prompted, especially with few-shot and chain-of-thought methods; model size matters, while being code-specific provides only minor, context-dependent advantages.", "motivation": "Large language models (LLMs) have demonstrated strong performance on open-source code, but their utility in proprietary industrial environments, where code is more specialized and interdependent, is underexplored. The paper aims to fill this gap by studying LLM code generation within a real-world, highly specialized industrial setting.", "method": "The authors collaborated with the leveling department at ASML to develop a custom evaluation framework and benchmark based on ASML's proprietary codebase. They also proposed a new metric, build@k, to measure if LLM-generated code compiles and integrates in industrial repositories. The study compares various prompting methods, evaluates generic versus code-specific LLMs, and measures the effect of model size using both match-based and execution-based metrics.", "result": "The results show that prompting techniques and model size strongly affect the quality of generated code, with few-shot and chain-of-thought prompting delivering the highest build success rates. Performance differences between code-specific and generic LLMs were relatively minor and varied by model family.", "conclusion": "Prompting strategies and model size are key factors in successful code generation for highly specialized industrial repositories, while the advantage of code-specific LLMs over generic LLMs is context-dependent and not universally substantial."}}
{"id": "2509.13261", "categories": ["cs.PL", "D.3.4"], "pdf": "https://arxiv.org/pdf/2509.13261", "abs": "https://arxiv.org/abs/2509.13261", "authors": ["No\u00e9 De Santo", "Stephanie Weirich"], "title": "Rebound: Efficient, Expressive, and Well-Scoped Binding", "comment": "15 pages, 5 figures, 3 tables. To be published in Proceedings of the\n  18th ACM SIGPLAN International Haskell Symposium (Haskell 2025)", "summary": "We introduce the Rebound library that supports well-scoped term\nrepresentations in Haskell and automates the definition of substitution,\nalpha-equivalence, and other operations that work with binding structures. The\nkey idea of our design is the use of first-class environments that map\nvariables to expressions in some new scope. By statically tracking scopes,\nusers of this library gain confidence that they have correctly maintained the\nsubtle invariants that stem from using de Bruijn indices. Behind the scenes,\nRebound uses environments to optimize the application of substitutions, while\nproviding explicit access to these data structures when desired. We demonstrate\nthat this library is expressive by using it to implement a wide range of\nlanguage features with sophisticated uses of binding and several different\noperations that use this abstract syntax. Our examples include pi-forall, a\ntutorial implementation of a type checker for a dependently-typed programming\nlanguage. Finally, we benchmark Rebound to understand its performance\ncharacteristics and find that it produces faster code than competing libraries.", "AI": {"tldr": "Rebound is a Haskell library that makes working with complex term bindings safer, easier, and faster by automating substitution and related operations, outperforming competing libraries in benchmarks.", "motivation": "There is a need for safer and more automated handling of term representations and binding structures in Haskell, especially to reduce errors associated with de Bruijn indices and tedious manual implementations of substitution and alpha-equivalence.", "method": "The Rebound library is introduced, utilizing first-class environments to statically track variable scopes. This approach automates substitution, alpha-equivalence, and related operations, and optimizes substitution applications. The library is demonstrated through the implementation of various language features and is benchmarked against other libraries.", "result": "Rebound is expressive enough to implement sophisticated language features and abstract syntax operations, including a dependently-typed programming language type checker. Benchmarks show that Rebound outperforms competing libraries in terms of code speed.", "conclusion": "Rebound successfully automates and optimizes handling of binding structures in Haskell, provides type safety for scope management, and delivers better performance than existing solutions while remaining expressive for implementing advanced language features."}}
{"id": "2509.12421", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.12421", "abs": "https://arxiv.org/abs/2509.12421", "authors": ["Hao Li", "Hicham Masri", "Filipe R. Cogo", "Abdul Ali Bangash", "Bram Adams", "Ahmed E. Hassan"], "title": "Understanding Prompt Management in GitHub Repositories: A Call for Best Practices", "comment": null, "summary": "The rapid adoption of foundation models (e.g., large language models) has\ngiven rise to promptware, i.e., software built using natural language prompts.\nEffective management of prompts, such as organization and quality assurance, is\nessential yet challenging. In this study, we perform an empirical analysis of\n24,800 open-source prompts from 92 GitHub repositories to investigate prompt\nmanagement practices and quality attributes. Our findings reveal critical\nchallenges such as considerable inconsistencies in prompt formatting,\nsubstantial internal and external prompt duplication, and frequent readability\nand spelling issues. Based on these findings, we provide actionable\nrecommendations for developers to enhance the usability and maintainability of\nopen-source prompts within the rapidly evolving promptware ecosystem.", "AI": {"tldr": "This paper empirically analyzes nearly 25,000 open-source prompts and finds major issues with formatting, duplication, and readability. It offers practical guidance to help developers manage and improve prompt quality in the evolving promptware ecosystem.", "motivation": "With the rapid growth of foundation models and widespread use of promptware, there is an urgent need to improve prompt management practices and assure prompt quality, which are still largely unexplored and problematic in real-world usage.", "method": "The authors conducted an empirical analysis on 24,800 prompts collected from 92 open-source GitHub repositories to investigate current practices and quality issues.", "result": "The study identified key issues: inconsistent prompt formatting, significant duplication (both within and across projects), and frequent readability/spelling problems. Recommendations were formulated for developers to mitigate these challenges.", "conclusion": "The paper concludes that there are substantial management and quality challenges in open-source promptware. Addressing these issues is vital for the field's progress, and their recommendations can help developers improve prompt usability and maintainability."}}
{"id": "2509.12443", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.12443", "abs": "https://arxiv.org/abs/2509.12443", "authors": ["Sparsh Gupta", "Kamalavasan Kamalakkannan", "Maxim Moraru", "Galen Shipman", "Patrick Diehl"], "title": "From Legacy Fortran to Portable Kokkos:An Autonomous Agentic AI Workflow", "comment": null, "summary": "Scientific applications continue to rely on legacy Fortran codebases\noriginally developed for homogeneous, CPU-based systems. As High-Performance\nComputing (HPC) shifts toward heterogeneous GPU-accelerated architectures, many\naccelerators lack native Fortran bindings, creating an urgent need to modernize\nlegacy codes for portability. Frameworks like Kokkos provide performance\nportability and a single-source C++ abstraction, but manual Fortran-to-Kokkos\nporting demands significant expertise and time. Large language models (LLMs)\nhave shown promise in source-to-source code generation, yet their use in fully\nautonomous workflows for translating and optimizing parallel code remains\nlargely unexplored, especially for performance portability across diverse\nhardware.\n  This paper presents an agentic AI workflow where specialized LLM \"agents\"\ncollaborate to translate, validate, compile, run, test, debug, and optimize\nFortran kernels into portable Kokkos C++ programs. Results show the pipeline\nmodernizes a range of benchmark kernels, producing performance-portable Kokkos\ncodes across hardware partitions. Paid OpenAI models such as GPT-5 and\no4-mini-high executed the workflow for only a few U.S. dollars, generating\noptimized codes that surpassed Fortran baselines, whereas open-source models\nlike Llama4-Maverick often failed to yield functional codes.\n  This work demonstrates the feasibility of agentic AI for Fortran-to-Kokkos\ntransformation and offers a pathway for autonomously modernizing legacy\nscientific applications to run portably and efficiently on diverse\nsupercomputers. It further highlights the potential of LLM-driven agentic\nsystems to perform structured, domain-specific reasoning tasks in scientific\nand systems-oriented applications.", "AI": {"tldr": "The paper introduces an AI-driven workflow that translates and optimizes legacy Fortran code into portable Kokkos C++ using LLM agents, showing cost-effective, autonomous modernization for high-performance computing across diverse hardware. Paid LLMs succeeded where open-source ones often failed, highlighting AI's potential in scientific software transformation.", "motivation": "Many scientific applications depend on legacy Fortran code designed for older, CPU-only systems. As HPC moves towards GPU-accelerated, heterogeneous platforms, there is a pressing need to make these Fortran codes portable. Existing frameworks like Kokkos provide modernization paths but require complex, manual porting. Leveraging LLMs for fully autonomous code translation and optimization in this context is not yet well-studied.", "method": "The paper proposes an agentic AI workflow using specialized LLM 'agents.' These agents collectively handle the full pipeline: translating Fortran code to Kokkos C++, validating, compiling, running, testing, debugging, and optimizing the code for performance portability.", "result": "The workflow successfully modernized a variety of Fortran benchmark kernels, generating Kokkos C++ programs that run efficiently on various hardware. Paid models (like GPT-5) performed well, creating optimized code that often outperformed the original Fortran. In contrast, open-source models frequently failed to generate functional code.", "conclusion": "Agentic AI using LLMs can feasibly automate Fortran-to-Kokkos code transformation, making legacy scientific applications portable and efficient on modern supercomputers. The study establishes agentic LLM systems as promising tools for domain-specific, structured reasoning in HPC software modernization."}}
{"id": "2509.12466", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.12466", "abs": "https://arxiv.org/abs/2509.12466", "authors": ["Satwik Ghanta", "Peggy Gregory", "Gul Calikli"], "title": "Perspectives, Needs and Challenges for Sustainable Software Engineering Teams: A FinServ Case Study", "comment": null, "summary": "Sustainable Software Engineering (SSE) is slowly becoming an industry need\nfor reasons including reputation enhancement, improved profits and more\nefficient practices. However, SSE has many definitions, and this is a challenge\nfor organisations trying to build a common and broadly agreed understanding of\nthe term. Although much research effort has gone into identifying general SSE\npractices, there is a gap in understanding the sustainability needs of specific\norganisational contexts, such as financial services, which are highly\ndata-driven, operate under strict regulatory requirements, and handle millions\nof transactions day to day. To address this gap, our research focuses on a\nfinancial services company (FinServCo) that invited us to investigate\nperceptions of sustainability in their IT function: how it could be put into\npractice, who is responsible for it, and what the challenges are. We conducted\nan exploratory qualitative case study using interviews and a focus group with\nsix higher management employees and 16 software engineers comprising various\nexperience levels from junior developers to team leaders. Our study found a\nclear divergence in how sustainability is perceived between organisational\nlevels. Higher management emphasised technical and economic sustainability,\nfocusing on cloud migration and business continuity through data availability.\nIn contrast, developers highlighted human-centric concerns such as workload\nmanagement and stress reduction. Scepticism toward organisational initiatives\nwas also evident, with some developers viewing them as a PR strategy. Many\nparticipants expressed a preference for a dedicated sustainability team,\ndrawing analogies to internal structures for security governance. The\ndisconnect between organisational goals and individual developer needs\nhighlights the importance of context-sensitive, co-designed interventions.", "AI": {"tldr": "This paper explores how employees in a financial services firm perceive and practice Sustainable Software Engineering (SSE). There is a disconnect: management is focused on technical and economic aspects, while developers care more about workload and well-being. A one-size-fits-all approach does not work; interventions must be tailored to both organizational and human needs.", "motivation": "Organizations are increasingly recognizing the importance of Sustainable Software Engineering (SSE) due to its benefits such as improved reputation, profits, and efficiency. However, the term SSE is ambiguously defined, making it difficult for organizations\u2014especially those in specific sectors like financial services\u2014to agree on what sustainability means in practice for their context.", "method": "The study used an exploratory qualitative case study approach, including interviews and a focus group with six higher management employees and 16 software engineers at a financial services company (FinServCo). Participants ranged from junior developers to team leaders.", "result": "The study discovered significant differences in how sustainability is perceived across organizational levels. Higher management emphasized technical and economic sustainability, such as cloud migration and ensuring data availability for business continuity. Developers, on the other hand, focused on human-centric issues like workload management and reducing stress. There was notable skepticism about the authenticity of organizational sustainability initiatives. Many participants suggested a dedicated sustainability team, similar to security governance structures. The findings indicate a disconnect between organizational objectives and developers' day-to-day needs.", "conclusion": "SSE in the financial services context requires context-sensitive and co-designed interventions, as there is a clear gap in how sustainability is perceived and prioritized between management and developers. To be truly effective, sustainability strategies must address both organizational goals and the real needs of employees."}}
{"id": "2509.12491", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.12491", "abs": "https://arxiv.org/abs/2509.12491", "authors": ["Veronica Pimenova", "Sarah Fakhoury", "Christian Bird", "Margaret-Anne Storey", "Madeline Endres"], "title": "Good Vibrations? A Qualitative Study of Co-Creation, Communication, Flow, and Trust in Vibe Coding", "comment": "19 pages, 2 figures", "summary": "Vibe coding, a term coined by Andrej Karpathy in February 2025, has quickly\nbecome a compelling and controversial natural language programming paradigm in\nAI-assisted software development. Centered on iterative co-design with an AI\nassistant, vibe coding emphasizes flow and experimentation over strict upfront\nspecification. While initial studies have begun to explore this paradigm, most\nfocus on analyzing code artifacts or proposing theories with limited empirical\nbacking. There remains a need for a grounded understanding of vibe coding as it\nis perceived and experienced by developers. We present the first systematic\nqualitative investigation of vibe coding perceptions and practice. Drawing on\nover 190,000 words from semi-structured interviews, Reddit threads, and\nLinkedIn posts, we characterize what vibe coding is, why and how developers use\nit, where it breaks down, and which emerging practices aim to support it. We\npropose a qualitatively grounded theory of vibe coding centered on\nconversational interaction with AI, co-creation, and developer flow and joy. We\nfind that AI trust regulates movement along a continuum from delegation to\nco-creation and supports the developer experience by sustaining flow. We\nsurface recurring pain points and risks in areas including specification,\nreliability, debugging, latency, code review burden, and collaboration. We also\npresent best practices that have been discovered and shared to mitigate these\nchallenges. We conclude with implications for the future of AI dev tools and\ndirections for researchers investigating vibe coding.", "AI": {"tldr": "This paper presents the first in-depth qualitative study of vibe coding, a conversational and experimental programming approach with AI. Using interviews and online discussions, the authors characterize why, how, and where vibe coding works or fails, highlighting trust as a central factor regulating developer experience. They identify practical pain points and provide emerging best practices, laying groundwork for next-gen AI dev tools and future research.", "motivation": "Vibe coding is a new, fast-growing paradigm in AI-assisted software development. Despite its popularity, there is limited empirical understanding of how real developers perceive and use it, with most studies focusing on theoretical or artifact-based analysis.", "method": "The authors conduct a systematic qualitative investigation using over 190,000 words of data from semi-structured interviews, Reddit threads, and LinkedIn posts. They analyze developer perceptions and practices related to vibe coding.", "result": "The study provides a grounded theory of vibe coding centered on flows of conversational interaction with AI, co-creation, and developer enjoyment. It identifies that trust in AI governs the developer\u2019s movement between delegating tasks and co-creation, impacting their workflow. The paper also uncovers pain points\u2014such as issues with specification, reliability, debugging, latency, code review, and collaboration\u2014and outlines emerging best practices to address these problems.", "conclusion": "Vibe coding relies on conversational, iterative co-design with AI, offering benefits in flow and experimentation but facing practical challenges in reliability and collaboration. The paper sets a foundation for future improvement in AI dev tools and further research directions."}}
{"id": "2509.12629", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.12629", "abs": "https://arxiv.org/abs/2509.12629", "authors": ["Zhihong Sun", "Jia Li", "Yao Wan", "Chuanyi Li", "Hongyu Zhang", "Zhi jin", "Ge Li", "Hong Liu", "Chen Lyu", "Songlin Hu"], "title": "Ensembling Large Language Models for Code Vulnerability Detection: An Empirical Evaluation", "comment": "24 pages", "summary": "Code vulnerability detection is crucial for ensuring the security and\nreliability of modern software systems. Recently, Large Language Models (LLMs)\nhave shown promising capabilities in this domain. However, notable\ndiscrepancies in detection results often arise when analyzing identical code\nsegments across different training stages of the same model or among\narchitecturally distinct LLMs. While such inconsistencies may compromise\ndetection stability, they also highlight a key opportunity: the latent\ncomplementarity among models can be harnessed through ensemble learning to\ncreate more robust vulnerability detection systems. In this study, we explore\nthe potential of ensemble learning to enhance the performance of LLMs in source\ncode vulnerability detection. We conduct comprehensive experiments involving\nfive LLMs (i.e., DeepSeek-Coder-6.7B, CodeLlama-7B, CodeLlama-13B,\nCodeQwen1.5-7B, and StarCoder2-15B), using three ensemble strategies (i.e.,\nBagging, Boosting, and Stacking). These experiments are carried out across\nthree widely adopted datasets (i.e., Devign, ReVeal, and BigVul). Inspired by\nMixture of Experts (MoE) techniques, we further propose Dynamic Gated Stacking\n(DGS), a Stacking variant tailored for vulnerability detection. Our results\ndemonstrate that ensemble approaches can significantly improve detection\nperformance, with Boosting excelling in scenarios involving imbalanced\ndatasets. Moreover, DGS consistently outperforms traditional Stacking,\nparticularly in handling class imbalance and multi-class classification tasks.\nThese findings offer valuable insights into building more reliable and\neffective LLM-based vulnerability detection systems through ensemble learning.", "AI": {"tldr": "Ensemble techniques, especially the proposed Dynamic Gated Stacking, can notably enhance the reliability and accuracy of code vulnerability detection by combining strengths of multiple LLMs and addressing class imbalance issues.", "motivation": "Modern software's security relies heavily on accurate code vulnerability detection. Despite progress with Large Language Models (LLMs), their results can be inconsistent across versions and architectures. This instability urges a search for methods to make vulnerability detection more robust.", "method": "The authors conduct extensive experiments with five LLMs (DeepSeek-Coder-6.7B, CodeLlama-7B, CodeLlama-13B, CodeQwen1.5-7B, StarCoder2-15B) on three datasets (Devign, ReVeal, BigVul), applying three ensemble strategies\u2014Bagging, Boosting, and Stacking. They further propose Dynamic Gated Stacking (DGS), a specialized stacking technique inspired by Mixture of Experts (MoE), to better tackle vulnerability detection.", "result": "Ensemble learning methods significantly enhance code vulnerability detection performance across LLMs. Boosting is especially effective on imbalanced datasets, while the proposed DGS method consistently outperforms standard Stacking, notably improving results on class imbalance and multi-class tasks.", "conclusion": "Leveraging model complementarity via ensemble learning, especially using advanced methods like DGS, can make LLM-based vulnerability detection both more robust and effective. This approach helps mitigate detection inconsistencies and offers a promising direction for future security systems."}}
{"id": "2509.12795", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.12795", "abs": "https://arxiv.org/abs/2509.12795", "authors": ["Yihua Chen", "Xingle Que", "Jiashuo Zhang", "Ting Chen", "Guangshun Li", "Jiachi Chen"], "title": "When Large Language Models Meet UAVs: How Far Are We?", "comment": null, "summary": "The integration of unmanned aerial vehicles (UAVs) and large language models\n(LLMs) has emerged as a research direction of growing interest, with the\npotential to address challenges in autonomous decision-making, human-UAV\ninteraction, and real-time adaptability. However, existing studies have\nremained largely in preliminary exploration with a limited understanding of\nreal-world practice, risking a misalignment between academic research and\npractical needs and hindering the translation of results. To examine and\naddress these potential challenges, we conducted an empirical study of 74\nselected papers and 56 public GitHub projects, identified nine task types for\nLLMs in UAV systems, and quantified their distribution. Our findings show that\nacademic research emphasizes theoretical modeling and task optimization with\ndispersed attention across tasks. In contrast, industrial projects focus on\nflight control, task planning, and human-machine interaction, prioritizing\noperability and efficiency. To further capture industry perspectives, we\ndistributed an online questionnaire. We obtained 52 valid responses: 40.4% of\npractitioners have attempted to apply LLMs to UAV tasks. We further identify\nfactors that impede real-world integration, including technological maturity,\nperformance, safety, cost, and other considerations. Finally, we highlight\nchallenges for future development and provide recommendations.", "AI": {"tldr": "This paper reviews academic and industry work on combining drones (UAVs) and large language models (LLMs), finding a gap between theory-heavy research and practical industrial needs. Survey results highlight barriers and suggest ways to bridge the divide for better real-world use.", "motivation": "The motivation is to explore the emerging integration of UAVs (drones) with large language models (LLMs), address the gap between academic research and industry practice, and understand barriers to real-world application.", "method": "The authors conducted an empirical review of 74 research papers and 56 public GitHub projects related to LLMs in UAV systems, categorized task types, compared academic and industrial emphases, and distributed an online survey to industry practitioners.", "result": "Academic research is more focused on theoretical modeling and diverse tasks, while industry projects emphasize practical operations such as flight control and human-machine interaction. 40.4% of surveyed practitioners have tried applying LLMs to UAVs, with several real-world barriers identified: technological maturity, performance, safety, and cost.", "conclusion": "There is a misalignment between academic pursuits and industry needs, hindering effective LLM integration in UAVs. Key challenges and recommendations are outlined to enhance real-world adoption and future development."}}
{"id": "2509.12798", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.12798", "abs": "https://arxiv.org/abs/2509.12798", "authors": ["Nenad Petrovic", "Lukasz Mazur", "Alois Knoll"], "title": "LLM-Based Approach for Enhancing Maintainability of Automotive Architectures", "comment": null, "summary": "There are many bottlenecks that decrease the flexibility of automotive\nsystems, making their long-term maintenance, as well as updates and extensions\nin later lifecycle phases increasingly difficult, mainly due to long\nre-engineering, standardization, and compliance procedures, as well as\nheterogeneity and numerosity of devices and underlying software components\ninvolved. In this paper, we explore the potential of Large Language Models\n(LLMs) when it comes to the automation of tasks and processes that aim to\nincrease the flexibility of automotive systems. Three case studies towards\nachieving this goal are considered as outcomes of early-stage research: 1)\nupdates, hardware abstraction, and compliance, 2) interface compatibility\nchecking, and 3) architecture modification suggestions. For proof-of-concept\nimplementation, we rely on OpenAI's GPT-4o model.", "AI": {"tldr": "Automotive systems are hindered by maintenance and update complexities, but using LLMs like GPT-4o for automation shows early potential in easing these bottlenecks through tasks such as compliance, interface checking, and architecture suggestions.", "motivation": "Automotive systems face significant flexibility challenges due to complex maintenance, updates, standardization, and heterogeneous components, leading to long and difficult procedures throughout their lifecycle.", "method": "The paper investigates the use of Large Language Models (LLMs), specifically OpenAI's GPT-4o, to automate processes that could improve automotive system flexibility. This is explored through three case studies: updates and compliance, interface compatibility checking, and architecture modification suggestions.", "result": "Early-stage research demonstrates proof-of-concept implementations using GPT-4o across the three case studies, indicating the potential of LLMs in automating complex tasks within automotive system workflows.", "conclusion": "LLMs show promise for increasing the flexibility of automotive systems by supporting automation in several key areas, although the research is preliminary and further validation is needed."}}
{"id": "2509.12809", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.12809", "abs": "https://arxiv.org/abs/2509.12809", "authors": ["Jinfeng Wen", "Jianshu Zhao", "Zixi Zhu", "Xiaomin Zhang", "Qi Liang", "Ao Zhou", "Shangguang Wang"], "title": "SateLight: A Satellite Application Update Framework for Satellite Computing", "comment": "This paper has been accepted for publication in ASE 2025!", "summary": "Satellite computing is an emerging paradigm that empowers satellites to\nperform onboard processing tasks (i.e., \\textit{satellite applications}),\nthereby reducing reliance on ground-based systems and improving responsiveness.\nHowever, enabling application software updates in this context remains a\nfundamental challenge due to application heterogeneity, limited\nground-to-satellite bandwidth, and harsh space conditions. Existing software\nupdate approaches, designed primarily for terrestrial systems, fail to address\nthese constraints, as they assume abundant computational capacity and stable\nconnectivity.\n  To address this gap, we propose SateLight, a practical and effective\nsatellite application update framework tailored for satellite computing.\nSateLight leverages containerization to encapsulate heterogeneous applications,\nenabling efficient deployment and maintenance. SateLight further integrates\nthree capabilities: (1) a content-aware differential strategy that minimizes\ncommunication data volume, (2) a fine-grained onboard update design that\nreconstructs target applications, and (3) a layer-based fault-tolerant recovery\nmechanism to ensure reliability under failure-prone space conditions.\nExperimental results on a satellite simulation environment with 10\nrepresentative satellite applications demonstrate that SateLight reduces\ntransmission latency by up to 91.18% (average 56.54%) compared to the best\ncurrently available baseline. It also consistently ensures 100% update\ncorrectness across all evaluated applications. Furthermore, a case study on a\nreal-world in-orbit satellite demonstrates the practicality of our approach.", "AI": {"tldr": "SateLight enables efficient and reliable satellite application updates using containerization, differential data reduction, and fault tolerance, significantly cutting transmission latency and ensuring update correctness, validated by both simulation and real-world application.", "motivation": "Satellite computing enables onboard data processing, which reduces dependency on ground systems and enhances responsiveness. However, efficiently updating application software on satellites is challenging due to heterogeneous applications, limited bandwidth, and harsh space environments. Existing terrestrial update solutions cannot meet these constraints.", "method": "SateLight is introduced as a novel application update framework for satellites. It uses containerization for managing diverse applications, a content-aware differential update strategy to reduce data transmission, a fine-grained onboard update mechanism for reconstructing applications, and a layer-based fault-tolerance system for reliable recovery.", "result": "Experimental validation shows that SateLight cuts transmission latency by up to 91.18% (average 56.54%) versus current baselines and achieves 100% update correctness for all tested applications. Its practicality is further confirmed via a real-world in-orbit satellite case study.", "conclusion": "SateLight effectively enables efficient, reliable, and practical software updates for satellite computing environments, outperforming existing terrestrial solutions and addressing space-specific constraints."}}
{"id": "2509.12973", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.12973", "abs": "https://arxiv.org/abs/2509.12973", "authors": ["Aamer Aljagthami", "Mohammed Banabila", "Musab Alshehri", "Mohammed Kabini", "Mohammad D. Alahmadi"], "title": "Evaluating Large Language Models for Code Translation: Effects of Prompt Language and Prompt Design", "comment": null, "summary": "Large language models (LLMs) have shown promise for automated source-code\ntranslation, a capability critical to software migration, maintenance, and\ninteroperability. Yet comparative evidence on how model choice, prompt design,\nand prompt language shape translation quality across multiple programming\nlanguages remains limited. This study conducts a systematic empirical\nassessment of state-of-the-art LLMs for code translation among C++, Java,\nPython, and C#, alongside a traditional baseline (TransCoder). Using BLEU and\nCodeBLEU, we quantify syntactic fidelity and structural correctness under two\nprompt styles (concise instruction and detailed specification) and two prompt\nlanguages (English and Arabic), with direction-aware evaluation across language\npairs. Experiments show that detailed prompts deliver consistent gains across\nmodels and translation directions, and English prompts outperform Arabic by\n13-15%. The top-performing model attains the highest CodeBLEU on challenging\npairs such as Java to C# and Python to C++. Our evaluation shows that each LLM\noutperforms TransCoder across the benchmark. These results demonstrate the\nvalue of careful prompt engineering and prompt language choice, and provide\npractical guidance for software modernization and cross-language\ninteroperability.", "AI": {"tldr": "The study systematically compares LLMs and prompt styles for code translation between C++, Java, Python, and C#. Detailed, English prompts yield better results, and all LLMs tested outperform the traditional TransCoder baseline.", "motivation": "LLMs have potential for automating source-code translation, which is essential for software migration and maintenance. However, there is a lack of comparative evidence on how different models, prompt styles, and languages affect code translation quality across various programming languages.", "method": "A systematic empirical evaluation was conducted using multiple LLMs and the TransCoder baseline for code translation among C++, Java, Python, and C#. Performance was measured with BLEU and CodeBLEU metrics under two prompt styles and two prompt languages (English and Arabic), considering translation direction across language pairs.", "result": "Detailed prompts consistently improve code translation performance across all models and language pairs. English prompts lead to better results than Arabic prompts (13-15% higher performance). The best LLM surpasses traditional baselines like TransCoder, especially on challenging translation pairs.", "conclusion": "Prompt engineering and language selection significantly influence automated code translation quality. Detailed and English prompts are preferable. State-of-the-art LLMs offer superior performance over traditional methods, aiding software modernization and interoperability."}}
{"id": "2509.13023", "categories": ["cs.SE", "cs.AI", "I.2.2;D.2.5;D.2.4;D.4.6"], "pdf": "https://arxiv.org/pdf/2509.13023", "abs": "https://arxiv.org/abs/2509.13023", "authors": ["\u015etefan-Claudiu Susan", "Andrei Arusoaie", "Dorel Lucanu"], "title": "Validating Solidity Code Defects using Symbolic and Concrete Execution powered by Large Language Models", "comment": "In Proceedings FROM 2025, arXiv:2509.11877", "summary": "The high rate of false alarms from static analysis tools and Large Language\nModels (LLMs) complicates vulnerability detection in Solidity Smart Contracts,\ndemanding methods that can formally or empirically prove the presence of\ndefects. This paper introduces a novel detection pipeline that integrates\ncustom Slither-based detectors, LLMs, Kontrol, and Forge. Our approach is\ndesigned to reliably detect defects and generate proofs. We currently perform\nexperiments with promising results for seven types of critical defects. We\ndemonstrate the pipeline's efficacy by presenting our findings for three\nvulnerabilities -- Reentrancy, Complex Fallback, and Faulty Access Control\nPolicies -- that are challenging for current verification solutions, which\noften generate false alarms or fail to detect them entirely. We highlight the\npotential of either symbolic or concrete execution in correctly classifying\nsuch code faults. By chaining these instruments, our method effectively\nvalidates true positives, significantly reducing the manual verification\nburden. Although we identify potential limitations, such as the inconsistency\nand the cost of LLMs, our findings establish a robust framework for combining\nheuristic analysis with formal verification to achieve more reliable and\nautomated smart contract auditing.", "AI": {"tldr": "The paper presents a smart contract vulnerability detection pipeline that uses both heuristic and formal methods, reducing false alarms and manual checking. Experiments show strong results for tough vulnerabilities, making smart contract auditing more reliable and less labor-intensive.", "motivation": "High false alarm rates in static analysis tools and LLMs make it difficult to reliably detect vulnerabilities in Solidity Smart Contracts, creating a need for methods that can rigorously prove the presence of defects.", "method": "The paper proposes a detection pipeline that integrates custom Slither-based detectors, Large Language Models, Kontrol, and Forge, using both symbolic and concrete execution to validate vulnerabilities and generate proofs.", "result": "Experiments were conducted on seven types of critical defects, with detailed findings for three challenging vulnerabilities: Reentrancy, Complex Fallback, and Faulty Access Control Policies. The method was shown to reduce manual verification effort and improve detection accuracy.", "conclusion": "Combining heuristic analysis (LLMs, detectors) with formal verification (Kontrol, Forge) creates a robust, automated framework for smart contract auditing. Despite limitations with LLMs (cost, inconsistency), the approach significantly advances reliable vulnerability detection by reducing false alarms and manual effort."}}
{"id": "2509.13025", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.13025", "abs": "https://arxiv.org/abs/2509.13025", "authors": ["Raul Zaharia", "Drago\u015f Gavrilu\u0163", "Gheorghi\u0163\u0103 Mutu"], "title": "GView: A Survey of Binary Forensics via Visual, Semantic, and AI-Enhanced Analysis", "comment": "In Proceedings FROM 2025, arXiv:2509.11877", "summary": "Cybersecurity threats continue to become more sophisticated and diverse in\ntheir artifacts, boosting both their volume and complexity. To overcome those\nchallenges, we present GView, an open-source forensic analysis framework with\nvisual and AI-enhanced reasoning. It started with focus on the practical\ncybersecurity industry. It has evolved significantly, incorporating large\nlanguage models (LLMs) to dynamically enhance reasoning and ease the forensic\nworkflows. This paper surveys both the current state of GView with its\npublished papers alongside those that are in the publishing process. It also\nincludes its innovative use of logical inference through predicates and\ninference rules for both the analyzed documents and the user's actions for\nbetter suggestions. We highlight the extensible architecture, showcasing its\npotential as a bridge between the practical forensics worlds with the academic\nresearch.", "AI": {"tldr": "GView is an open-source forensic framework that uses AI and visual tools to improve cybersecurity analysis. It incorporates large language models and logical inference, offering an extensible platform that connects industry needs with academic research advancements.", "motivation": "Cybersecurity threats are becoming increasingly complex and difficult to analyze due to their sophisticated and diverse nature. There is a need for advanced tools that enhance forensic analysis to keep up with these evolving threats.", "method": "GView, an open-source forensic analysis framework, has been developed with AI and visual reasoning capabilities. It leverages large language models (LLMs) to improve dynamic reasoning and streamline forensic workflows. The framework also incorporates logical inference through predicates and inference rules, both on documents and user actions.", "result": "GView has evolved into a sophisticated and extensible platform that enhances forensic investigations by blending practical industry requirements with academic research innovations. Its architecture allows for the integration of AI and logical inference, improving suggestions and analysis capabilities.", "conclusion": "GView demonstrates significant potential as a tool that bridges the gap between practical cybersecurity forensics and academic research, owing to its extensible, AI-powered, and inference-based approach."}}
{"id": "2509.13055", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13055", "abs": "https://arxiv.org/abs/2509.13055", "authors": ["Youngkyoung Kim", "Sanghyeok Park", "Misoo Kim", "Gangho Yoon", "Eunseok Lee", "Simon S. Woo"], "title": "Automating Code Generation for Semiconductor Equipment Control from Developer Utterances with LLMs", "comment": null, "summary": "Semiconductors form the backbone of modern electronics, with their\nmanufacturing and testing relying on highly specialized equipment and\ndomain-specific programming languages. Equipment languages such as the\nAlgorithmic Pattern Generator (ALPG) are critical for precise hardware control\nbut are challenging to program due to their low-level syntax and steep learning\ncurve. While large language models (LLMs) have shown promise in generating\nhigh-level code from natural language, their effectiveness on low-level\nequipment languages remains limited. To address this, we propose Progressive\nKnowledge Enhancement (PKE), a novel multi-stage prompting framework that\nprogressively extracts and activates the latent knowledge within LLMs, guiding\nthem from simple to complex examples without extensive fine-tuning. Empirical\nevaluation on an industrial ALPG dataset shows that PKE significantly\noutperforms standard prompting and surpasses state-of-the-art methods in\ngenerating correct ALPG code, achieving 11.1\\% and 15.2\\% higher exact match\nscores compared to the second-best technique. Further analysis of individual\ncomponents confirms that progressive knowledge extraction based on difficulty\nenhances accuracy. Our study offer a practical approach to boosting LLM\ncapabilities for specialized low-level programming, supporting greater\nproductivity in semiconductor software development.", "AI": {"tldr": "The paper proposes a novel prompting framework (PKE) that improves large language models' ability to generate challenging low-level semiconductor code, outperforming other methods and offering a promising approach to boost productivity in the field.", "motivation": "Programming low-level equipment languages like ALPG for semiconductors is challenging due to their complexity and steep learning curve. Conventional large language models (LLMs) struggle with generating such code, necessitating new methods to harness LLMs for these specialized tasks.", "method": "The paper introduces Progressive Knowledge Enhancement (PKE), a multi-stage prompting framework that guides LLMs to gradually extract and utilize their latent knowledge, starting from simple and advancing to complex examples, without requiring extensive model fine-tuning.", "result": "Empirical evaluations on an industrial ALPG dataset show that PKE achieves 11.1% and 15.2% higher exact match scores than the second-best technique. The study also verifies that progressive knowledge extraction based on difficulty improves generation accuracy.", "conclusion": "Progressive Knowledge Enhancement (PKE) significantly enhances LLMs' ability to generate low-level equipment code, outperforming existing methods and offering a practical solution for semiconductor software development, thus increasing productivity in this domain."}}
{"id": "2509.13103", "categories": ["cs.SE", "D.2"], "pdf": "https://arxiv.org/pdf/2509.13103", "abs": "https://arxiv.org/abs/2509.13103", "authors": ["Santiago Matalonga", "Domenico Amalfitano", "Jean Carlo Rossa Hauck", "Mart\u00edn Solari", "Guilherme H. Travassos"], "title": "Accelerating Discovery: Rapid Literature Screening with LLMs", "comment": "This version of the manuscript has been submitted to Empirical\n  Software Engieering Journal for consideration", "summary": "Background: Conducting Multi Vocal Literature Reviews (MVLRs) is often time\nand effort-intensive. Researchers must review and filter a large number of\nunstructured sources, which frequently contain sparse information and are\nunlikely to be included in the final study. Our experience conducting an MVLR\non Context-Aware Software Systems (CASS) Testing in the avionics domain\nexemplified this challenge, with over 8,000 highly heterogeneous documents\nrequiring review. Therefore, we developed a Large Language Model (LLM)\nassistant to support the search and filtering of documents. Aims: To develop\nand validate an LLM based tool that can support researchers in performing the\nsearch and filtering of documents for an MVLR without compromising the rigor of\nthe research protocol. Method: We applied sound engineering practices to\ndevelop an on-premises LLM-based tool incorporating Retrieval Augmented\nGeneration (RAG) to process candidate sources. Progress towards the aim was\nquantified using the Positive Percent Agreement (PPA) as the primary metric to\nensure the performance of the LLM based tool. Convenience sampling, supported\nby human judgment and statistical sampling, were used to verify and validate\nthe tool's quality-in-use. Results: The tool currently demonstrates a PPA\nagreement with human researchers of 90% for sources that are not relevant to\nthe study. Development details are shared to support domain-specific adaptation\nof the tool. Conclusions: Using LLM-based tools to support academic researchers\nin rigorous MVLR is feasible. These tools can free valuable time for\nhigher-level, abstract tasks. However, researcher participation remains\nessential to ensure that the tool supports thorough research.", "AI": {"tldr": "The paper presents an LLM-based tool to assist in MVLRs, showing that it can match human researchers in filtering irrelevant literature with 90% accuracy, thus saving time while maintaining research quality, though researcher oversight is still important.", "motivation": "Conducting Multi Vocal Literature Reviews (MVLRs) is highly time-consuming and labor-intensive due to the need to manually review and filter thousands of unstructured sources, many of which are irrelevant. The challenge is magnified in domains like avionics, as seen in their study on Context-Aware Software Systems Testing.", "method": "The authors developed an on-premises, LLM-based tool using Retrieval Augmented Generation (RAG) to help with searching and filtering documents. They applied engineering best practices and validated the tool primarily through Positive Percent Agreement (PPA) with human researchers. Tool validation also included human judgment and statistical sampling via convenience sampling methods.", "result": "The LLM-based tool achieved 90% agreement (PPA) with human researchers when identifying irrelevant sources. The authors provide development information to help others adapt the tool for their domains.", "conclusion": "LLM-based tools are practical and effective for supporting rigorous MVLRs and can significantly reduce researchers' time spent on low-level tasks. However, continued human involvement is necessary to ensure research rigor is not compromised."}}
{"id": "2509.13117", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.13117", "abs": "https://arxiv.org/abs/2509.13117", "authors": ["Jukka Ruohonen", "Sani Abdullahi", "Abhishek Tiwari"], "title": "Vulnerability Patching Across Software Products and Software Components: A Case Study of Red Hat's Product Portfolio", "comment": "Submitted to SecITC 2025", "summary": "Motivated by software maintenance and the more recent concept of security\ndebt, the paper presents a time series analysis of vulnerability patching of\nRed Hat's products and components between 1999 and 2024. According to the\nresults based on segmented regression analysis, the amounts of vulnerable\nproducts and components have not been stable; a linear trend describes many of\nthe series well. Nor do the amounts align well with trends characterizing\nvulnerabilities in general. There are also visible breakpoints indicating that\nthe linear trend is not universally applicable and that the growing security\ndebt may be stabilizing.", "AI": {"tldr": "This paper analyzes two decades of security patching in Red Hat products and finds inconsistent trends, with some signs that the growth in unresolved vulnerabilities (security debt) is slowing down.", "motivation": "The motivation stems from challenges in software maintenance and the rising concern of security debt, specifically regarding how vulnerabilities are patched in widely-used products.", "method": "The paper uses time series analysis, particularly segmented regression analysis, on data about vulnerability patching in Red Hat's products and components from 1999 to 2024.", "result": "The study finds that the number of vulnerable products and components fluctuates, often following a linear trend, but with visible breakpoints suggesting exceptions. The growth in security debt may be stabilizing over time, and the patterns don't match general vulnerability trends.", "conclusion": "Trends in vulnerability patching for Red Hat products are inconsistent, sometimes linear but interrupted by change points, suggesting that security debt may be stabilizing rather than continuously increasing."}}
{"id": "2509.13134", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13134", "abs": "https://arxiv.org/abs/2509.13134", "authors": ["Talaya Farasat", "Joachim Posegga"], "title": "Optimizing Code Embeddings and ML Classifiers for Python Source Code Vulnerability Detection", "comment": null, "summary": "In recent years, the growing complexity and scale of source code have\nrendered manual software vulnerability detection increasingly impractical. To\naddress this challenge, automated approaches leveraging machine learning and\ncode embeddings have gained substantial attention. This study investigates the\noptimal combination of code embedding techniques and machine learning\nclassifiers for vulnerability detection in Python source code. We evaluate\nthree embedding techniques, i.e., Word2Vec, CodeBERT, and GraphCodeBERT\nalongside two deep learning classifiers, i.e., Bidirectional Long Short-Term\nMemory (BiLSTM) networks and Convolutional Neural Networks (CNN). While CNN\npaired with GraphCodeBERT exhibits strong performance, the BiLSTM model using\nWord2Vec consistently achieves superior overall results. These findings suggest\nthat, despite the advanced architectures of recent models like CodeBERT and\nGraphCodeBERT, classical embeddings such as Word2Vec, when used with\nsequence-based models like BiLSTM, can offer a slight yet consistent\nperformance advantage. The study underscores the critical importance of\nselecting appropriate combinations of embeddings and classifiers to enhance the\neffectiveness of automated vulnerability detection systems, particularly for\nPython source code.", "AI": {"tldr": "Combining Word2Vec embeddings with BiLSTM models outperforms advanced models for Python vulnerability detection, showing the importance of pairing the right embeddings with classifiers.", "motivation": "Manual vulnerability detection is increasingly ineffective due to the expanding scale and complexity of source code, necessitating better automated solutions.", "method": "The study evaluates three code embedding techniques (Word2Vec, CodeBERT, GraphCodeBERT) with two deep learning classifiers (BiLSTM and CNN) for detecting vulnerabilities in Python source code.", "result": "CNN with GraphCodeBERT performs well, but BiLSTM with Word2Vec achieves the best and most consistent results overall, sometimes outperforming more advanced models.", "conclusion": "Classical code embeddings like Word2Vec, when combined with sequence models such as BiLSTM, can outperform newer embedding-classifier pairings for automated detection of Python vulnerabilities. The study highlights the value of carefully choosing embedding-classifier combinations for best results."}}
{"id": "2509.13144", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13144", "abs": "https://arxiv.org/abs/2509.13144", "authors": ["Lingli Cao", "Shanshan Li", "Ying Fan", "Danyang Li", "Chenxing Zhong"], "title": "Towards the Next Generation of Software: Insights from Grey Literature on AI-Native Applications", "comment": null, "summary": "Background: The rapid advancement of large language models (LLMs) has given\nrise to AI-native applications, a new paradigm in software engineering that\nfundamentally redefines how software is designed, developed, and evolved.\nDespite their growing prominence, AI-native applications still lack a unified\nengineering definition and architectural blueprint, leaving practitioners\nwithout systematic guidance for system design, quality assurance, and\ntechnology selection.\n  Objective: This study seeks to establish a comprehensive understanding of\nAI-native applications by identifying their defining characteristics, key\nquality attributes, and typical technology stacks, as well as by clarifying the\nopportunities and challenges they present.\n  Method: We conducted a grey literature review, integrating conceptual\nperspectives retrieved from targeted Google and Bing searches with practical\ninsights derived from leading open-source projects on GitHub. A structured\nprotocol encompassing source selection, quality assessment, and thematic\nanalysis was applied to synthesize findings across heterogeneous sources.\n  Results: We finally identified 106 studies based on the selection criteria.\nThe analysis reveals that AI-native applications are distinguished by two core\npillars: the central role of AI as the system's intelligence paradigm and their\ninherently probabilistic, non-deterministic nature. Critical quality attributes\ninclude reliability, usability, performance efficiency, and AI-specific\nobservability. In addition, a typical technology stack has begun to emerge,\ncomprising LLM orchestration frameworks, vector databases, and AI-native\nobservability platforms. These systems emphasize response quality,\ncost-effectiveness, and outcome predictability, setting them apart from\nconventional software systems.\n  Conclusion: This study is the first to propose a dual-layered engineering\nblueprint...", "AI": {"tldr": "AI-native applications, powered by large language models, require new software engineering approaches. This study defines their core features, quality measures, and tech stacks, offering a foundational blueprint for practitioners.", "motivation": "Large language models are leading to a paradigm shift in software engineering, but practitioners lack systematic definitions, architecture, and guidance for AI-native applications.", "method": "Grey literature review integrating conceptual perspectives from web searches with practical insights from GitHub open-source projects, using a structured protocol for source selection, quality assessment, and thematic analysis.", "result": "Identified 106 pertinent studies. AI-native applications are defined by the central role of AI and their probabilistic nature. Key quality attributes involve reliability, usability, efficiency, and AI-specific observability. Common technology stacks include LLM orchestration frameworks, vector databases, and AI-native observability platforms.", "conclusion": "This study introduces the first dual-layered engineering blueprint for AI-native applications, establishing foundational definitions, optimal qualities, and technology stacks that distinguish them from conventional systems."}}
